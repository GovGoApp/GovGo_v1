"""
GovGo V1 - Exemplos de Uso
=========================

Demonstra como usar o novo sistema V1 mantendo compatibilidade com V0.
"""

import os
import sys
import json
import asyncio
from typing import List, Dict, Any

# Adiciona o diret√≥rio v1 ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.config import config
from core.database import supabase_manager
from core.models import DocumentoPNCP, ContratacaoSupabase, ResultadoBuscaCompativel


def exemplo_busca_compativel():
    """Exemplo de busca compat√≠vel com o sistema V0."""
    print("=" * 60)
    print("EXEMPLO 1: BUSCA COMPAT√çVEL COM V0")
    print("=" * 60)
    
    try:
        # Busca textual (igual ao gvg_search_utils_v3.py)
        print("\nüîç Busca textual por 'equipamento'...")
        
        resultados = supabase_manager.buscar_compativel_v0(
            query="equipamento",
            search_type='textual',
            limit=5
        )
        
        if resultados:
            print(f"   Encontrados {len(resultados)} resultados:")
            
            for i, resultado in enumerate(resultados, 1):
                print(f"\n   {i}. {resultado.numerocontrolepncp}")
                print(f"      Objeto: {resultado.objeto[:80]}...")
                print(f"      √ìrg√£o: {resultado.orgaoentidade_razaosocial}")
                if resultado.valorestimado:
                    print(f"      Valor: R$ {resultado.valorestimado:,.2f}")
                print(f"      Similaridade: {resultado.similarity:.3f}")
        else:
            print("   Nenhum resultado encontrado.")
        
        # Busca h√≠brida
        print("\nüîç Busca h√≠brida por 'software'...")
        
        resultados_hybrid = supabase_manager.buscar_compativel_v0(
            query="software",
            search_type='hybrid',
            limit=3
        )
        
        if resultados_hybrid:
            print(f"   Encontrados {len(resultados_hybrid)} resultados h√≠bridos:")
            
            for resultado in resultados_hybrid:
                print(f"   - {resultado.numerocontrolepncp}: {resultado.objeto[:60]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na busca compat√≠vel: {e}")
        return False


def exemplo_uso_modelos():
    """Exemplo de uso dos novos modelos V1."""
    print("\n" + "=" * 60)
    print("EXEMPLO 2: USO DOS NOVOS MODELOS V1")
    print("=" * 60)
    
    try:
        # Criar documento PNCP
        print("\nüìÑ Criando DocumentoPNCP...")
        
        documento = DocumentoPNCP(
            numero_controle_pncp=f"EXEMPLO_{int(os.urandom(4).hex(), 16)}",
            tipo_documento="contratacao",
            dados_originais={
                "origem": "exemplo_uso",
                "timestamp": "2024-01-01T00:00:00Z"
            },
            objeto="Exemplo de contrata√ß√£o para demonstra√ß√£o do sistema V1",
            orgao_cnpj="12345678000199",
            orgao_razao_social="√ìrg√£o de Exemplo Ltda",
            unidade_codigo="001",
            unidade_nome="Unidade de Exemplo",
            valor_estimado=50000.00,
            situacao="Publicada",
            modalidade="Preg√£o Eletr√¥nico",
            status_processamento="processado"
        )
        
        print(f"   Documento criado: {documento.numero_controle_pncp}")
        print(f"   Tipo: {documento.tipo_documento}")
        print(f"   Objeto: {documento.objeto}")
        print(f"   Valor: R$ {documento.valor_estimado:,.2f}")
        
        # Inserir no banco (se tabela existir)
        try:
            sucesso = supabase_manager.inserir_documento_pncp(documento)
            if sucesso:
                print("   ‚úÖ Documento inserido com sucesso!")
            else:
                print("   ‚ö†Ô∏è  Falha ao inserir documento")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Tabela documentos_pncp n√£o existe ainda: {e}")
        
        # Converter contrata√ß√£o existente
        print("\nüîÑ Convertendo contrata√ß√£o existente...")
        
        contratacoes = supabase_manager.buscar_contratacoes(limite=1)
        if contratacoes:
            contratacao_original = contratacoes[0]
            documento_convertido = supabase_manager.converter_contratacao_para_documento(contratacao_original)
            
            print(f"   Original: {contratacao_original.get('numerocontrolepncp')}")
            print(f"   Convertido: {documento_convertido.numero_controle_pncp}")
            print(f"   Tipo: {documento_convertido.tipo_documento}")
        else:
            print("   Nenhuma contrata√ß√£o encontrada para convers√£o")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no uso dos modelos: {e}")
        return False


def exemplo_busca_unificada():
    """Exemplo de busca no sistema unificado V1."""
    print("\n" + "=" * 60)
    print("EXEMPLO 3: BUSCA UNIFICADA V1")
    print("=" * 60)
    
    try:
        # Busca em todos os tipos de documento
        print("\nüîç Busca unificada por 'consultoria'...")
        
        documentos = supabase_manager.buscar_documentos_unificado(
            texto_busca="consultoria",
            tipos_documento=["contratacao", "contrato", "ata", "pca"],
            limite=5
        )
        
        if documentos:
            print(f"   Encontrados {len(documentos)} documentos:")
            
            for doc in documentos:
                print(f"\n   üìÑ {doc.numero_controle_pncp} ({doc.tipo_documento})")
                print(f"      Objeto: {doc.objeto[:80]}...")
                print(f"      √ìrg√£o: {doc.orgao_razao_social}")
                print(f"      Status: {doc.status_processamento}")
        else:
            print("   Nenhum documento encontrado.")
            print("   (Tabela documentos_pncp pode n√£o existir ainda)")
        
        # Busca por tipo espec√≠fico
        print("\nüîç Busca por tipo espec√≠fico (contratacao)...")
        
        contratos = supabase_manager.buscar_documentos_unificado(
            tipos_documento=["contratacao"],
            limite=3
        )
        
        print(f"   Encontradas {len(contratos)} contrata√ß√µes no modelo unificado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na busca unificada: {e}")
        return False


def exemplo_estatisticas():
    """Exemplo de obten√ß√£o de estat√≠sticas do sistema."""
    print("\n" + "=" * 60)
    print("EXEMPLO 4: ESTAT√çSTICAS DO SISTEMA")
    print("=" * 60)
    
    try:
        # Estat√≠sticas gerais
        print("\nüìä Estat√≠sticas do banco de dados...")
        
        stats = supabase_manager.obter_estatisticas()
        
        print(f"   Contrata√ß√µes (V0): {stats.get('total_contratacoes', 0):,}")
        print(f"   Com embeddings: {stats.get('contratacoes_com_embedding', 0):,}")
        print(f"   Documentos PNCP (V1): {stats.get('total_documentos_pncp', 0):,}")
        
        docs_por_tipo = stats.get('documentos_por_tipo', {})
        if docs_por_tipo:
            print("   Documentos por tipo:")
            for tipo, count in docs_por_tipo.items():
                print(f"     - {tipo}: {count:,}")
        
        # Sa√∫de do sistema
        print("\nüè• Sa√∫de do sistema...")
        
        saude = supabase_manager.verificar_saude_sistema()
        
        print(f"   Conex√£o: {'‚úÖ OK' if saude.get('conexao_ok') else '‚ùå Falha'}")
        
        extensoes = saude.get('extensoes_instaladas', [])
        print(f"   Extens√µes: {', '.join(extensoes) if extensoes else 'Nenhuma'}")
        
        tabelas = saude.get('tabelas_existentes', [])
        print(f"   Tabelas: {', '.join(tabelas) if tabelas else 'Nenhuma'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        return False


def exemplo_compatibilidade_completa():
    """Exemplo completo de compatibilidade entre V0 e V1."""
    print("\n" + "=" * 60)
    print("EXEMPLO 5: COMPATIBILIDADE COMPLETA V0 ‚Üî V1")
    print("=" * 60)
    
    try:
        # 1. Busca no formato V0
        print("\n1Ô∏è‚É£ Busca no formato V0 (gvg_search_utils_v3.py)...")
        
        resultados_v0 = supabase_manager.buscar_contratacoes(
            texto_busca="servi√ßo",
            limite=2
        )
        
        if resultados_v0:
            print(f"   Encontradas {len(resultados_v0)} contrata√ß√µes (formato V0)")
            primeira_v0 = resultados_v0[0]
            print(f"   Primeira: {primeira_v0.get('numerocontrolepncp')}")
            
            # 2. Converte para formato V1
            print("\n2Ô∏è‚É£ Convertendo para formato V1...")
            
            documento_v1 = supabase_manager.converter_contratacao_para_documento(primeira_v0)
            print(f"   Convertido: {documento_v1.numero_controle_pncp}")
            print(f"   Tipo documento: {documento_v1.tipo_documento}")
            
            # 3. Busca compat√≠vel (h√≠brida)
            print("\n3Ô∏è‚É£ Busca compat√≠vel (retorna ResultadoBuscaCompativel)...")
            
            resultados_compat = supabase_manager.buscar_compativel_v0(
                query="servi√ßo",
                search_type='textual',
                limit=2
            )
            
            if resultados_compat:
                print(f"   Encontrados {len(resultados_compat)} resultados compat√≠veis")
                primeiro_compat = resultados_compat[0]
                print(f"   Tipo: {type(primeiro_compat).__name__}")
                print(f"   N√∫mero: {primeiro_compat.numerocontrolepncp}")
                print(f"   Similaridade: {primeiro_compat.similarity}")
            
            # 4. Demonstra interoperabilidade
            print("\n4Ô∏è‚É£ Interoperabilidade demonstrada:")
            print("   ‚úÖ Dados V0 acess√≠veis")
            print("   ‚úÖ Convers√£o V0 ‚Üí V1 funcionando")
            print("   ‚úÖ Interface compat√≠vel dispon√≠vel")
            print("   ‚úÖ Busca h√≠brida operacional")
        
        else:
            print("   Nenhuma contrata√ß√£o encontrada para demonstra√ß√£o")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o de compatibilidade: {e}")
        return False


def main():
    """Executa todos os exemplos."""
    print("GovGo V1 - Exemplos de Uso")
    print("=" * 60)
    print("Demonstra√ß√£o das capacidades do sistema V1")
    print("com total compatibilidade com o sistema V0")
    
    exemplos = [
        ("Busca Compat√≠vel V0", exemplo_busca_compativel),
        ("Uso dos Modelos V1", exemplo_uso_modelos),
        ("Busca Unificada V1", exemplo_busca_unificada),
        ("Estat√≠sticas", exemplo_estatisticas),
        ("Compatibilidade Completa", exemplo_compatibilidade_completa)
    ]
    
    resultados = {}
    
    for nome, funcao in exemplos:
        try:
            print(f"\nüöÄ Executando: {nome}")
            sucesso = funcao()
            resultados[nome] = sucesso
            
            if sucesso:
                print(f"‚úÖ {nome} executado com sucesso")
            else:
                print(f"‚ö†Ô∏è  {nome} executado com problemas")
                
        except Exception as e:
            print(f"‚ùå Erro em {nome}: {e}")
            resultados[nome] = False
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("RELAT√ìRIO FINAL")
    print("=" * 60)
    
    total = len(resultados)
    sucessos = sum(resultados.values())
    
    print(f"üìä Exemplos executados: {total}")
    print(f"‚úÖ Sucessos: {sucessos}")
    print(f"‚ùå Falhas: {total - sucessos}")
    print(f"üìà Taxa de sucesso: {(sucessos/total)*100:.1f}%")
    
    print("\nDetalhes:")
    for nome, sucesso in resultados.items():
        status = "‚úÖ" if sucesso else "‚ùå"
        print(f"   {status} {nome}")
    
    if sucessos == total:
        print("\nüéâ Todos os exemplos foram executados com sucesso!")
        print("   O sistema V1 est√° funcionando corretamente.")
    else:
        print(f"\n‚ö†Ô∏è  {total - sucessos} exemplo(s) com problemas.")
        print("   Verifique as configura√ß√µes e depend√™ncias.")
    
    return 0 if sucessos == total else 1


if __name__ == "__main__":
    sys.exit(main())
