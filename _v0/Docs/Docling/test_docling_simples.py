"""
Teste Docling Simples - Apenas Markdown
Gera apenas arquivos .md com foco em tabelas de PDFs
"""

import os
import sys
import warnings
import zipfile
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# Suprimir warnings do PyTorch/Docling
warnings.filterwarnings("ignore", message=".*pin_memory.*", category=UserWarning)
warnings.filterwarnings("ignore", message=".*accelerator.*", category=UserWarning)

# Configura√ß√£o
TEST_FILES_PATH = r"C:\Users\Haroldo Duraes\Desktop\GOvGO\TESTE"
OUTPUT_DIR = TEST_FILES_PATH + r"\CONV_Docling"

def ensure_output_directory():
    """Garante que o diret√≥rio de sa√≠da existe"""
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    print(f"üìÅ Diret√≥rio de sa√≠da: {OUTPUT_DIR}")

def get_file_info(filepath: str) -> Dict[str, Any]:
    """Obt√©m informa√ß√µes b√°sicas do arquivo"""
    stat = os.stat(filepath)
    size = stat.st_size
    
    if size < 1024:
        size_str = f"{size} B"
    elif size < 1024 * 1024:
        size_str = f"{size/1024:.1f} KB"
    elif size < 1024 * 1024 * 1024:
        size_str = f"{size/(1024*1024):.1f} MB"
    else:
        size_str = f"{size/(1024*1024*1024):.1f} GB"
    
    return {
        'size': size,
        'size_str': size_str,
        'extension': Path(filepath).suffix.lower()
    }

def count_tables_in_doc(doc) -> int:
    """Conta o n√∫mero de tabelas no documento"""
    if not doc or not hasattr(doc, 'tables'):
        return 0
    return len(doc.tables)

def process_single_file(filepath: str, display_name: str = None) -> Dict[str, Any]:
    """Processa um √∫nico arquivo com Docling e gera apenas MD"""
    try:
        from docling.document_converter import DocumentConverter
    except ImportError:
        return {
            'status': 'error',
            'file_name': os.path.basename(filepath),
            'error': "Docling n√£o instalado. Execute: pip install docling"
        }
    
    filename = display_name or os.path.basename(filepath)
    file_info = get_file_info(filepath)
    
    print(f"\nüìÑ Processando: {filename}")
    print(f"   üìè Tamanho: {file_info['size_str']}")
    print(f"   üîß Extens√£o: {file_info['extension']}")
    
    try:
        # Converter documento
        converter = DocumentConverter()
        print("   üîÑ Convertendo com Docling...")
        result = converter.convert(filepath)
        doc = result.document
        
        # Contar tabelas
        table_count = count_tables_in_doc(doc)
        
        # Extrair conte√∫do markdown
        markdown_content = doc.export_to_markdown()
        
        # Nome do arquivo de sa√≠da
        safe_name = "".join(c for c in Path(filename).stem if c.isalnum() or c in (' ', '-', '_')).strip()[:100]
        if not safe_name:
            safe_name = f"documento_{datetime.now().strftime('%H%M%S')}"
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Salvar arquivo Markdown
        md_file = os.path.join(OUTPUT_DIR, f"{safe_name}_{timestamp}.md")
        with open(md_file, 'w', encoding='utf-8') as f:
            f.write(f"# Convers√£o Docling: {filename}\n\n")
            f.write(f"**Arquivo original:** `{filename}`  \n")
            f.write(f"**Tamanho:** {file_info['size_str']}  \n")
            f.write(f"**Extens√£o:** {file_info['extension']}  \n")
            f.write(f"**Tabelas encontradas:** {table_count}  \n")
            f.write(f"**Processado em:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n")
            f.write(f"**Ferramenta:** Docling  \n\n")
            f.write("---\n\n")
            f.write(markdown_content)
        
        file_size = os.path.getsize(md_file)
        print(f"   ‚úÖ Sucesso! Arquivo gerado:")
        print(f"      üìù {os.path.basename(md_file)} ({file_size:,} bytes)")
        print(f"      üìä Tabelas: {table_count}")
        
        return {
            'status': 'success',
            'file_name': filename,
            'input_size': file_info['size'],
            'output_file': md_file,
            'output_size': file_size,
            'table_count': table_count
        }
        
    except Exception as e:
        error_msg = str(e)
        print(f"   ‚ùå Erro: {error_msg}")
        
        # Salvar arquivo de erro
        error_file = os.path.join(OUTPUT_DIR, f"ERROR_{Path(filename).stem}_{datetime.now().strftime('%H%M%S')}.md")
        with open(error_file, 'w', encoding='utf-8') as f:
            f.write(f"# ERRO na convers√£o Docling: {filename}\n\n")
            f.write(f"**Arquivo:** `{filename}`  \n")
            f.write(f"**Erro:** {error_msg}  \n")
            f.write(f"**Data:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n\n")
            f.write("## Detalhes do arquivo\n\n")
            f.write(f"- Tamanho: {file_info['size_str']}\n")
            f.write(f"- Extens√£o: {file_info['extension']}\n")
        
        return {
            'status': 'error',
            'file_name': filename,
            'error': error_msg,
            'input_size': file_info['size']
        }

def process_zip_file(zip_path: str) -> List[Dict[str, Any]]:
    """Processa arquivos dentro de um ZIP e gera apenas MDs"""
    results = []
    
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            # Extrair para pasta tempor√°ria
            temp_extract_dir = os.path.join(OUTPUT_DIR, f"temp_zip_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
            zip_ref.extractall(temp_extract_dir)
            
            # Processar cada arquivo extra√≠do
            for root, dirs, files in os.walk(temp_extract_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    relative_path = os.path.relpath(file_path, temp_extract_dir)
                    
                    print(f"  üìÑ Processando arquivo do ZIP: {relative_path}")
                    
                    result = process_single_file(file_path, f"ZIP:{relative_path}")
                    if result:
                        results.append(result)
            
            # Limpar arquivos tempor√°rios
            shutil.rmtree(temp_extract_dir, ignore_errors=True)
    
    except Exception as e:
        print(f"‚ùå Erro ao processar ZIP: {e}")
        results.append({
            'status': 'error',
            'file_name': os.path.basename(zip_path),
            'error': f"Erro ZIP: {str(e)}"
        })
    
    return results

def generate_simple_report(all_results: List[Dict[str, Any]]):
    """Gera relat√≥rio simples"""
    print(f"\n{'='*50}")
    print("üìä RELAT√ìRIO FINAL - DOCLING MD")
    print("="*50)
    
    successful = [r for r in all_results if r['status'] == 'success']
    failed = [r for r in all_results if r['status'] == 'error']
    
    print(f"‚úÖ Sucessos: {len(successful)}")
    print(f"‚ùå Erros: {len(failed)}")
    print(f"üìä Taxa de sucesso: {(len(successful)/len(all_results)*100):.1f}%")
    
    if successful:
        total_tables = sum(r.get('table_count', 0) for r in successful)
        total_input = sum(r['input_size'] for r in successful)
        total_output = sum(r['output_size'] for r in successful)
        
        print(f"\nüìã ESTAT√çSTICAS:")
        print(f"   üìä Total de tabelas: {total_tables}")
        print(f"   üìè Tamanho original: {total_input:,} bytes")
        print(f"   üìÑ Tamanho MD gerado: {total_output:,} bytes")
        print(f"   üìà Expans√£o: {(total_output/total_input*100):.1f}%")
    
    # Relat√≥rio em arquivo
    report_file = os.path.join(OUTPUT_DIR, "RELATORIO_DOCLING_MD.md")
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("# Relat√≥rio - Convers√£o Docling para MD\n\n")
        f.write(f"**Data:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n")
        f.write(f"**Diret√≥rio:** `{OUTPUT_DIR}`  \n")
        f.write(f"**Arquivos processados:** {len(all_results)}  \n")
        f.write(f"**Sucessos:** {len(successful)}  \n")
        f.write(f"**Erros:** {len(failed)}  \n\n")
        
        if successful:
            f.write("## ‚úÖ Arquivos convertidos\n\n")
            f.write("| Arquivo | Tamanho | Tabelas | Arquivo MD |\n")
            f.write("|---------|---------|---------|------------|\n")
            
            for result in successful:
                tables = result.get('table_count', 0)
                md_name = os.path.basename(result['output_file'])
                f.write(f"| `{result['file_name']}` | {result['input_size']:,} B | {tables} | `{md_name}` |\n")
            f.write("\n")
        
        if failed:
            f.write("## ‚ùå Arquivos com erro\n\n")
            f.write("| Arquivo | Erro |\n")
            f.write("|---------|------|\n")
            
            for result in failed:
                f.write(f"| `{result['file_name']}` | {result['error']} |\n")
            f.write("\n")
    
    print(f"\nüìã Relat√≥rio salvo em: {os.path.basename(report_file)}")
    print(f"üìÅ Arquivos gerados: {len(os.listdir(OUTPUT_DIR))}")
    print(f"üìÇ Pasta: {OUTPUT_DIR}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ DOCLING - CONVERS√ÉO SIMPLES PARA MD")
    print("="*50)
    print(f"üìÇ Origem: {TEST_FILES_PATH}")
    print(f"üìÅ Destino: {OUTPUT_DIR}")
    print("="*50)
    
    # Processar arquivo espec√≠fico se fornecido
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
        if os.path.exists(file_path):
            ensure_output_directory()
            result = process_single_file(file_path)
            if result:
                print(f"\nüìä RESULTADO:")
                print(f"Status: {result['status']}")
                if result['status'] == 'success':
                    print(f"Tabelas: {result.get('table_count', 0)}")
                    print(f"Arquivo: {os.path.basename(result['output_file'])}")
            return
        else:
            print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
            return
    
    # Verificar Docling
    try:
        from docling.document_converter import DocumentConverter
        print("‚úÖ Docling OK")
    except ImportError:
        print("‚ùå Docling n√£o instalado! Use: pip install docling")
        return
    
    # Verificar pasta de origem
    if not os.path.exists(TEST_FILES_PATH):
        print(f"‚ùå Pasta n√£o encontrada: {TEST_FILES_PATH}")
        print(f"üí° Use: python {sys.argv[0]} caminho_arquivo")
        return
    
    # Criar diret√≥rio de sa√≠da
    ensure_output_directory()
    
    # Listar arquivos
    files_to_process = []
    try:
        for filename in os.listdir(TEST_FILES_PATH):
            filepath = os.path.join(TEST_FILES_PATH, filename)
            if os.path.isfile(filepath) and not filename.startswith('.'):
                files_to_process.append(filepath)
    except PermissionError:
        print(f"‚ùå Sem permiss√£o para acessar: {TEST_FILES_PATH}")
        return
    
    if not files_to_process:
        print("‚ùå Nenhum arquivo encontrado para processar")
        return
    
    print(f"\nüìã Arquivos encontrados: {len(files_to_process)}")
    
    # Processar arquivos
    all_results = []
    
    for filepath in files_to_process:
        filename = os.path.basename(filepath)
        
        # Verificar se √© ZIP (processar conte√∫do)
        if filename.lower().endswith('.zip'):
            print(f"\nüì¶ Processando arquivo ZIP: {filename}")
            zip_results = process_zip_file(filepath)
            all_results.extend(zip_results)
        else:
            # Processar arquivo individual
            result = process_single_file(filepath)
            if result:
                all_results.append(result)
    
    # Gerar relat√≥rio
    if all_results:
        generate_simple_report(all_results)
    else:
        print("\n‚ùå Nenhum arquivo foi processado.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
