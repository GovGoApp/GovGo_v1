"""
Sistema completo de testes MarkItDown
Processa todos os tipos de arquivos suportados incluindo integra√ß√£o com OpenAI
"""

import os
import sys
from datetime import datetime
from pathlib import Path
import shutil

# Configura√ß√£o
TEST_FILES_PATH = r"C:\Users\Haroldo Duraes\Desktop\GOvGO\TESTE"
OUTPUT_DIR = os.path.join(TEST_FILES_PATH, "conversoes")
OPENAI_ENV_FILE = "openai.env"

def load_openai_config():
    """Carrega configura√ß√£o OpenAI do arquivo .env"""
    config = {}
    if os.path.exists(OPENAI_ENV_FILE):
        with open(OPENAI_ENV_FILE, 'r') as f:
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    config[key] = value
    return config

def setup_openai():
    """Configura cliente OpenAI se dispon√≠vel"""
    try:
        from openai import OpenAI
        config = load_openai_config()
        
        if 'api_key' in config:
            os.environ['OPENAI_API_KEY'] = config['api_key']
            client = OpenAI(api_key=config['api_key'])
            print("‚úÖ OpenAI configurado com sucesso")
            return client
        else:
            print("‚ö†Ô∏è  Chave API OpenAI n√£o encontrada no arquivo openai.env")
            return None
            
    except ImportError:
        print("‚ö†Ô∏è  OpenAI n√£o instalado. Instale com: pip install openai")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao configurar OpenAI: {e}")
        return None

def get_markitdown_instance(openai_client=None):
    """Cria inst√¢ncia MarkItDown com ou sem OpenAI"""
    from markitdown import MarkItDown
    
    if openai_client:
        return MarkItDown(
            llm_client=openai_client, 
            llm_model="gpt-4o",
            enable_plugins=True
        )
    else:
        return MarkItDown(enable_plugins=True)

def create_output_directory():
    """Cria diret√≥rio de sa√≠da se n√£o existir"""
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
        print(f"üìÅ Diret√≥rio de sa√≠da criado: {OUTPUT_DIR}")
    else:
        print(f"üìÅ Usando diret√≥rio de sa√≠da existente: {OUTPUT_DIR}")

def get_file_info(filepath):
    """Obt√©m informa√ß√µes detalhadas do arquivo"""
    stat = os.stat(filepath)
    size = stat.st_size
    
    # Converter tamanho para formato leg√≠vel
    if size < 1024:
        size_str = f"{size} B"
    elif size < 1024 * 1024:
        size_str = f"{size/1024:.1f} KB"
    elif size < 1024 * 1024 * 1024:
        size_str = f"{size/(1024*1024):.1f} MB"
    else:
        size_str = f"{size/(1024*1024*1024):.1f} GB"
    
    modified = datetime.fromtimestamp(stat.st_mtime)
    
    return {
        'size': size,
        'size_str': size_str,
        'modified': modified.strftime('%Y-%m-%d %H:%M:%S'),
        'extension': Path(filepath).suffix.lower()
    }

def is_already_converted(file_path, output_dir):
    """Verifica se um arquivo j√° foi convertido baseado na exist√™ncia do arquivo markdown correspondente"""
    try:
        # Obter nome base do arquivo sem extens√£o
        base_name = os.path.splitext(os.path.basename(file_path))[0]
        
        # Criar nome do arquivo markdown esperado
        markdown_file = os.path.join(output_dir, f"{base_name}.md")
        
        # Verificar se o arquivo markdown existe e se √© mais recente que o arquivo original
        if os.path.exists(markdown_file):
            original_mtime = os.path.getmtime(file_path)
            markdown_mtime = os.path.getmtime(markdown_file)
            return markdown_mtime >= original_mtime
        
        return False
    except Exception as e:
        print(f"Erro ao verificar se arquivo foi convertido: {e}")
        return False

def process_single_file(filepath, md_converter, output_dir):
    """Processa um √∫nico arquivo"""
    filename = os.path.basename(filepath)
    file_info = get_file_info(filepath)
    
    print(f"\nüìÑ Processando: {filename}")
    print(f"   üìè Tamanho: {file_info['size_str']}")
    print(f"   üìÖ Modificado: {file_info['modified']}")
    print(f"   üîß Extens√£o: {file_info['extension']}")
    
    # Verificar se j√° foi convertido
    if is_already_converted(filepath, output_dir):
        print(f"   ‚è≠Ô∏è  Arquivo j√° convertido - pulando...")
        base_name = Path(filename).stem
        output_filename = f"{base_name}.md"
        output_path = os.path.join(output_dir, output_filename)
        output_size = os.path.getsize(output_path)
        
        return {
            'status': 'success',
            'input_file': filename,
            'output_file': output_filename,
            'input_size': file_info['size'],
            'output_size': output_size,
            'skipped': True
        }
    
    try:
        # Convers√£o
        print("   üîÑ Convertendo...")
        result = md_converter.convert(filepath)
        
        # Nome do arquivo de sa√≠da
        base_name = Path(filename).stem
        output_filename = f"{base_name}.md"
        output_path = os.path.join(output_dir, output_filename)
        
        # Salvar resultado
        with open(output_path, 'w', encoding='utf-8') as f:
            # Cabe√ßalho com metadados
            f.write(f"# Convers√£o: {filename}\n\n")
            f.write(f"**Arquivo original:** `{filename}`  \n")
            f.write(f"**Tamanho:** {file_info['size_str']}  \n")
            f.write(f"**Modificado:** {file_info['modified']}  \n")
            f.write(f"**Tipo:** {file_info['extension']}  \n")
            f.write(f"**Convertido em:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n\n")
            f.write("---\n\n")
            f.write(result.text_content)
        
        # Estat√≠sticas
        output_size = os.path.getsize(output_path)
        compression_ratio = (output_size / file_info['size']) * 100 if file_info['size'] > 0 else 0
        
        print(f"   ‚úÖ Sucesso! Salvo em: {output_filename}")
        print(f"   üìä Markdown: {output_size} bytes ({compression_ratio:.1f}% do original)")
        
        return {
            'status': 'success',
            'input_file': filename,
            'output_file': output_filename,
            'input_size': file_info['size'],
            'output_size': output_size,
            'compression_ratio': compression_ratio,
            'skipped': False
        }
        
    except Exception as e:
        error_msg = str(e)
        print(f"   ‚ùå Erro: {error_msg}")
        
        # Salvar erro em arquivo
        error_filename = f"{Path(filename).stem}_ERROR.md"
        error_path = os.path.join(output_dir, error_filename)
        
        with open(error_path, 'w', encoding='utf-8') as f:
            f.write(f"# ERRO na convers√£o: {filename}\n\n")
            f.write(f"**Arquivo:** `{filename}`  \n")
            f.write(f"**Erro:** {error_msg}  \n")
            f.write(f"**Data:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n\n")
            f.write("## Detalhes do arquivo\n\n")
            f.write(f"- Tamanho: {file_info['size_str']}\n")
            f.write(f"- Extens√£o: {file_info['extension']}\n")
            f.write(f"- Modificado: {file_info['modified']}\n")
        
        return {
            'status': 'error',
            'input_file': filename,
            'error': error_msg,
            'input_size': file_info['size']
        }

def main():
    """Fun√ß√£o principal"""
    print("üöÄ SISTEMA COMPLETO DE TESTES MARKITDOWN")
    print("="*60)
    print(f"üìÇ Pasta de origem: {TEST_FILES_PATH}")
    print(f"üìÅ Pasta de destino: {OUTPUT_DIR}")
    print(f"üïí Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    # Verificar se pasta de origem existe
    if not os.path.exists(TEST_FILES_PATH):
        print(f"‚ùå Pasta de origem n√£o encontrada: {TEST_FILES_PATH}")
        return
    
    # Configurar OpenAI
    openai_client = setup_openai()
    
    # Criar inst√¢ncia MarkItDown
    md_converter = get_markitdown_instance(openai_client)
    print(f"üîß MarkItDown configurado (OpenAI: {'Sim' if openai_client else 'N√£o'})")
    
    # Criar diret√≥rio de sa√≠da
    create_output_directory()
    
    # Listar arquivos para processar
    files_to_process = []
    for filename in os.listdir(TEST_FILES_PATH):
        filepath = os.path.join(TEST_FILES_PATH, filename)
        if os.path.isfile(filepath):
            files_to_process.append(filepath)
    
    print(f"\nüìã Arquivos encontrados: {len(files_to_process)}")
    
    # Processar arquivos
    all_results = []
    
    for filepath in files_to_process:
        filename = os.path.basename(filepath)
        
        # Processar todos os arquivos da mesma forma
        # MarkItDown j√° processa ZIP nativamente
        result = process_single_file(filepath, md_converter, OUTPUT_DIR)
        all_results.append(result)
    
    # Gerar relat√≥rio final
    generate_final_report(all_results)

def generate_final_report(results):
    """Gera relat√≥rio final"""
    print(f"\n{'='*60}")
    print("üìä RELAT√ìRIO FINAL")
    print("="*60)
    
    successful = [r for r in results if r['status'] == 'success']
    failed = [r for r in results if r['status'] == 'error']
    skipped = [r for r in successful if r.get('skipped', False)]
    processed = [r for r in successful if not r.get('skipped', False)]
    
    # Estat√≠sticas console
    print(f"‚úÖ Sucessos: {len(successful)}")
    print(f"   üîÑ Processados: {len(processed)}")
    print(f"   ‚è≠Ô∏è  Pulados (j√° convertidos): {len(skipped)}")
    print(f"‚ùå Erros: {len(failed)}")
    print(f"üìä Taxa de sucesso: {(len(successful)/len(results)*100):.1f}%")
    
    if successful:
        total_input = sum(r['input_size'] for r in successful)
        total_output = sum(r['output_size'] for r in successful)
        print(f"üìè Tamanho original: {total_input:,} bytes")
        print(f"üìÑ Tamanho Markdown: {total_output:,} bytes")
        if total_input > 0:
            print(f"üóúÔ∏è  Compress√£o m√©dia: {(total_output/total_input*100):.1f}%")
    
    # Relat√≥rio detalhado em arquivo
    report_path = os.path.join(OUTPUT_DIR, "RELATORIO_FINAL.md")
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# Relat√≥rio Final - Convers√£o MarkItDown\n\n")
        f.write(f"**Data/Hora:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n")
        f.write(f"**Total de arquivos:** {len(results)}  \n")
        f.write(f"**Sucessos:** {len(successful)}  \n")
        f.write(f"  - **Processados:** {len(processed)}  \n")
        f.write(f"  - **Pulados (j√° convertidos):** {len(skipped)}  \n")
        f.write(f"**Erros:** {len(failed)}  \n")
        f.write(f"**Taxa de sucesso:** {(len(successful)/len(results)*100):.1f}%  \n\n")
        
        if processed:
            f.write("## üîÑ Arquivos processados\n\n")
            f.write("| Arquivo Original | Arquivo Markdown | Tamanho Original | Tamanho MD | Compress√£o |\n")
            f.write("|------------------|------------------|------------------|------------|------------|\n")
            
            for result in processed:
                compression = f"{result.get('compression_ratio', 0):.1f}%"
                f.write(f"| `{result['input_file']}` | `{result['output_file']}` | {result['input_size']:,} B | {result['output_size']:,} B | {compression} |\n")
            f.write("\n")
        
        if skipped:
            f.write("## ‚è≠Ô∏è Arquivos pulados (j√° convertidos)\n\n")
            f.write("| Arquivo Original | Arquivo Markdown | Tamanho Original | Tamanho MD |\n")
            f.write("|------------------|------------------|------------------|------------|\n")
            
            for result in skipped:
                f.write(f"| `{result['input_file']}` | `{result['output_file']}` | {result['input_size']:,} B | {result['output_size']:,} B |\n")
            f.write("\n")
        
        if failed:
            f.write("## ‚ùå Arquivos com erro\n\n")
            f.write("| Arquivo | Erro | Tamanho |\n")
            f.write("|---------|------|----------|\n")
            
            for result in failed:
                f.write(f"| `{result['input_file']}` | {result['error']} | {result['input_size']:,} B |\n")
            f.write("\n")
        
        f.write("## üìÅ Arquivos gerados\n\n")
        md_files = [f for f in os.listdir(OUTPUT_DIR) if f.endswith('.md')]
        for md_file in sorted(md_files):
            f.write(f"- `{md_file}`\n")
    
    print(f"\nüìã Relat√≥rio detalhado salvo em: {report_path}")
    print(f"üìÅ Total de arquivos gerados: {len(os.listdir(OUTPUT_DIR))}")
    print(f"\nüéâ Processamento conclu√≠do!")
    print(f"üìÇ Verifique a pasta '{OUTPUT_DIR}' para ver todos os resultados.")

if __name__ == "__main__":
    try:
        from markitdown import MarkItDown
        main()
    except ImportError:
        print("‚ùå MarkItDown n√£o est√° instalado!")
        print("Instale com: pip install 'markitdown[all]'")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Processamento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
