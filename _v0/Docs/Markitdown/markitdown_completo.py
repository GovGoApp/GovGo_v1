"""
Sistema completo de testes MarkItDown - Vers√£o Otimizada
Processa todos os tipos de arquivos usando funcionalidades nativas do MarkItDown
"""

import os
import sys
from datetime import datetime
from pathlib import Path
import shutil

# Configura√ß√£o
TEST_FILES_PATH = r"C:\Users\Haroldo Duraes\Desktop\GOvGO\TESTE"
OUTPUT_DIR = "conversoes"
OPENAI_ENV_FILE = "openai.env"

def load_openai_config():
    """Carrega configura√ß√£o OpenAI do arquivo .env"""
    config = {}
    if os.path.exists(OPENAI_ENV_FILE):
        with open(OPENAI_ENV_FILE, 'r') as f:
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    config[key] = value
    return config

def setup_openai():
    """Configura cliente OpenAI se dispon√≠vel"""
    try:
        from openai import OpenAI
        config = load_openai_config()
        
        if 'api_key' in config:
            os.environ['OPENAI_API_KEY'] = config['api_key']
            client = OpenAI(api_key=config['api_key'])
            print("‚úÖ OpenAI configurado com sucesso - Descri√ß√µes de imagens habilitadas")
            return client
        else:
            print("‚ö†Ô∏è  Chave API OpenAI n√£o encontrada no arquivo openai.env")
            print("   ‚û§ Imagens ser√£o processadas apenas com OCR b√°sico")
            return None
            
    except ImportError:
        print("‚ö†Ô∏è  OpenAI n√£o instalado. Para descri√ß√µes de imagens instale: pip install openai")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao configurar OpenAI: {e}")
        return None

def get_markitdown_instance(openai_client=None):
    """Cria inst√¢ncia MarkItDown otimizada"""
    from markitdown import MarkItDown
    
    if openai_client:
        print("ü§ñ MarkItDown configurado com IA para imagens (GPT-4o)")
        return MarkItDown(
            llm_client=openai_client, 
            llm_model="gpt-4o",
            enable_plugins=True
        )
    else:
        print("üîß MarkItDown configurado com processamento b√°sico")
        return MarkItDown(enable_plugins=True)

def create_output_directory():
    """Cria diret√≥rio de sa√≠da limpo"""
    if os.path.exists(OUTPUT_DIR):
        shutil.rmtree(OUTPUT_DIR)
    os.makedirs(OUTPUT_DIR)
    print(f"üìÅ Diret√≥rio de sa√≠da criado: {OUTPUT_DIR}")

def get_file_info(filepath):
    """Obt√©m informa√ß√µes detalhadas do arquivo"""
    stat = os.stat(filepath)
    size = stat.st_size
    
    # Converter tamanho para formato leg√≠vel
    if size < 1024:
        size_str = f"{size} B"
    elif size < 1024 * 1024:
        size_str = f"{size/1024:.1f} KB"
    elif size < 1024 * 1024 * 1024:
        size_str = f"{size/(1024*1024):.1f} MB"
    else:
        size_str = f"{size/(1024*1024*1024):.1f} GB"
    
    modified = datetime.fromtimestamp(stat.st_mtime)
    
    return {
        'size': size,
        'size_str': size_str,
        'modified': modified.strftime('%Y-%m-%d %H:%M:%S'),
        'extension': Path(filepath).suffix.lower()
    }

def identify_file_type(filepath):
    """Identifica o tipo de arquivo baseado na extens√£o"""
    ext = Path(filepath).suffix.lower()
    
    file_types = {
        # Documentos Office
        '.pdf': 'üìÑ PDF',
        '.docx': 'üìù Word', 
        '.doc': 'üìù Word Legacy',
        '.pptx': 'üé® PowerPoint',
        '.ppt': 'üé® PowerPoint Legacy',
        '.xlsx': 'üìä Excel',
        '.xls': 'üìä Excel Legacy',
        
        # Imagens
        '.jpg': 'üñºÔ∏è Imagem JPEG',
        '.jpeg': 'üñºÔ∏è Imagem JPEG', 
        '.png': 'üñºÔ∏è Imagem PNG',
        '.gif': 'üñºÔ∏è Imagem GIF',
        '.bmp': 'üñºÔ∏è Imagem BMP',
        '.tiff': 'üñºÔ∏è Imagem TIFF',
        '.webp': 'üñºÔ∏è Imagem WebP',
        
        # Dados estruturados
        '.csv': 'üìã CSV',
        '.json': 'üîó JSON',
        '.xml': 'üì∞ XML',
        '.html': 'üåê HTML',
        '.htm': 'üåê HTML',
        
        # Arquivos compactados
        '.zip': 'üì¶ ZIP',
        '.rar': 'üì¶ RAR',
        '.7z': 'üì¶ 7-Zip',
        
        # √Åudio/V√≠deo
        '.mp3': 'üéµ √Åudio MP3',
        '.wav': 'üéµ √Åudio WAV',
        '.mp4': 'üé¨ V√≠deo MP4',
        
        # Texto
        '.txt': 'üìÑ Texto',
        '.md': 'üìù Markdown',
        '.rtf': 'üìÑ RTF',
        
        # E-books
        '.epub': 'üìö E-book EPUB',
        '.mobi': 'üìö E-book MOBI',
    }
    
    return file_types.get(ext, f'‚ùì Desconhecido ({ext})')

def process_file(filepath, md_converter, output_dir):
    """Processa um √∫nico arquivo com MarkItDown"""
    filename = os.path.basename(filepath)
    file_info = get_file_info(filepath)
    file_type = identify_file_type(filepath)
    
    print(f"\n{file_type} Processando: {filename}")
    print(f"   üìè Tamanho: {file_info['size_str']}")
    print(f"   üìÖ Modificado: {file_info['modified']}")
    
    try:
        # Convers√£o usando MarkItDown nativo
        print("   üîÑ Convertendo com MarkItDown...")
        
        # Para ZIP, o MarkItDown processa automaticamente todos os arquivos internos
        if filename.lower().endswith('.zip'):
            print("   üì¶ Processando ZIP internamente (todos os arquivos ser√£o inclu√≠dos)")
        
        result = md_converter.convert(filepath)
        
        # Nome do arquivo de sa√≠da
        base_name = Path(filename).stem
        output_filename = f"{base_name}.md"
        output_path = os.path.join(output_dir, output_filename)
        
        # Preparar conte√∫do com metadados
        content_lines = [
            f"# {file_type}: {filename}",
            "",
            "## üìä Metadados do Arquivo",
            "",
            f"- **Arquivo original:** `{filename}`",
            f"- **Tipo:** {file_type}",
            f"- **Tamanho:** {file_info['size_str']}",
            f"- **Modificado:** {file_info['modified']}",
            f"- **Convertido em:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            ""
        ]
        
        # Adicionar informa√ß√µes espec√≠ficas por tipo
        if filename.lower().endswith('.zip'):
            content_lines.extend([
                "## üì¶ Informa√ß√µes do ZIP",
                "",
                "Este arquivo ZIP foi processado automaticamente pelo MarkItDown.",
                "Todos os arquivos internos foram analisados e convertidos.",
                ""
            ])
        elif any(filename.lower().endswith(ext) for ext in ['.jpg', '.jpeg', '.png', '.gif', '.bmp']):
            content_lines.extend([
                "## üñºÔ∏è Processamento de Imagem",
                "",
                "Esta imagem foi processada com:",
                "- OCR para extra√ß√£o de texto",
                "- An√°lise de metadados EXIF",
            ])
            if "llm_client" in str(md_converter.__dict__):
                content_lines.append("- Descri√ß√£o inteligente com IA (GPT-4o)")
            content_lines.append("")
        
        content_lines.extend([
            "---",
            "",
            "## üìÑ Conte√∫do Convertido",
            "",
            result.text_content
        ])
        
        # Salvar arquivo
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(content_lines))
        
        # Estat√≠sticas
        output_size = os.path.getsize(output_path)
        compression_ratio = (output_size / file_info['size']) * 100 if file_info['size'] > 0 else 0
        
        print(f"   ‚úÖ Convers√£o conclu√≠da!")
        print(f"   üìÑ Arquivo gerado: {output_filename}")
        print(f"   üìä Tamanho MD: {output_size:,} bytes ({compression_ratio:.1f}% do original)")
        
        # Analisar conte√∫do convertido
        lines_count = len(result.text_content.split('\n'))
        chars_count = len(result.text_content)
        words_count = len(result.text_content.split())
        
        print(f"   üìù Estat√≠sticas: {lines_count} linhas, {words_count} palavras, {chars_count:,} caracteres")
        
        return {
            'status': 'success',
            'input_file': filename,
            'output_file': output_filename,
            'input_size': file_info['size'],
            'output_size': output_size,
            'compression_ratio': compression_ratio,
            'file_type': file_type,
            'lines': lines_count,
            'words': words_count,
            'chars': chars_count
        }
        
    except Exception as e:
        error_msg = str(e)
        print(f"   ‚ùå Erro na convers√£o: {error_msg}")
        
        # Salvar relat√≥rio de erro detalhado
        error_filename = f"{Path(filename).stem}_ERROR.md"
        error_path = os.path.join(output_dir, error_filename)
        
        error_content = [
            f"# ‚ùå ERRO: {filename}",
            "",
            "## üìä Informa√ß√µes do Arquivo",
            "",
            f"- **Arquivo:** `{filename}`",
            f"- **Tipo:** {file_type}",
            f"- **Tamanho:** {file_info['size_str']}",
            f"- **Modificado:** {file_info['modified']}",
            f"- **Tentativa de convers√£o:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "## ‚ö†Ô∏è Detalhes do Erro",
            "",
            f"```",
            f"{error_msg}",
            f"```",
            "",
            "## üîß Poss√≠veis Solu√ß√µes",
            "",
            "1. Verifique se o arquivo n√£o est√° corrompido",
            "2. Confirme se o formato √© suportado pelo MarkItDown",
            "3. Para imagens, verifique depend√™ncias de OCR",
            "4. Para Office, instale: `pip install 'markitdown[docx,xlsx,pptx]'`",
            ""
        ]
        
        with open(error_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(error_content))
        
        print(f"   üìÑ Relat√≥rio de erro salvo: {error_filename}")
        
        return {
            'status': 'error',
            'input_file': filename,
            'error': error_msg,
            'input_size': file_info['size'],
            'file_type': file_type
        }

def main():
    """Fun√ß√£o principal do sistema"""
    print("üöÄ SISTEMA OTIMIZADO DE CONVERS√ÉO MARKITDOWN")
    print("="*65)
    print(f"üìÇ Origem: {TEST_FILES_PATH}")
    print(f"üìÅ Destino: {OUTPUT_DIR}")
    print(f"üïí Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*65)
    
    # Verifica√ß√µes iniciais
    if not os.path.exists(TEST_FILES_PATH):
        print(f"‚ùå Pasta de origem n√£o encontrada: {TEST_FILES_PATH}")
        return
    
    # Configurar componentes
    print("\nüîß Configurando sistema...")
    openai_client = setup_openai()
    md_converter = get_markitdown_instance(openai_client)
    create_output_directory()
    
    # Descobrir arquivos
    files_to_process = []
    for filename in os.listdir(TEST_FILES_PATH):
        filepath = os.path.join(TEST_FILES_PATH, filename)
        if os.path.isfile(filepath):
            files_to_process.append(filepath)
    
    print(f"\nüìã Arquivos descobertos: {len(files_to_process)}")
    
    # Mostrar preview dos arquivos
    print("\nüìÅ Arquivo encontrados:")
    for filepath in files_to_process:
        filename = os.path.basename(filepath)
        file_type = identify_file_type(filepath)
        file_info = get_file_info(filepath)
        print(f"   {file_type} {filename} ({file_info['size_str']})")
    
    # Processar todos os arquivos
    print(f"\n{'='*65}")
    print("üîÑ INICIANDO PROCESSAMENTO")
    print("="*65)
    
    results = []
    for i, filepath in enumerate(files_to_process, 1):
        print(f"\n[{i}/{len(files_to_process)}]", end=" ")
        result = process_file(filepath, md_converter, OUTPUT_DIR)
        results.append(result)
    
    # Gerar relat√≥rio final
    generate_comprehensive_report(results)

def generate_comprehensive_report(results):
    """Gera relat√≥rio final abrangente"""
    print(f"\n{'='*65}")
    print("üìä RELAT√ìRIO FINAL COMPLETO")
    print("="*65)
    
    # Separar resultados
    successful = [r for r in results if r['status'] == 'success']
    failed = [r for r in results if r['status'] == 'error']
    
    # Estat√≠sticas b√°sicas
    total_files = len(results)
    success_rate = (len(successful) / total_files * 100) if total_files > 0 else 0
    
    print(f"‚úÖ Sucessos: {len(successful)}")
    print(f"‚ùå Erros: {len(failed)}")
    print(f"üìä Taxa de sucesso: {success_rate:.1f}%")
    
    if successful:
        # Estat√≠sticas de tamanho
        total_input = sum(r['input_size'] for r in successful)
        total_output = sum(r['output_size'] for r in successful)
        total_words = sum(r['words'] for r in successful)
        total_chars = sum(r['chars'] for r in successful)
        
        print(f"üìè Total original: {total_input:,} bytes")
        print(f"üìÑ Total Markdown: {total_output:,} bytes")
        print(f"üóúÔ∏è Compress√£o m√©dia: {(total_output/total_input*100):.1f}%")
        print(f"üìù Total de palavras extra√≠das: {total_words:,}")
        print(f"üìù Total de caracteres: {total_chars:,}")
        
        # An√°lise por tipo de arquivo
        type_stats = {}
        for result in successful:
            file_type = result['file_type']
            if file_type not in type_stats:
                type_stats[file_type] = {'count': 0, 'size': 0, 'words': 0}
            type_stats[file_type]['count'] += 1
            type_stats[file_type]['size'] += result['input_size']
            type_stats[file_type]['words'] += result['words']
        
        print(f"\nüìã Arquivos processados por tipo:")
        for file_type, stats in type_stats.items():
            print(f"   {file_type}: {stats['count']} arquivo(s), {stats['words']:,} palavras")
    
    # Relat√≥rio detalhado em arquivo
    report_path = os.path.join(OUTPUT_DIR, "RELATORIO_COMPLETO.md")
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write("# üìä Relat√≥rio Completo - Convers√£o MarkItDown\n\n")
        f.write(f"**üïí Gerado em:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n")
        f.write(f"**üìÇ Pasta origem:** `{TEST_FILES_PATH}`  \n")
        f.write(f"**üìÅ Pasta destino:** `{OUTPUT_DIR}`  \n\n")
        
        # Resumo executivo
        f.write("## üìà Resumo Executivo\n\n")
        f.write(f"- **Total de arquivos:** {total_files}\n")
        f.write(f"- **‚úÖ Sucessos:** {len(successful)}\n")
        f.write(f"- **‚ùå Erros:** {len(failed)}\n")
        f.write(f"- **üìä Taxa de sucesso:** {success_rate:.1f}%\n\n")
        
        if successful:
            f.write("## ‚úÖ Convers√µes Bem-sucedidas\n\n")
            f.write("| Arquivo | Tipo | Tamanho Original | Markdown | Compress√£o | Palavras |\n")
            f.write("|---------|------|------------------|----------|------------|----------|\n")
            
            for result in successful:
                compression = f"{result['compression_ratio']:.1f}%"
                f.write(f"| `{result['input_file']}` | {result['file_type']} | {result['input_size']:,} B | {result['output_size']:,} B | {compression} | {result['words']:,} |\n")
            f.write("\n")
        
        if failed:
            f.write("## ‚ùå Erros de Convers√£o\n\n")
            f.write("| Arquivo | Tipo | Tamanho | Erro |\n")
            f.write("|---------|------|---------|------|\n")
            
            for result in failed:
                f.write(f"| `{result['input_file']}` | {result['file_type']} | {result['input_size']:,} B | {result['error'][:50]}... |\n")
            f.write("\n")
        
        # Lista de arquivos gerados
        f.write("## üìÅ Arquivos Gerados\n\n")
        md_files = [f for f in os.listdir(OUTPUT_DIR) if f.endswith('.md')]
        f.write(f"Total de arquivos Markdown gerados: **{len(md_files)}**\n\n")
        
        for md_file in sorted(md_files):
            f.write(f"- [`{md_file}`](./{md_file})\n")
        
        f.write("\n---\n\n")
        f.write("*Relat√≥rio gerado automaticamente pelo Sistema MarkItDown*")
    
    print(f"\nüìã Relat√≥rio detalhado: {report_path}")
    print(f"üìÅ Arquivos gerados: {len(os.listdir(OUTPUT_DIR))}")
    print(f"\nüéâ PROCESSAMENTO CONCLU√çDO!")
    print(f"üìÇ Acesse a pasta '{OUTPUT_DIR}' para ver todos os resultados.")

if __name__ == "__main__":
    try:
        from markitdown import MarkItDown
        main()
    except ImportError:
        print("‚ùå MarkItDown n√£o est√° instalado!")
        print("üí° Instale com: pip install 'markitdown[all]'")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Processamento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
