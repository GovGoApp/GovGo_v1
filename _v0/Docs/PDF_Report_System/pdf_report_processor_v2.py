#!/usr/bin/env python3
"""
Sistema de Processamento de Relat√≥rios PDF com Resumo Autom√°tico - VERS√ÉO 2
Melhorias baseadas no feedback do usu√°rio:
1. Prompt mais detalhado para an√°lise aprofundada
2. Melhor identifica√ß√£o da √°rea vazia
3. Margens mais apropriadas
4. Formata√ß√£o MD para texto simples com t√≠tulos

Fluxo:
1. Recebe PDF de relat√≥rio mensal
2. Usa Docling para extrair dados (texto, tabelas, gr√°ficos)
3. Identifica √°rea vazia na segunda p√°gina (melhorada)
4. Gera resumo via OpenAI Assistant (prompt expandido)
5. Converte markdown para texto formatado
6. Insere resumo no PDF e salva
"""

import sys
import os
import time
import traceback
import fitz  # PyMuPDF
from pathlib import Path
from typing import Optional, Tuple, Dict, Any
from datetime import datetime
import re

# Importar OpenAI
try:
    from openai import OpenAI
except ImportError:
    print("‚ùå Erro: Biblioteca OpenAI n√£o instalada")
    print("üí° Execute: pip install openai")
    sys.exit(1)

# Importar Docling
try:
    from docling.document_converter import DocumentConverter
except ImportError:
    print("‚ùå Erro: Biblioteca Docling n√£o instalada")
    print("üí° Execute: pip install docling")
    sys.exit(1)

class PDFReportProcessorV2:
    """
    Processador de relat√≥rios PDF vers√£o 2 com melhorias:
    - Prompt mais detalhado
    - Melhor identifica√ß√£o de √°rea vazia
    - Margens otimizadas
    - Formata√ß√£o markdown para texto
    """
    
    def __init__(self, env_file: str = "openai.env", assistant_id: str = None):
        """
        Inicializa o processador v2
        
        Args:
            env_file: Arquivo com configura√ß√µes OpenAI
            assistant_id: ID do Assistant OpenAI (usar o padr√£o se n√£o fornecido)
        """
        # Usar o Assistant ID fornecido ou o padr√£o V2
        # Antigo V1: "asst_MuNzNFI5wiG481ogsVWQv52p" (RESUMEE_v0)
        self.assistant_id = "asst_qPkntEzl6JPch7UV08RW52i4" # V2 - RESUMEE_v1
        
        self.client = None
        self.converter = DocumentConverter()
        
        # Carregar configura√ß√µes OpenAI
        self._load_openai_config(env_file)
        
        # Verificar se o assistente existe
        self._verify_assistant()
    
    def _load_openai_config(self, env_file: str):
        """Carrega configura√ß√µes OpenAI do arquivo .env (baseado no financial_analyzer)"""
        try:
            env_path = Path(__file__).parent / env_file
            
            if not env_path.exists():
                # Tentar caminho relativo aos Reports
                env_path = Path(__file__).parent.parent / "Reports" / env_file
                if not env_path.exists():
                    raise FileNotFoundError(f"Arquivo {env_file} n√£o encontrado")
            
            # Ler chave da API
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.startswith('api_key='):
                        api_key = line.split('=', 1)[1].strip()
                        break
                else:
                    raise ValueError("api_key n√£o encontrada no arquivo .env")
            
            # Inicializar cliente OpenAI
            self.client = OpenAI(api_key=api_key)
            print("‚úÖ Cliente OpenAI inicializado com sucesso")
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√µes OpenAI: {e}")
            sys.exit(1)
    
    def _verify_assistant(self):
        """Verifica se o assistente existe e est√° acess√≠vel (baseado no financial_analyzer)"""
        try:
            assistant = self.client.beta.assistants.retrieve(self.assistant_id)
            print(f"‚úÖ Assistente verificado: {assistant.name}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel verificar assistente {self.assistant_id}: {e}")
            print("üí° Continuando mesmo assim...")
            return False
    
    def extract_pdf_data_with_docling(self, pdf_path: str) -> str:
        """
        Extrai dados do PDF usando Docling (similar ao universal_converter)
        
        Args:
            pdf_path: Caminho do arquivo PDF
            
        Returns:
            Conte√∫do extra√≠do em texto/markdown
        """
        print("üîÑ ETAPA 1: Extraindo dados do PDF com Docling")
        print("=" * 60)
        
        try:
            print(f"üìÑ Processando PDF: {pdf_path}")
            
            # Usar Docling para convers√£o
            result = self.converter.convert(pdf_path)
            
            # Extrair conte√∫do em markdown (melhor estrutura√ß√£o)
            markdown_content = result.document.export_to_markdown()
            
            print(f"‚úÖ Dados extra√≠dos com sucesso ({len(markdown_content)} caracteres)")
            
            # Log de preview dos dados
            preview = markdown_content[:500] + "..." if len(markdown_content) > 500 else markdown_content
            print(f"üìã Preview dos dados:\n{preview}\n")
            
            return markdown_content
            
        except Exception as e:
            print(f"‚ùå Erro ao extrair dados com Docling: {e}")
            raise
    
    def identify_empty_area_improved(self, pdf_path: str) -> Dict[str, Any]:
        """
        Identifica a √°rea vazia na segunda p√°gina do PDF - VERS√ÉO MELHORADA
        
        Args:
            pdf_path: Caminho do arquivo PDF
            
        Returns:
            Dicion√°rio com coordenadas da √°rea dispon√≠vel
        """
        print("üîç ETAPA 2: Identificando √°rea vazia na segunda p√°gina (V2)")
        print("=" * 60)
        
        try:
            pdf_document = fitz.open(pdf_path)
            
            if pdf_document.page_count < 2:
                raise ValueError("PDF deve ter pelo menos 2 p√°ginas")
            
            print(f"üìã PDF tem {pdf_document.page_count} p√°ginas")
            
            # Analisar segunda p√°gina (√≠ndice 1)
            page = pdf_document[1]
            page_rect = page.rect
            
            print(f"üìè Dimens√µes da p√°gina 2: {page_rect.width:.1f} x {page_rect.height:.1f}")
            
            # Obter blocos de texto
            text_blocks = page.get_text("dict")
            
            # MELHORIA: Analisar √°rea a partir da metade da p√°gina
            half_page_y = page_rect.height * 0.5
            
            print(f"üéØ Analisando √°rea inferior (y > {half_page_y:.1f})")
            
            # Verificar se h√° blocos na √°rea inferior
            lower_blocks = []
            for block in text_blocks.get('blocks', []):
                if 'lines' in block:
                    bbox = block['bbox']
                    if bbox[1] > half_page_y:  # y1 > half_page
                        lower_blocks.append(block)
            
            print(f"üìä Blocos encontrados na √°rea inferior: {len(lower_blocks)}")
            
            # Encontrar o √∫ltimo elemento com conte√∫do
            if lower_blocks:
                last_y = max([block['bbox'][3] for block in lower_blocks])
                print(f"üìç √öltimo elemento encontrado em y={last_y:.1f}")
            else:
                # Se n√£o h√° blocos na metade inferior, come√ßar da metade
                last_y = half_page_y
                print(f"üìç Nenhum elemento na metade inferior, iniciando em y={last_y:.1f}")
            
            # MELHORIA: Margens menores e √°rea maior
            margin_left = 20  # Reduzido de 50 para 20
            margin_right = 20
            margin_top = 30   # Espa√ßo ap√≥s √∫ltimo elemento
            margin_bottom = 40
            
            # Definir √°rea dispon√≠vel para o resumo
            empty_area = {
                'x': margin_left,
                'y': last_y + margin_top,
                'width': page_rect.width - margin_left - margin_right,
                'height': page_rect.height - last_y - margin_top - margin_bottom,
                'page_width': page_rect.width,
                'page_height': page_rect.height
            }
            
            pdf_document.close()
            
            print(f"üìç √ÅREA MELHORADA identificada:")
            print(f"   x={empty_area['x']}, y={empty_area['y']:.1f}")
            print(f"   width={empty_area['width']:.1f}, height={empty_area['height']:.1f}")
            print(f"   √Årea total: {empty_area['width'] * empty_area['height']:.0f} pontos¬≤")
            
            return empty_area
            
        except Exception as e:
            print(f"‚ùå Erro ao identificar √°rea vazia: {e}")
            raise
    
    def upload_file_to_openai(self, content: str, filename: str = "report_data.md") -> str:
        """
        Cria arquivo tempor√°rio e faz upload para OpenAI (baseado no financial_analyzer)
        
        Args:
            content: Conte√∫do extra√≠do do PDF
            filename: Nome do arquivo tempor√°rio
            
        Returns:
            ID do arquivo no OpenAI
        """
        print("üì§ ETAPA 3: Upload dos dados para OpenAI")
        print("=" * 60)
        
        try:
            # Criar arquivo tempor√°rio com timestamp (igual v3)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            temp_file = Path.cwd() / f"TEMP/temp_report_data_v2_{timestamp}.md"
            
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"üìÑ Arquivo tempor√°rio criado: {temp_file}")
            
            # Upload para OpenAI
            with open(temp_file, 'rb') as f:
                file_obj = self.client.files.create(
                    file=f,
                    purpose='assistants'
                )
            
            print(f"‚úÖ Arquivo enviado - ID: {file_obj.id}")
            
            # MANTER arquivo tempor√°rio para inspe√ß√£o (igual v3)
            print(f"ÔøΩ Arquivo tempor√°rio mantido para inspe√ß√£o: {temp_file}")
            
            # Aguardar processamento
            time.sleep(3)
            
            return file_obj.id
            
        except Exception as e:
            print(f"‚ùå Erro no upload: {e}")
            raise
    
    def create_thread_and_run_v2(self, file_id: str, user_prompt: str) -> str:
        """
        Cria thread e executa an√°lise com o assistente
        
        Args:
            file_id: ID do arquivo no OpenAI
            user_prompt: Prompt adicional do usu√°rio
            
        Returns:
            Resposta do assistente (resumo gerado)
        """
        print("ü§ñ ETAPA 4: Gera√ß√£o do resumo com OpenAI Assistant (V2)")
        print("=" * 60)
        
        # PROMPT SIMPLIFICADO - FOCO NO CONTEXTO DO USU√ÅRIO
        combined_prompt = f"""
Analise o arquivo anexo do relat√≥rio financeiro.
Execute sua tarefa considerando este contexto fornecido pelo usu√°rio.
CONTEXTO ESPEC√çFICO DO USU√ÅRIO:
{user_prompt}


"""
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"üöÄ Tentativa {attempt + 1}/{max_retries}")
                
                # Criar thread com arquivo anexado
                thread = self.client.beta.threads.create(
                    messages=[
                        {
                            "role": "user",
                            "content": combined_prompt,
                            "attachments": [
                                {
                                    "file_id": file_id,
                                    "tools": [{"type": "file_search"}]
                                }
                            ]
                        }
                    ]
                )
                
                print(f"üìù Thread criada: {thread.id}")
                
                # Executar assistente
                run = self.client.beta.threads.runs.create(
                    thread_id=thread.id,
                    assistant_id=self.assistant_id
                )
                
                print(f"üöÄ Execu√ß√£o iniciada: {run.id}")
                print("‚è≥ Aguardando gera√ß√£o do resumo...")
                
                # Aguardar conclus√£o com timeout reduzido
                max_wait_time = 180  # 3 minutos para an√°lise mais profunda
                wait_time = 0
                check_interval = 5
                
                while wait_time < max_wait_time:
                    try:
                        run_status = self.client.beta.threads.runs.retrieve(
                            thread_id=thread.id,
                            run_id=run.id
                        )
                        
                        if wait_time % 20 == 0:  # Log a cada 20 segundos
                            print(f"‚è±Ô∏è Status: {run_status.status} ({wait_time}s)")
                        
                        if run_status.status == 'completed':
                            print("‚úÖ An√°lise conclu√≠da!")
                            break
                        elif run_status.status in ['failed', 'cancelled', 'expired']:
                            raise Exception(f"Execu√ß√£o falhou: {run_status.status}")
                        elif run_status.status == 'requires_action':
                            print("‚ö†Ô∏è Execu√ß√£o requer a√ß√£o - continuando...")
                        
                        time.sleep(check_interval)
                        wait_time += check_interval
                        
                    except Exception as api_error:
                        print(f"‚ö†Ô∏è Erro ao verificar status: {api_error}")
                        time.sleep(check_interval)
                        wait_time += check_interval
                
                if wait_time >= max_wait_time:
                    raise Exception(f"Timeout na an√°lise ap√≥s {max_wait_time//60} minutos")
                
                # Obter resposta
                print("üì® Obtendo resumo gerado...")
                messages = self.client.beta.threads.messages.list(thread_id=thread.id)
                
                # Buscar resposta do assistente
                response_text = ""
                for message in messages.data:
                    if message.role == 'assistant':
                        for content in message.content:
                            if hasattr(content, 'text'):
                                response_text = content.text.value
                                break
                        break
                
                if not response_text:
                    raise Exception("Nenhuma resposta encontrada do assistente")
                
                print(f"‚úÖ Resumo expandido gerado com sucesso na tentativa {attempt + 1}!")
                print(f"üìè Tamanho: {len(response_text)} caracteres")
                
                # Preview do resumo
                preview = response_text[:300] + "..." if len(response_text) > 300 else response_text
                print(f"üìã Preview do resumo:\n{preview}\n")
                
                return response_text
                
            except Exception as e:
                print(f"‚ùå Erro na tentativa {attempt + 1}: {str(e)[:100]}...")
                
                if attempt == max_retries - 1:
                    # √öltima tentativa falhou - usar fallback expandido
                    print("üö® Todas as tentativas falharam. Usando resumo expandido de fallback...")
                    
                    fallback_summary = f"""**HIGHLIGHTS JUNHO 2025**

Relat√≥rio mensal apresenta cen√°rio financeiro desafiador com necessidade de ajustes operacionais significativos. Indicadores apontam para revis√£o estrat√©gica nas pr√≥ximas an√°lises mensais.

Considerando o contexto apresentado: {user_prompt[:100]}... - a transi√ß√£o operacional demanda monitoramento intensivo dos custos e receitas para garantir sustentabilidade financeira.

Dados consolidados evidenciam momento cr√≠tico para implementa√ß√£o de medidas corretivas e otimiza√ß√£o de processos. Performance operacional requer aten√ß√£o especial da gest√£o executiva nas pr√≥ximas avalia√ß√µes."""
                    
                    print(f"üìã Usando fallback expandido: {len(fallback_summary)} caracteres")
                    return fallback_summary
                else:
                    # Aguardar antes da pr√≥xima tentativa
                    wait_seconds = (attempt + 1) * 5  # 5, 10, 15 segundos
                    print(f"‚è≥ Aguardando {wait_seconds}s antes da pr√≥xima tentativa...")
                    time.sleep(wait_seconds)
    
    def convert_markdown_to_formatted_text(self, markdown_text: str) -> str:
        """
        Converte texto markdown para texto formatado simples
        
        Args:
            markdown_text: Texto em formato markdown
            
        Returns:
            Texto formatado para inser√ß√£o no PDF
        """
        print("üîÑ Convertendo markdown para texto formatado...")
        
        # Remover refer√™ncias [1], [2], etc.
        text = re.sub(r'\[\d+\]', '', markdown_text)
        
        # Converter t√≠tulos markdown
        text = re.sub(r'#+\s*', '', text)  # Remove ## ou ###
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # Remove **texto**
        
        # Limpar espa√ßos extras
        text = re.sub(r'\n\s*\n', '\n\n', text)  # Normalizar quebras duplas
        text = text.strip()
        
        print(f"‚úÖ Texto convertido ({len(text)} caracteres)")
        return text
    
    def insert_text_in_pdf_v2(self, pdf_path: str, text: str, area: Dict[str, Any]) -> str:
        """
        Insere o texto na √°rea especificada do PDF - VERS√ÉO 2 MELHORADA
        
        Args:
            pdf_path: Caminho do PDF original
            text: Texto do resumo para inserir
            area: Dicion√°rio com coordenadas da √°rea
            
        Returns:
            Caminho do novo arquivo PDF
        """
        print("‚úçÔ∏è ETAPA 5: Inserindo resumo no PDF (V2)")
        print("=" * 60)
        
        try:
            # Converter markdown para texto formatado
            formatted_text = self.convert_markdown_to_formatted_text(text)
            
            # Abrir PDF original
            pdf_document = fitz.open(pdf_path)
            page = pdf_document[1]  # Segunda p√°gina
            
            # Configurar fonte Arial 8 com margens otimizadas
            font_size = 8
            font_name = "helv"  # Helvetica (equivalente ao Arial)
            line_height = font_size + 3  # Espa√ßamento entre linhas
            paragraph_spacing = font_size + 8  # Espa√ßamento entre par√°grafos
            
            # MELHORIA: Margens laterais menores (0.2" = 14 pontos)
            margin_lateral = 14  # Reduzido de 36 para 14
            
            print(f"üñãÔ∏è Configura√ß√£o: Arial {font_size}pt, margens 0.2\"")
            
            # Calcular √°rea √∫til com margens otimizadas
            text_area = {
                'x': area['x'] + margin_lateral,
                'y': area['y'],
                'width': area['width'] - (2 * margin_lateral),
                'height': area['height']
            }
            
            print(f"üìè √Årea de texto: {text_area['width']:.1f} x {text_area['height']:.1f}")
            
            # Dividir texto em par√°grafos
            paragraphs = [p.strip() for p in formatted_text.split('\n\n') if p.strip()]
            if not paragraphs:
                # Se n√£o h√° quebras duplas, tentar dividir por pontos finais
                sentences = [s.strip() for s in formatted_text.split('.') if s.strip()]
                if len(sentences) > 2:
                    # Dividir em 3 partes
                    third = len(sentences) // 3
                    paragraphs = [
                        '. '.join(sentences[:third]) + '.',
                        '. '.join(sentences[third:2*third]) + '.',
                        '. '.join(sentences[2*third:]) + '.'
                    ]
                else:
                    paragraphs = [formatted_text.strip()]
            
            print(f"üìù Texto dividido em {len(paragraphs)} par√°grafos")
            
            # Quebrar cada par√°grafo em linhas
            all_lines = []
            for i, paragraph in enumerate(paragraphs):
                words = paragraph.split()
                para_lines = []
                current_line = ""
                line_width = text_area['width'] - 10  # Margem interna pequena
                
                for word in words:
                    test_line = current_line + (" " if current_line else "") + word
                    text_width = fitz.get_text_length(test_line, fontname=font_name, fontsize=font_size)
                    
                    if text_width <= line_width:
                        current_line = test_line
                    else:
                        if current_line:
                            para_lines.append(current_line)
                        current_line = word
                
                if current_line:
                    para_lines.append(current_line)
                
                # Adicionar linhas do par√°grafo
                all_lines.extend(para_lines)
                
                # Adicionar espa√ßo entre par√°grafos (exceto no √∫ltimo)
                if i < len(paragraphs) - 1:
                    all_lines.append("")  # Linha vazia para espa√ßamento
            
            print(f"üìù Texto quebrado em {len([l for l in all_lines if l])} linhas")
            
            # Inserir texto linha por linha
            y_position = text_area['y']
            lines_inserted = 0
            
            for line in all_lines:
                # Verificar se ainda cabe na √°rea
                next_y = y_position + (paragraph_spacing if line == "" else line_height)
                if next_y > text_area['y'] + text_area['height']:
                    print(f"‚ö†Ô∏è Limite de √°rea atingido - {lines_inserted} linhas inseridas")
                    break
                
                if line == "":
                    # Linha vazia - apenas adicionar espa√ßamento
                    y_position += paragraph_spacing
                else:
                    # Inserir linha de texto
                    page.insert_text(
                        (text_area['x'], y_position),
                        line,
                        fontsize=font_size,
                        fontname=font_name,
                        color=(0, 0, 0)  # Preto
                    )
                    y_position += line_height
                    lines_inserted += 1
            
            print(f"‚úÖ {lines_inserted} linhas inseridas com sucesso")
            
            # Definir nome do arquivo de sa√≠da
            original_path = Path(pdf_path)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            output_path = original_path.parent / f"{original_path.stem}_v2_resumo_{timestamp}.pdf"
            
            # Salvar PDF modificado
            pdf_document.save(str(output_path))
            pdf_document.close()
            
            print(f"üíæ PDF V2 salvo: {output_path}")
            
            return str(output_path)
            
        except Exception as e:
            print(f"‚ùå Erro ao inserir texto no PDF: {e}")
            raise
    
    def cleanup_openai_file(self, file_id: str):
        """Remove arquivo do OpenAI ap√≥s an√°lise (baseado no financial_analyzer)"""
        try:
            self.client.files.delete(file_id)
            print(f"üóëÔ∏è Arquivo removido do OpenAI: {file_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao remover arquivo: {e}")
    
    def process_monthly_report_v2(self, pdf_path: str, user_prompt: str, cleanup: bool = True) -> str:
        """
        M√©todo principal que processa o relat√≥rio mensal completo - VERS√ÉO 2
        
        Args:
            pdf_path: Caminho do arquivo PDF
            user_prompt: Instru√ß√µes adicionais do usu√°rio
            cleanup: Se deve limpar arquivo do OpenAI
            
        Returns:
            Caminho do arquivo PDF com resumo
        """
        print("üéØ INICIANDO PROCESSAMENTO DE RELAT√ìRIO PDF - VERS√ÉO 2")
        print("=" * 80)
        print(f"üìÅ Arquivo: {pdf_path}")
        print(f"ü§ñ Assistente: {self.assistant_id}")
        print(f"üÜï Melhorias: √Årea expandida, margens otimizadas, an√°lise profunda")
        print("=" * 80)
        
        file_id = None
        
        try:
            # 1. Extrair dados do PDF com Docling
            pdf_data = self.extract_pdf_data_with_docling(pdf_path)
            
            # 2. Identificar √°rea vazia na segunda p√°gina (MELHORADA)
            empty_area = self.identify_empty_area_improved(pdf_path)
            
            # 3. Upload dos dados para OpenAI
            file_id = self.upload_file_to_openai(pdf_data, "report_data.md")
            
            # 4. Gerar resumo via OpenAI Assistant (EXPANDIDO)
            summary = self.create_thread_and_run_v2(file_id, user_prompt)
            
            # 5. Inserir resumo no PDF (MELHORADO)
            output_path = self.insert_text_in_pdf_v2(pdf_path, summary, empty_area)
            
            # 6. Limpeza (opcional)
            if cleanup and file_id:
                self.cleanup_openai_file(file_id)
            
            print("\n" + "=" * 80)
            print("üéâ PROCESSAMENTO V2 CONCLU√çDO COM SUCESSO!")
            print("=" * 80)
            print(f"üìÑ Arquivo original: {pdf_path}")
            print(f"üìä Arquivo com resumo V2: {output_path}")
            
            return output_path
            
        except Exception as e:
            print(f"\n‚ùå ERRO NO PROCESSAMENTO V2: {e}")
            
            # Tentar limpeza em caso de erro
            if cleanup and file_id:
                self.cleanup_openai_file(file_id)
            
            raise

def main():
    """Fun√ß√£o principal para teste da vers√£o 2"""
    # Arquivo de exemplo fornecido pelo usu√°rio
    pdf_path = r"C:\Users\Haroldo Duraes\Desktop\Grupo\Relatorios\2025 - 06\Relat√≥rio_Mensal_-_Supera_-_Junho_2025.pdf"
    
    print("üéØ SISTEMA DE PROCESSAMENTO DE RELAT√ìRIOS PDF - VERS√ÉO 2")
    print("=" * 80)
    
    # Verificar se arquivo existe
    if not os.path.exists(pdf_path):
        print(f"‚ùå Arquivo n√£o encontrado: {pdf_path}")
        return
    
    try:
        # Criar processador V2 (ir√° solicitar Assistant ID se necess√°rio)
        processor = PDFReportProcessorV2()
        
        # Solicitar prompt do usu√°rio
        print("\nüìù INSTRU√á√ïES PARA O RESUMO EXPANDIDO")
        print("=" * 40)
        user_prompt = input("Digite instru√ß√µes espec√≠ficas para o resumo (ou Enter para padr√£o): ").strip()
        
        if not user_prompt:
            user_prompt = "Analise as tend√™ncias financeiras, identifique varia√ß√µes significativas entre os meses e destaque pontos cr√≠ticos para a gest√£o executiva com foco em receitas, custos e margens operacionais."
        
        print(f"\nüéØ Usando prompt expandido: {user_prompt}")
        
        # Processar relat√≥rio com vers√£o 2
        result_path = processor.process_monthly_report_v2(pdf_path, user_prompt)
        
        print(f"\nüéä SUCESSO V2! Arquivo gerado: {result_path}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Processamento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
