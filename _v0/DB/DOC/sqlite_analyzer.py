#!/usr/bin/env python3
"""
Script para an√°lise completa de estrutura de database SQLite
Gera relat√≥rio detalhado com todas as informa√ß√µes da database
"""

import sqlite3
import sys
import os
from datetime import datetime

def analyze_sqlite_database(db_path):
    """
    Analisa completamente uma database SQLite e gera relat√≥rio
    
    Args:
        db_path (str): Caminho para o arquivo SQLite
    """
    
    if not os.path.exists(db_path):
        print(f"‚ùå Arquivo n√£o encontrado: {db_path}")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("="*80)
        print(f"üìä AN√ÅLISE DE ESTRUTURA SQLite")
        print("="*80)
        print(f"üìÅ Arquivo: {db_path}")
        print(f"üìÖ Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*80)
        
        # 1. INFORMA√á√ïES GERAIS
        print("\nüîç 1. INFORMA√á√ïES GERAIS")
        print("-" * 40)
        
        cursor.execute("PRAGMA database_list;")
        databases = cursor.fetchall()
        print(f"Databases: {len(databases)}")
        for db in databases:
            print(f"  - {db[1]}: {db[2] if db[2] else 'main'}")
        
        cursor.execute("PRAGMA user_version;")
        version = cursor.fetchone()[0]
        print(f"Vers√£o do usu√°rio: {version}")
        
        cursor.execute("PRAGMA page_count;")
        page_count = cursor.fetchone()[0]
        print(f"P√°ginas: {page_count}")
        
        cursor.execute("PRAGMA page_size;")
        page_size = cursor.fetchone()[0]
        print(f"Tamanho da p√°gina: {page_size} bytes")
        
        cursor.execute("PRAGMA freelist_count;")
        freelist = cursor.fetchone()[0]
        print(f"P√°ginas livres: {freelist}")
        
        # 2. TABELAS
        print("\nüìã 2. TABELAS")
        print("-" * 40)
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
        tables = cursor.fetchall()
        
        print(f"Total de tabelas: {len(tables)}")
        
        for table in tables:
            table_name = table[0]
            print(f"\nüî∏ Tabela: {table_name}")
            
            # Informa√ß√µes da tabela
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = cursor.fetchall()
            
            print(f"  Colunas: {len(columns)}")
            for col in columns:
                pk = " [PK]" if col[5] else ""
                not_null = " [NOT NULL]" if col[3] else ""
                default = f" [DEFAULT: {col[4]}]" if col[4] else ""
                print(f"    {col[1]}: {col[2]}{pk}{not_null}{default}")
            
            # Contagem de registros
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
                count = cursor.fetchone()[0]
                print(f"  Registros: {count:,}")
            except Exception as e:
                print(f"  Registros: Erro ao contar - {e}")
        
        # 3. √çNDICES
        print("\nüîç 3. √çNDICES")
        print("-" * 40)
        
        cursor.execute("SELECT name, tbl_name, sql FROM sqlite_master WHERE type='index' ORDER BY tbl_name, name;")
        indexes = cursor.fetchall()
        
        print(f"Total de √≠ndices: {len(indexes)}")
        
        current_table = None
        for index in indexes:
            if index[1] != current_table:
                current_table = index[1]
                print(f"\nüî∏ Tabela: {current_table}")
            
            print(f"  üìå {index[0]}")
            if index[2]:
                print(f"    SQL: {index[2]}")
        
        # 4. VIEWS
        print("\nüëÅÔ∏è 4. VIEWS")
        print("-" * 40)
        
        cursor.execute("SELECT name, sql FROM sqlite_master WHERE type='view' ORDER BY name;")
        views = cursor.fetchall()
        
        print(f"Total de views: {len(views)}")
        
        for view in views:
            print(f"\nüî∏ View: {view[0]}")
            print(f"  SQL: {view[1]}")
        
        # 5. TRIGGERS
        print("\n‚ö° 5. TRIGGERS")
        print("-" * 40)
        
        cursor.execute("SELECT name, tbl_name, sql FROM sqlite_master WHERE type='trigger' ORDER BY tbl_name, name;")
        triggers = cursor.fetchall()
        
        print(f"Total de triggers: {len(triggers)}")
        
        current_table = None
        for trigger in triggers:
            if trigger[1] != current_table:
                current_table = trigger[1]
                print(f"\nüî∏ Tabela: {current_table}")
            
            print(f"  ‚ö° {trigger[0]}")
            if trigger[2]:
                print(f"    SQL: {trigger[2]}")
        
        # 6. CHAVES ESTRANGEIRAS
        print("\nüîó 6. CHAVES ESTRANGEIRAS")
        print("-" * 40)
        
        fk_found = False
        for table in tables:
            table_name = table[0]
            cursor.execute(f"PRAGMA foreign_key_list({table_name});")
            fkeys = cursor.fetchall()
            
            if fkeys:
                if not fk_found:
                    fk_found = True
                
                print(f"\nüî∏ Tabela: {table_name}")
                for fk in fkeys:
                    print(f"  üîó {fk[3]} -> {fk[2]}.{fk[4]}")
        
        if not fk_found:
            print("Nenhuma chave estrangeira encontrada")
        
        # 7. CREATE STATEMENTS
        print("\nüìÑ 7. CREATE STATEMENTS")
        print("-" * 40)
        
        cursor.execute("SELECT name, sql FROM sqlite_master WHERE type='table' ORDER BY name;")
        creates = cursor.fetchall()
        
        for create in creates:
            print(f"\nüî∏ {create[0]}:")
            print(f"{create[1]}")
        
        # 8. VERIFICA√á√ÉO DE INTEGRIDADE
        print("\n‚úÖ 8. VERIFICA√á√ÉO DE INTEGRIDADE")
        print("-" * 40)
        
        cursor.execute("PRAGMA integrity_check;")
        integrity = cursor.fetchall()
        
        for check in integrity:
            print(f"  {check[0]}")
        
        conn.close()
        
        print("\n" + "="*80)
        print("‚úÖ An√°lise conclu√≠da!")
        print("="*80)
        
    except Exception as e:
        print(f"‚ùå Erro ao analisar database: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) != 2:
        print("Uso: python sqlite_analyzer.py <caminho_database.db>")
        print("\nExemplo:")
        print("  python sqlite_analyzer.py database.db")
        print("  python sqlite_analyzer.py /path/to/database.sqlite")
        return
    
    db_path = sys.argv[1]
    analyze_sqlite_database(db_path)

if __name__ == "__main__":
    main()
