"""
GvG_SP_Search_Terminal_v9.py
Sistema Avan√ßado de Busca PNCP - Vers√£o 9 (v3 Clean)

üöÄ NOVIDADES DA VERS√ÉO 9:
‚Ä¢ Sistema v3 exclusivo - c√≥digo limpo sem depend√™ncias legacy
‚Ä¢ Menu reestruturado com 5 op√ß√µes principais:
  1. Tipo de Busca (Sem√¢ntica, Palavras-chave, H√≠brida)
  2. Abordagem (Direta, Correspond√™ncia, Filtro)
  3. Relev√¢ncia (Sem filtro, Flex√≠vel, Restritivo) ‚≠ê NOVO!
  4. Ordena√ß√£o (Similaridade, Data, Valor)
  5. Configura√ß√µes (Sistema, filtros, processamento)

üéØ SISTEMA DE RELEV√ÇNCIA 3 N√çVEIS:
  1. SEM FILTRO: Todos os resultados s√£o retornados
  2. FLEX√çVEL: Filtro suave - inclui resultados com conex√µes amplas
     ‚Üí Assistant ID: asst_tfD5oQxSgoGhtqdKQHK9UwRi
     ‚Üí Arquivo: relevance_pncp_v3.txt
  3. RESTRITIVO: Filtro rigoroso - apenas resultados muito relevantes
     ‚Üí Assistant ID: asst_XmsefQEKbuVWu51uNST7kpYT
     ‚Üí Arquivo: relevance_pncp_v2.txt

‚Ä¢ TR√äS ABORDAGENS DE BUSCA:
  1. DIRETA: Busca tradicional sem categorias
  2. CORRESPOND√äNCIA: Busca por categorias com multiplica√ß√£o de similarities
  3. FILTRO: Usa categorias para restringir universo + busca textual

‚Ä¢ PROCESSAMENTO INTELIGENTE v3:
  - Separa√ß√£o autom√°tica de termos e condi√ß√µes SQL
  - Processamento via OpenAI Assistant
  - Debug avan√ßado com informa√ß√µes detalhadas
  - Suporte a negation embeddings para prompts negativos

‚Ä¢ CAMPOS COMPLETOS DO PNCP (v7+):
  - Dados b√°sicos: n√∫mero controle, descri√ß√£o, valores
  - Datas: inclus√£o, abertura, encerramento
  - √ìrg√£o: raz√£o social, unidade, poder, esfera
  - Localiza√ß√£o: munic√≠pio, UF
  - Modalidade: ID/nome da modalidade e modo de disputa
  - Usu√°rio respons√°vel e link do sistema original

‚Ä¢ FUNCIONALIDADES AVAN√áADAS:
  - Busca sem√¢ntica, palavras-chave e h√≠brida com IA
  - Integra√ß√£o completa com banco Supabase (PostgreSQL + pgvector)
  - Interface terminal Rica com visualiza√ß√£o aprimorada
  - Exporta√ß√£o em Excel, PDF e JSON formatado
  - An√°lise de documentos com Docling v3 (tabelas avan√ßadas)
  - Suporte a arquivos ZIP com extra√ß√£o autom√°tica
  - Gera√ß√£o inteligente de palavras-chave via OpenAI GPT
  - Sistema de filtros personaliz√°veis e ordena√ß√£o m√∫ltipla
  - Links diretos para documentos oficiais do PNCP
  - Menu contextual adaptativo

‚ö° REQUISITOS:
‚Ä¢ gvg_search_utils_v3.py (sistema principal)
‚Ä¢ gvg_pre_processing_v3.py (processamento inteligente)
‚Ä¢ supabase_v0.env (credenciais do banco)
‚Ä¢ OpenAI API key configurada
‚Ä¢ PostgreSQL com extens√£o pgvector

üîß CONFIGURA√á√ÉO:
Este sistema foi otimizado para usar APENAS o v3, removendo todas as
depend√™ncias legacy que causavam warnings e erros de importa√ß√£o.
"""
import json
import os
import sys
import time
import locale
import re
import pandas as pd
import numpy as np
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, TextColumn, BarColumn, SpinnerColumn, TaskProgressColumn
from rich.prompt import Prompt, Confirm

# Imports para gera√ß√£o de PDF
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table as PDFTable, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# Configura√ß√µes padr√£o
DEFAULT_PREPROC_PARAMS = {
    "remove_special_chars": True,
    "keep_separators": True,
    "remove_accents": False,
    "case": "lower",
    "remove_stopwords": False,
    "lemmatize": True
}

# Importar fun√ß√µes de busca (v3 APENAS)
try:
    from gvg_search_utils_v3 import (
        create_connection,
        # Fun√ß√µes inteligentes (v3)
        intelligent_semantic_search as semantic_search,
        intelligent_keyword_search as keyword_search,
        intelligent_hybrid_search as hybrid_search,
        # Fun√ß√µes auxiliares
        calculate_confidence,
        format_currency,
        test_connection,
        get_embedding,
        parse_numero_controle_pncp,
        fetch_documentos,
        generate_keywords,
        decode_poder,
        decode_esfera,
        format_date,
        extract_pos_neg_terms,
        get_negation_embedding,
        # Fun√ß√µes espec√≠ficas do v3
        toggle_intelligent_processing,
        toggle_intelligent_debug,
        get_intelligent_status,
        # Fun√ß√µes do filtro de relev√¢ncia
        set_relevance_filter_level,
        get_relevance_filter_status
    )
    INTELLIGENT_SEARCH_AVAILABLE = True
    
except ImportError as e:
    print(f"‚ùå ERRO CR√çTICO: gvg_search_utils_v3 n√£o dispon√≠vel: {e}")
    print("üí° Este sistema requer o m√≥dulo v3 para funcionar!")
    sys.exit(1)

# ====================================================================================
# CONFIGURA√á√ÉO DE PROCESSAMENTO DE DOCUMENTOS
# ====================================================================================

# Escolher vers√£o do m√≥dulo de processamento de documentos
# USE_DOCLING_V3 = True  -> Usa Docling (v3) para melhor extra√ß√£o de tabelas
# USE_DOCLING_V3 = False -> Usa MarkItDown (v2) para compatibilidade
USE_DOCLING_V3 = True

# Importar fun√ß√µes de processamento de documentos baseado na configura√ß√£o
summarize_document = None
process_pncp_document = None

if USE_DOCLING_V3:
    try:
        from gvg_document_utils_v3_o import (
            summarize_document,
            process_pncp_document
        )
        DOCUMENT_PROCESSOR_VERSION = "v3 (Docling)"
        
    except ImportError:
        print("ERRO: N√£o foi poss√≠vel importar o m√≥dulo de processamento de documentos v3 (Docling).")
        print("Tentando usar v2 (MarkItDown) como fallback...")
        
        try:
            from gvg_document_utils_v2 import (
                summarize_document,
                process_pncp_document
            )
            DOCUMENT_PROCESSOR_VERSION = "v2 (MarkItDown - Fallback)"
            
        except ImportError:
            print("ERRO: N√£o foi poss√≠vel importar nenhum m√≥dulo de processamento de documentos.")
            sys.exit(1)
else:
    try:
        from gvg_document_utils_v2 import (
            summarize_document,
            process_pncp_document
        )
        DOCUMENT_PROCESSOR_VERSION = "v2 (MarkItDown)"
        
    except ImportError:
        print("ERRO: N√£o foi poss√≠vel importar o m√≥dulo de processamento de documentos v2 (MarkItDown).")
        print("Tentando usar v3 (Docling) como fallback...")
        
        try:
            from gvg_document_utils_v3_o import (
                summarize_document,
                process_pncp_document
            )
            DOCUMENT_PROCESSOR_VERSION = "v3 (Docling - Fallback)"
            
        except ImportError:
            print("ERRO: N√£o foi poss√≠vel importar nenhum m√≥dulo de processamento de documentos.")
            sys.exit(1)

# Importa√ß√µes adicionais para categoriza√ß√£o
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# Configure Rich console
console = Console()

# Configurar locale para formata√ß√£o de valores em reais
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')
    except:
        console.print("[yellow]Aviso: N√£o foi poss√≠vel configurar o locale para formata√ß√£o monet√°ria.[/yellow]")

# Configura√ß√µes de busca
BASE_PATH = "C:\\Users\\Haroldo Duraes\\Desktop\\GOvGO\\v0\\#DATA\\PNCP\\GvG\\Terminal\\"
RESULTS_PATH = BASE_PATH + "Relat√≥rios\\"
FILES_PATH = BASE_PATH + "Arquivos\\"

# Constantes para configura√ß√£o de busca
MIN_RESULTS = 5      # N√∫mero m√≠nimo de resultados que ser√£o retornados
MAX_RESULTS = 30    # N√∫mero m√°ximo de resultados que ser√£o retornados
MAX_TOKENS = 2000  # N√∫mero m√°ximo de tokens para resumo de documentos
SEMANTIC_WEIGHT = 0.75  # Peso padr√£o para busca sem√¢ntica em busca h√≠brida

# ESTRUTURA DE CONFIGURA√á√ïES
# Tipos de busca (algoritmos)
SEARCH_TYPES = {
    1: {"name": "Sem√¢ntica", "description": "Busca baseada no significado do texto"},
    2: {"name": "Palavras-chave", "description": "Busca exata de termos e express√µes"},
    3: {"name": "H√≠brida", "description": "Combina√ß√£o de busca sem√¢ntica e por palavras-chave"}
}

# Abordagens de busca (metodologias)
SEARCH_APPROACHES = {
    1: {"name": "Direta", "description": "Busca tradicional diretamente nos textos (sem categorias)"},
    2: {"name": "Correspond√™ncia", "description": "Busca por correspond√™ncia categ√≥rica (multiplica√ß√£o de similarities)"},
    3: {"name": "Filtro", "description": "Usa categorias para restringir universo + busca textual"}
}

# Modos de ordena√ß√£o
SORT_MODES = {
    1: {"name": "Similaridade", "description": "Ordenar por relev√¢ncia (decrescente)"},
    2: {"name": "Data de Encerramento", "description": "Ordenar por data (ascendente)"},
    3: {"name": "Valor Estimado", "description": "Ordenar por valor (decrescente)"}
}

# N√≠veis de relev√¢ncia
RELEVANCE_LEVELS = {
    1: {"name": "Sem filtro", "description": "N√£o aplica filtro de relev√¢ncia"},
    2: {"name": "Flex√≠vel", "description": "Filtro flex√≠vel - inclui mais resultados com conex√µes amplas"},
    3: {"name": "Restritivo", "description": "Filtro restritivo - mant√©m apenas resultados muito relevantes"}
}

# Vari√°veis para armazenar estado global
last_results = None
last_query = None
last_query_categories = None  # Armazenar categorias da query

# VARI√ÅVEIS DE ESTADO
current_search_type = 1  # Tipo de busca padr√£o: Sem√¢ntica
current_search_approach = 3  # Abordagem padr√£o: Filtro
current_sort_mode = 3  # Modo de ordena√ß√£o padr√£o: Valor Estimado
filter_expired = True  # Filtro para ocultar contrata√ß√µes encerradas
use_negation_embeddings = True  # Usar negation embeddings por padr√£o

# Configura√ß√µes para categoriza√ß√£o
num_top_categories = 10  # N√∫mero padr√£o de TOP categorias para buscar (N=10)

# ====================================================================================
# FUN√á√ïES DE CATEGORIZA√á√ÉO E BUSCA
# ====================================================================================

def create_engine_connection():
    """Cria engine SQLAlchemy usando as mesmas credenciais do gvg_search_utils"""
    try:
        # Carregar vari√°veis de ambiente usando caminho absoluto
        env_path = os.path.join(os.path.dirname(__file__), 'supabase_v0.env')
        
        if not os.path.exists(env_path):
            console.print(f"[red]Arquivo de configura√ß√£o n√£o encontrado: {env_path}[/red]")
            return None
            
        load_dotenv(env_path)
        
        # Configura√ß√µes do banco com valores padr√£o
        host = os.getenv('host', 'localhost')
        database = os.getenv('dbname', 'postgres')
        user = os.getenv('user', 'postgres')
        password = os.getenv('password', '')
        port = os.getenv('port', '5432')
        
        # Debug: mostrar valores carregados (sem senha)
        #console.print(f"[dim]Debug - Host: {host}, Database: {database}, User: {user}, Port: {port}[/dim]")
        
        # Verificar se port √© v√°lido
        if port is None or port == 'None' or port == '':
            port = '5432'
        
        # Verificar se as credenciais essenciais est√£o dispon√≠veis
        if not all([host, database, user]):
            console.print("[red]Erro: Credenciais do banco de dados n√£o configuradas corretamente.[/red]")
            console.print("[yellow]Verifique o arquivo supabase_v0.env[/yellow]")
            return None
        
        # Criar connection string
        connection_string = f"postgresql://{user}:{password}@{host}:{port}/{database}"
        
        # Criar engine
        engine = create_engine(connection_string)
        
        # Testar conex√£o
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        
        console.print("[green]‚úì Engine SQLAlchemy criada com sucesso![/green]")
        return engine
        
    except Exception as e:
        console.print(f"[red]Erro ao criar engine SQLAlchemy: {e}[/red]")
        console.print(f"[yellow]Verifique as configura√ß√µes do banco de dados em supabase_v0.env[/yellow]")
        return None

def get_top_categories_for_query(query_text, top_n=num_top_categories):
    """
    Embedda a query e busca as TOP N categorias mais similares.
    Usa negation embeddings quando apropriado (busca sem√¢ntica ou h√≠brida).
    
    Args:
        query_text: Texto da consulta
        top_n: N√∫mero de TOP categorias para retornar (padr√£o 10)

    Returns:
        Lista de dicion√°rios com as categorias e suas similaridades
    """
    try:
        # Gerar embedding da consulta usando negation embeddings se ativo e busca sem√¢ntica/h√≠brida
        if use_negation_embeddings and current_search_type in [1, 3]:
            query_embedding = get_negation_embedding(query_text)
        else:
            query_embedding = get_embedding(query_text)
            
        if query_embedding is None:
            console.print("[yellow]N√£o foi poss√≠vel gerar embedding da consulta.[/yellow]")
            return []
        
        # Converter para lista para usar na query
        if isinstance(query_embedding, np.ndarray):
            query_embedding_list = query_embedding.tolist()
        else:
            query_embedding_list = query_embedding
        
        # Criar engine
        engine = create_engine_connection()
        if not engine:
            return []
        
        # Query SQL usando operador de similaridade coseno do pgvector
        query = """
        SELECT 
            id,
            codcat,
            nomcat,
            codnv0,
            nomnv0,
            codnv1,
            nomnv1,
            codnv2,
            nomnv2,
            codnv3,
            nomnv3,
            1 - (cat_embeddings <=> %(embedding)s::vector) AS similarity
        FROM 
            categorias
        WHERE 
            cat_embeddings IS NOT NULL
        ORDER BY 
            similarity DESC
        LIMIT %(limit)s
        """
        
        # Executa a query
        df = pd.read_sql_query(
            query, 
            engine, 
            params={
                'embedding': query_embedding_list,
                'limit': top_n
            }
        )
        
        # Formatar os resultados
        results = []
        for idx, row in df.iterrows():
            results.append({
                'rank': idx + 1,
                'categoria_id': row['id'],
                'codigo': row['codcat'],
                'descricao': row['nomcat'],
                'nivel0_cod': row['codnv0'],
                'nivel0_nome': row['nomnv0'],
                'nivel1_cod': row['codnv1'],
                'nivel1_nome': row['nomnv1'],
                'nivel2_cod': row['codnv2'],
                'nivel2_nome': row['nomnv2'],
                'nivel3_cod': row['codnv3'],
                'nivel3_nome': row['nomnv3'],
                'similarity_score': float(row['similarity'])
            })
        
        return results
        
    except Exception as e:
        console.print(f"[red]Erro ao buscar TOP categorias para query: {e}[/red]")
        return []

def display_top_categories_table(categories):
    """
    Exibe uma tabela rica com as TOP N categorias da query.
    
    Args:
        categories: Lista de categorias com similaridades
    """
    if not categories:
        console.print("[yellow]Nenhuma categoria encontrada para a consulta.[/yellow]")
        return
    
    # Criar tabela Rica
    table = Table(title="üéØ TOP Categorias da Query", title_style="bold magenta")
    
    table.add_column("Rank", style="bold cyan", width=6)
    table.add_column("C√≥digo", style="bold yellow", width=12)
    table.add_column("Descri√ß√£o", style="bold green", width=60)
    table.add_column("Similaridade", style="bold blue", width=12)
    
    for cat in categories:
        similarity_color = "bright_green" if cat['similarity_score'] > 0.8 else \
                          "yellow" if cat['similarity_score'] > 0.6 else "white"
        
        # Mostrar c√≥digo e descri√ß√£o completos
        codigo_completo = cat['codigo']
        descricao_completa = cat['descricao']
        
        table.add_row(
            str(cat['rank']),
            codigo_completo,
            descricao_completa,
            f"[{similarity_color}]{cat['similarity_score']:.4f}[/{similarity_color}]"
        )
    
    console.print()
    console.print(table)
    console.print()

# ====================================================================================
# FUN√á√ïES DAS TR√äS ABORDAGENS DE BUSCA
# ====================================================================================

def direct_search(query_text, search_type, limit=MAX_RESULTS, filter_expired=True):
    """
    ABORDAGEM 1 - BUSCA DIRETA
    Busca tradicional (sem categorias) usando sem√¢ntica/palavras-chave/h√≠brida diretamente nos textos.
    
    Args:
        query_text: Texto da consulta
        search_type: Tipo de busca (1=Sem√¢ntica, 2=Palavras-chave, 3=H√≠brida)
        limit: Limite de resultados
        filter_expired: Filtrar contrata√ß√µes encerradas
        
    Returns:
        Tuple (resultados_formatados, confian√ßa)
    """
    try:
        console.print(f"[blue]Executando busca direta ({SEARCH_TYPES[search_type]['name']})...[/blue]")
        
        # Verificar status do processamento inteligente
        intelligent_status = get_intelligent_status()
        enable_intelligent = intelligent_status.get('intelligent_processing_enabled', False)
        
        if search_type == 1:  # Sem√¢ntica
            results, confidence = semantic_search(query_text, limit, MIN_RESULTS, filter_expired, use_negation_embeddings, enable_intelligent)
        elif search_type == 2:  # Palavras-chave
            results, confidence = keyword_search(query_text, limit, MIN_RESULTS, filter_expired, enable_intelligent)
        elif search_type == 3:  # H√≠brida
            results, confidence = hybrid_search(query_text, limit, MIN_RESULTS, SEMANTIC_WEIGHT, filter_expired, use_negation_embeddings, enable_intelligent)
        else:
            console.print("[red]Tipo de busca inv√°lido![/red]")
            return [], 0.0
        
        # Adicionar flag de abordagem nos resultados
        for result in results:
            result["search_approach"] = "direct"
            result["search_type"] = search_type
        
        return results, confidence
        
    except Exception as e:
        console.print(f"[red]Erro na busca direta: {e}[/red]")
        return [], 0.0

def correspondence_search(query_text, top_categories, limit=MAX_RESULTS, filter_expired=True):
    """
    ABORDAGEM 2 - BUSCA POR CORRESPOND√äNCIA CATEG√ìRICA
    Busca apenas contrata√ß√µes que tenham pelo menos uma das TOP N categorias.
    Ordena por multiplica√ß√£o de similarities (query‚Üícategoria √ó contrata√ß√£o‚Üícategoria).
    Aplica condi√ß√µes SQL extra√≠das do processamento inteligente (regi√£o, valor, etc.).
    
    Args:
        query_text: Texto da consulta
        top_categories: Lista das TOP N categorias da query
        limit: Limite de resultados
        filter_expired: Filtrar contrata√ß√µes encerradas
        
    Returns:
        Tuple (resultados_formatados, confian√ßa)
    """
    try:
        console.print(f"[blue]Executando busca por correspond√™ncia categ√≥rica...[/blue]")
        
        # Extrair c√≥digos das categorias para busca
        category_codes = [cat['codigo'] for cat in top_categories]
        
        if not category_codes:
            return [], 0.0
        
        # Obter condi√ß√µes SQL do processamento inteligente (se dispon√≠vel)
        sql_conditions = []
        if INTELLIGENT_SEARCH_AVAILABLE:
            try:
                status = get_intelligent_status()
                if status.get('intelligent_processing_enabled', False):
                    # Importar e usar o processador inteligente
                    from gvg_pre_processing_v3 import SearchQueryProcessor
                    processor = SearchQueryProcessor()
                    processed = processor.process_query(query_text)
                    sql_conditions = processed.get('sql_conditions', [])
                    
                    if sql_conditions:
                        console.print(f"[dim]‚öôÔ∏è  Aplicando {len(sql_conditions)} condi√ß√µes SQL inteligentes[/dim]")
                        for i, condition in enumerate(sql_conditions, 1):
                            console.print(f"[dim]   {i}. {condition}[/dim]")
                    else:
                        console.print(f"[dim]‚öôÔ∏è  Nenhuma condi√ß√£o SQL detectada na query[/dim]")
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è  Erro no processamento inteligente: {e}[/yellow]")
                console.print(f"[yellow]Continuando com busca por categorias apenas[/yellow]")
        
        # Conectar ao banco
        connection = create_connection()
        cursor = connection.cursor()
        
        # Query SQL: Busca contrata√ß√µes que tenham pelo menos uma das TOP N categorias
        search_query = """
        SELECT 
            c.numeroControlePNCP,
            c.anoCompra,
            c.descricaoCompleta,
            c.valorTotalHomologado,
            c.valorTotalEstimado,
            c.dataAberturaProposta,
            c.dataEncerramentoProposta,
            c.dataInclusao,
            c.linkSistemaOrigem,
            c.modalidadeId,
            c.modalidadeNome,
            c.modaDisputaId,
            c.modaDisputaNome,
            c.usuarioNome,
            c.orgaoEntidade_poderId,
            c.orgaoEntidade_esferaId,
            c.unidadeOrgao_ufSigla,
            c.unidadeOrgao_municipioNome,
            c.unidadeOrgao_nomeUnidade,
            c.orgaoEntidade_razaosocial,
            ce.top_categories,
            ce.top_similarities
        FROM 
            contratacoes c
        JOIN 
            contratacoes_embeddings ce ON c.numeroControlePNCP = ce.numeroControlePNCP
        WHERE 
            ce.top_categories IS NOT NULL
            AND ce.top_categories && %s
        """
        
        # Adicionar condi√ß√µes SQL inteligentes (regi√£o, valor, etc.)
        for condition in sql_conditions:
            search_query += f" AND {condition}"
        
        # Adicionar filtro de data se ativado
        if filter_expired:
            search_query += " AND c.dataEncerramentoProposta >= CURRENT_DATE"
        
        # Executar query
        cursor.execute(search_query, (category_codes,))
        results = cursor.fetchall()
        column_names = [desc[0] for desc in cursor.description]
        
        # Processar resultados e calcular similarity score de correspond√™ncia
        formatted_results = []
        for row in results:
            result_dict = dict(zip(column_names, row))
            
            # Calcular similarity score de correspond√™ncia (multiplica√ß√£o de similarities)
            correspondence_similarity = calculate_correspondence_similarity_score(
                top_categories, 
                result_dict['top_categories'], 
                result_dict['top_similarities']
            )
            
            # Encontrar a categoria mais importante para este resultado
            top_category_info = find_top_category_for_result(
                top_categories,
                result_dict['top_categories'],
                result_dict['top_similarities']
            )
            
            formatted_results.append({
                "rank": 0,  # Ser√° definido ap√≥s ordena√ß√£o
                "id": result_dict["numerocontrolepncp"],
                "similarity": correspondence_similarity,
                "correspondence_similarity": correspondence_similarity,
                "top_category_info": top_category_info,
                "search_approach": "correspondence",
                "details": result_dict
            })
        
        # Ordenar por similarity de correspond√™ncia (decrescente)
        formatted_results.sort(key=lambda x: x["similarity"], reverse=True)
        
        # Definir ranks ap√≥s ordena√ß√£o
        for i, result in enumerate(formatted_results):
            result["rank"] = i + 1
        
        # Limitar resultados
        formatted_results = formatted_results[:limit]
        
        # Calcular confian√ßa
        similarities = [r["similarity"] for r in formatted_results]
        confidence = calculate_confidence(similarities) if similarities else 0.0
        
        cursor.close()
        connection.close()
        
        return formatted_results, confidence
        
    except Exception as e:
        console.print(f"[red]Erro na busca por correspond√™ncia categ√≥rica: {e}[/red]")
        return [], 0.0

def category_filtered_search(query_text, search_type, top_categories, limit=MAX_RESULTS, filter_expired=True):
    """
    ABORDAGEM 3 - BUSCA COM FILTRO CATEG√ìRICO
    Fase 1: Encontra TOP N categorias da query para definir o universo restrito
    Fase 2: Aplica busca sem√¢ntica/palavras-chave/h√≠brida tradicional
    Fase 3: Filtra os resultados para manter apenas aqueles que tenham PELO MENOS uma das TOP N categorias
    
    Args:
        query_text: Texto da consulta
        search_type: Tipo de busca (1=Sem√¢ntica, 2=Palavras-chave, 3=H√≠brida)
        top_categories: Lista das TOP N categorias da query
        limit: Limite de resultados
        filter_expired: Filtrar contrata√ß√µes encerradas
        
    Returns:
        Tuple (resultados_formatados, confian√ßa)
    """
    try:
        console.print(f"[blue]Executando busca com filtro categ√≥rico ({SEARCH_TYPES[search_type]['name']})...[/blue]")
        
        # Extrair c√≥digos das categorias para filtro
        category_codes = [cat['codigo'] for cat in top_categories]
        
        if not category_codes:
            return [], 0.0
        
        # FASE 1: Executar busca tradicional (sem restri√ß√£o por categoria)
        console.print(f"[blue]Executando busca {SEARCH_TYPES[search_type]['name']} tradicional...[/blue]")
        
        # Verificar status do processamento inteligente
        intelligent_status = get_intelligent_status()
        enable_intelligent = intelligent_status.get('intelligent_processing_enabled', False)
        
        if search_type == 1:  # Sem√¢ntica
            all_results, confidence = semantic_search(query_text, limit * 3, MIN_RESULTS, filter_expired, use_negation_embeddings, enable_intelligent)
        elif search_type == 2:  # Palavras-chave
            all_results, confidence = keyword_search(query_text, limit * 3, MIN_RESULTS, filter_expired, enable_intelligent)
        elif search_type == 3:  # H√≠brida
            all_results, confidence = hybrid_search(query_text, limit * 3, MIN_RESULTS, SEMANTIC_WEIGHT, filter_expired, use_negation_embeddings, enable_intelligent)
        else:
            console.print("[red]Tipo de busca inv√°lido![/red]")
            return [], 0.0
        
        if not all_results:
            console.print("[yellow]Nenhum resultado encontrado na busca tradicional.[/yellow]")
            return [], 0.0
        
        # FASE 2: Filtrar resultados por categorias
        console.print(f"[blue]Filtrando resultados por categorias relevantes...[/blue]")
        
        # Conectar ao banco para verificar categorias
        connection = create_connection()
        cursor = connection.cursor()
        
        # Buscar categorias de cada resultado
        filtered_results = []
        result_ids = [result['id'] for result in all_results]
        
        # Query para buscar categorias de m√∫ltiplos resultados
        placeholders = ','.join(['%s'] * len(result_ids))
        category_query = f"""
        SELECT 
            numeroControlePNCP,
            top_categories
        FROM 
            contratacoes_embeddings
        WHERE 
            numeroControlePNCP IN ({placeholders})
            AND top_categories IS NOT NULL
        """
        
        cursor.execute(category_query, result_ids)
        category_data = {row[0]: row[1] for row in cursor.fetchall()}
        
        cursor.close()
        connection.close()
        
        # Filtrar resultados que tenham pelo menos uma categoria relevante
        for result in all_results:
            result_id = result['id']
            result_categories = category_data.get(result_id, [])
            
            # Verificar se o resultado tem pelo menos uma categoria relevante
            if result_categories and any(cat_code in result_categories for cat_code in category_codes):
                # Adicionar informa√ß√µes de filtro
                result["search_approach"] = "category_filtered"
                result["search_type"] = search_type
                result["matched_categories"] = [cat for cat in category_codes if cat in result_categories]
                filtered_results.append(result)
            
            # Parar quando atingir o limite
            if len(filtered_results) >= limit:
                break
        
        # Reordenar os ranks dos resultados filtrados
        for i, result in enumerate(filtered_results):
            result["rank"] = i + 1
        
        universe_size = len([r for r in all_results if category_data.get(r['id'])])
        console.print(f"[green]Universo com categorias: {universe_size} contrata√ß√µes[/green]")
        console.print(f"[green]Resultados filtrados: {len(filtered_results)} contrata√ß√µes[/green]")
        
        # Adicionar informa√ß√£o do universo filtrado
        for result in filtered_results:
            result["filtered_universe_size"] = universe_size
        
        return filtered_results, confidence
        
    except Exception as e:
        console.print(f"[red]Erro na busca com filtro categ√≥rico: {e}[/red]")
        return [], 0.0

def calculate_correspondence_similarity_score(query_categories, result_categories, result_similarities):
    """
    Calcula o score de similaridade pela multiplica√ß√£o:
    similarity(query‚Üícategoria) √ó similarity(contrata√ß√£o‚Üícategoria)
    
    Args:
        query_categories: TOP N categorias da query com suas similarities
        result_categories: Categorias do resultado (array de c√≥digos)
        result_similarities: Similarities do resultado (array de scores)
        
    Returns:
        Score final de correspond√™ncia (float)
    """
    try:
        if not query_categories or not result_categories or not result_similarities:
            return 0.0
        
        max_score = 0.0
        
        # Para cada categoria da query
        for query_cat in query_categories:
            query_code = query_cat['codigo']
            query_similarity = query_cat['similarity_score']
            
            # Verificar se valores s√£o v√°lidos
            if query_similarity is None or query_similarity == 0:
                continue
            
            # Verificar se esta categoria est√° presente no resultado
            if query_code in result_categories:
                # Encontrar o √≠ndice da categoria no resultado
                try:
                    idx = result_categories.index(query_code)
                    result_similarity = result_similarities[idx]
                    
                    # Verificar se result_similarity √© v√°lido
                    if result_similarity is None or result_similarity == 0:
                        continue
                    
                    # Calcular score de correspond√™ncia: multiplica√ß√£o das similarities
                    correspondence_score = float(query_similarity) * float(result_similarity)
                    
                    # Manter o maior score encontrado
                    max_score = max(max_score, correspondence_score)
                    
                except (IndexError, ValueError, TypeError):
                    continue
        
        return max_score
        
    except Exception as e:
        return 0.0

def find_top_category_for_result(query_categories, result_categories, result_similarities):
    """
    Encontra a categoria mais importante para um resultado espec√≠fico.
    Retorna a categoria com maior score de correspond√™ncia (multiplica√ß√£o).
    
    Args:
        query_categories: TOP N categorias da query
        result_categories: Categorias do resultado
        result_similarities: Similarities do resultado
        
    Returns:
        Dicion√°rio com informa√ß√µes da categoria mais importante
    """
    try:
        if not query_categories or not result_categories or not result_similarities:
            return None
        
        best_category = None
        best_score = 0.0
        
        # Para cada categoria da query
        for query_cat in query_categories:
            query_code = query_cat['codigo']
            query_similarity = query_cat['similarity_score']
            
            # Verificar se valores s√£o v√°lidos
            if query_similarity is None or query_similarity == 0:
                continue
            
            # Verificar se esta categoria est√° presente no resultado
            if query_code in result_categories:
                try:
                    idx = result_categories.index(query_code)
                    result_similarity = result_similarities[idx]
                    
                    # Verificar se result_similarity √© v√°lido
                    if result_similarity is None or result_similarity == 0:
                        continue
                    
                    # Calcular score de correspond√™ncia
                    correspondence_score = float(query_similarity) * float(result_similarity)
                    
                    # Verificar se √© o melhor score
                    if correspondence_score > best_score:
                        best_score = correspondence_score
                        best_category = {
                            'codigo': query_cat['codigo'],
                            'descricao': query_cat['descricao'],
                            'query_similarity': query_similarity,
                            'result_similarity': result_similarity,
                            'correspondence_score': correspondence_score
                        }
                        
                except (IndexError, ValueError, TypeError):
                    continue
        
        return best_category
        
    except Exception as e:
        return None

# ====================================================================================
# FIM DAS FUN√á√ïES DE BUSCA
# ====================================================================================

def highlight_key_terms(text, query_terms, max_length=500):
    """Destaca termos da consulta no texto e limita o comprimento."""
    if not text:
        return "N/A"
        
    # Limitar comprimento se for muito longo
    if len(text) > max_length:
        text = text[:max_length] + "..."
    
    # Destacar termos da consulta (case-insensitive)
    for term in query_terms:
        if len(term) > 2:  # Apenas termos com mais de 2 caracteres
            pattern = re.compile(re.escape(term), re.IGNORECASE)
            text = pattern.sub(f"[bold yellow]{term}[/bold yellow]", text)
    
    return text

def display_results(results, search_time=0, query="", search_type=1, search_approach=1):
    """Exibe os resultados da busca de forma organizada"""
    if not results:
        console.print("[yellow]Nenhum resultado encontrado.[/yellow]")
        return
    
    console.print(f"\n[bold green]Resultados encontrados: {len(results)}[/bold green]")
    console.print(f"[blue]Tempo de busca: {search_time:.3f}s[/blue]")
    console.print(f"[blue]Tipo de busca: {SEARCH_TYPES[search_type]['name']}[/blue]")
    console.print(f"[blue]Abordagem: {SEARCH_APPROACHES[search_approach]['name']}[/blue]")
    console.print(f"[blue]Ordena√ß√£o: {SORT_MODES[current_sort_mode]['name']}[/blue]")
    console.print(f"[blue]Termos destacados: [bold cyan]{query}[/bold cyan][/blue]")
    
    # Mostrar informa√ß√µes do processamento inteligente se dispon√≠vel E ATIVO
    if INTELLIGENT_SEARCH_AVAILABLE and results and 'details' in results[0] and 'intelligent_processing' in results[0]['details']:
        # Verificar se o processamento inteligente est√° realmente ativo
        try:
            status = get_intelligent_status()
            intelligent_enabled = status.get('intelligent_processing_enabled', False)
            
            if intelligent_enabled:
                intelligent_info = results[0]['details']['intelligent_processing']
                console.print(f"\n[bold yellow]ü§ñ PROCESSAMENTO INTELIGENTE:[/bold yellow]")
                console.print(f"[cyan]Original: [dim]'{intelligent_info.get('original_query', query)}'[/dim][/cyan]")
                console.print(f"[green]Termos processados: [bold]'{intelligent_info.get('processed_terms', 'N/A')}'[/bold][/green]")
                applied_conditions = intelligent_info.get('applied_conditions', 0)
                if applied_conditions > 0:
                    console.print(f"[magenta]Condi√ß√µes SQL aplicadas: [bold]{applied_conditions}[/bold][/magenta]")
                explanation = intelligent_info.get('explanation', '')
                if explanation:
                    console.print(f"[dim]üí° {explanation}[/dim]")
        except Exception:
            # Se n√£o conseguir verificar o status, n√£o mostrar as informa√ß√µes
            pass
    
    # Mostrar informa√ß√£o sobre negation embeddings se estiver ativo e for busca sem√¢ntica ou h√≠brida
    if use_negation_embeddings and search_type in [1, 3]:
        try:
            pos_terms, neg_terms = extract_pos_neg_terms(query)
            if neg_terms.strip():
                console.print(f"[cyan]üéØ Prompt Negativo ativo: [bold green]‚Üó[/bold green]'{pos_terms}'  [bold red]‚Üò[/bold red]'{neg_terms}' [/cyan]")
            else:
                console.print(f"[cyan]üéØ Prompt Negativo ativo (sem termos negativos detectados)[/cyan]")
        except:
            console.print(f"[cyan]üéØ Prompt Negativo ativo[/cyan]")

    # Mostrar informa√ß√µes espec√≠ficas conforme abordagem
    if search_approach == 2 and last_query_categories:  # Correspond√™ncia
        console.print(f"[magenta]Baseado em {len(last_query_categories)} TOP categorias[/magenta]")
    elif search_approach == 3 and last_query_categories:  # Filtro de categoria
        console.print(f"[magenta]Universo filtrado por {len(last_query_categories)} TOP categorias[/magenta]")
        # Mostrar tamanho do universo se dispon√≠vel
        if results and "filtered_universe_size" in results[0]:
            console.print(f"[yellow]Universo restrito: {results[0]['filtered_universe_size']} contrata√ß√µes[/yellow]")
    
    console.print()
    
    # Tabela resumida adaptada para todas as abordagens
    table = Table(title=f"Resumo dos Resultados - {SEARCH_APPROACHES[search_approach]['name']}", show_header=True, header_style="bold magenta")
    table.add_column("Rank", style="dim", width=6, justify="center")
    table.add_column("√ìrg√£o", style="cyan", width=40)
    table.add_column("Local", style="cyan", width=30)
    table.add_column("Similaridade", justify="right", width=12)
    table.add_column("Valor (R$)", justify="right", width=17)
    table.add_column("Data Encerramento", width=12)
    
    for result in results:
        details = result.get("details", {})
        
        # Formatar valor usando fun√ß√£o de gvg_search_utils
        valor = format_currency(details.get("valortotalestimado", 0)) if details else "N/A"
        
        # Formatar data
        data_encerramento = format_date(details.get("dataencerramentoproposta", "N/A")) if details else "N/A"
        
        # Preparar informa√ß√µes de √≥rg√£o e local
        unidade = details.get('unidadeorgao_nomeunidade', 'N/A')
        
        municipio = details.get('unidadeorgao_municipionome', 'N/A')
        uf = details.get('unidadeorgao_ufsigla', '')
        local = f"{municipio}/{uf}" if uf else municipio
        
        # Preparar row data
        row_data = [
            f"{result['rank']}", 
            unidade,  # Unidade/√ìrg√£o
            local,  # Munic√≠pio/UF
            f"{result['similarity']:.4f}",
            valor,
            str(data_encerramento)
        ]
        
        table.add_row(*row_data)

    console.print(table)
    console.print("\n[bold magenta]Detalhes dos resultados:[/bold magenta]\n")
    
    # Detalhes de cada resultado
    for result in results:
        details = result.get("details", {})
        
        # Destacar termos da consulta na descri√ß√£o
        descricao = highlight_key_terms(
            details.get("descricaocompleta", "N/A"),
            query.split()
        )
        
        # Criar painel com informa√ß√µes detalhadas
        panel_title = f"#{result['rank']} - {result['id']} (Similaridade: {result['similarity']:.4f})"
        
        # Adicionar informa√ß√µes espec√≠ficas conforme abordagem
        if search_approach == 2:  # Correspond√™ncia
            panel_title += f" [Correspond√™ncia]"
        elif search_approach == 3:  # Filtro de categoria
            panel_title += f" [Filtrado por categoria]"
        
        # Adicionar scores espec√≠ficos para busca h√≠brida
        if "semantic_score" in result and "keyword_score" in result:
            panel_title += f" [Sem√¢ntico: {result['semantic_score']:.4f}, Palavra-chave: {result['keyword_score']:.4f}]"
        
        content = [
            f"[bold cyan]√ìrg√£o:[/bold cyan] {details.get('orgaoentidade_razaosocial', 'N/A')}",
            f"[bold cyan]Unidade:[/bold cyan] {details.get('unidadeorgao_nomeunidade', 'N/A')}",
            f"[bold cyan]Local:[/bold cyan] {details.get('unidadeorgao_municipionome', 'N/A')}/{details.get('unidadeorgao_ufsigla', 'N/A')}",
            f"[bold cyan]Valor:[/bold cyan] {format_currency(details.get('valortotalestimado', 0))}",
            f"[bold cyan]Datas:[/bold cyan] Inclus√£o: {format_date(details.get('datainclusao', 'N/A'))} | Abertura: {format_date(details.get('dataaberturaproposta', 'N/A'))} | Encerramento: {format_date(details.get('dataencerramentoproposta', 'N/A'))}",
            f"[bold cyan]Modalidade:[/bold cyan] {details.get('modalidadeid', 'N/A')} - {details.get('modalidadenome', 'N/A')} | [bold cyan]Disputa:[/bold cyan] {details.get('modadisputaid', 'N/A')} - {details.get('modadisputanome', 'N/A')}",
            f"[bold cyan]Usu√°rio:[/bold cyan] {details.get('usuarionome', 'N/A')} | [bold cyan]Poder:[/bold cyan] {decode_poder(details.get('orgaoentidade_poderid', 'N/A'))} | [bold cyan]Esfera:[/bold cyan] {decode_esfera(details.get('orgaoentidade_esferaid', 'N/A'))}",
        ]
        
        # Adicionar link do sistema se dispon√≠vel
        if details.get('linksistemaorigem'):
            content.append(f"[bold cyan]Link Sistema:[/bold cyan] {details.get('linksistemaorigem', 'N/A')}")
        
        # Adicionar categoria mais importante se dispon√≠vel (correspond√™ncia)
        if search_approach == 2 and "top_category_info" in result and result["top_category_info"]:
            cat = result["top_category_info"]
            category_text = f"{cat['codigo']} - {cat['descricao']} (Score: {cat['correspondence_score']:.3f})"
            content.append(f"[bold yellow]üéØ Categoria TOP:[/bold yellow] {category_text}")
        
        content.append(f"[bold cyan]Descri√ß√£o:[/bold cyan] {descricao[:500]}...")
        
        panel = Panel(
            "\n".join(content),
            title=panel_title,
            border_style="blue",
            padding=(1, 2)
        )
        
        console.print(panel)

# ====================================================================================
# FUN√á√ïES DE INTERFACE E MENU
# ====================================================================================

def select_search_type():
    """Interface para sele√ß√£o do tipo de busca"""
    global current_search_type
    
    console.print("\n[bold yellow]üîç Tipos de Busca Dispon√≠veis:[/bold yellow]")
    for key, value in SEARCH_TYPES.items():
        indicator = "üëâ" if key == current_search_type else "  "
        console.print(f"{indicator} {key}. {value['name']}: {value['description']}")
    
    choice = Prompt.ask(
        "\n[bold yellow]Escolha o tipo de busca[/bold yellow]",
        choices=[str(i) for i in SEARCH_TYPES.keys()],
        default=str(current_search_type)
    )
    
    current_search_type = int(choice)
    console.print(f"[green]‚úì Tipo de busca alterado para: {SEARCH_TYPES[current_search_type]['name']}[/green]")
    return current_search_type

def select_search_approach():
    """Interface para sele√ß√£o da abordagem de busca"""
    global current_search_approach
    
    console.print("\n[bold yellow]üìä Abordagens de Busca Dispon√≠veis:[/bold yellow]")
    for key, value in SEARCH_APPROACHES.items():
        indicator = "üëâ" if key == current_search_approach else "  "
        console.print(f"{indicator} {key}. {value['name']}: {value['description']}")
    
    choice = Prompt.ask(
        "\n[bold yellow]Escolha a abordagem de busca[/bold yellow]",
        choices=[str(i) for i in SEARCH_APPROACHES.keys()],
        default=str(current_search_approach)
    )
    
    current_search_approach = int(choice)
    console.print(f"[green]‚úì Abordagem alterada para: {SEARCH_APPROACHES[current_search_approach]['name']}[/green]")
    return current_search_approach

def select_sort_mode():
    """Interface para sele√ß√£o do modo de ordena√ß√£o"""
    global current_sort_mode
    
    console.print("\n[bold yellow]üìà Modos de Ordena√ß√£o Dispon√≠veis:[/bold yellow]")
    for key, value in SORT_MODES.items():
        indicator = "üëâ" if key == current_sort_mode else "  "
        console.print(f"{indicator} {key}. {value['name']}: {value['description']}")
    
    choice = Prompt.ask(
        "\n[bold yellow]Escolha o modo de ordena√ß√£o[/bold yellow]",
        choices=[str(i) for i in SORT_MODES.keys()],
        default=str(current_sort_mode)
    )
    
    current_sort_mode = int(choice)
    console.print(f"[green]‚úì Ordena√ß√£o alterada para: {SORT_MODES[current_sort_mode]['name']}[/green]")
    return current_sort_mode

def toggle_filter():
    """Alterna o filtro de contrata√ß√µes encerradas"""
    global filter_expired
    filter_expired = not filter_expired
    status = "ativado" if filter_expired else "desativado"
    console.print(f"[green]‚úì Filtro de contrata√ß√µes encerradas {status}[/green]")

def toggle_negation_embeddings():
    """Alterna uso de negation embeddings"""
    global use_negation_embeddings
    use_negation_embeddings = not use_negation_embeddings
    status = "ativado" if use_negation_embeddings else "desativado"
    console.print(f"[green]‚úì Negation embeddings {status}[/green]")

def toggle_document_processor():
    """Alterna entre vers√µes do processador de documentos"""
    global USE_DOCLING_V3, summarize_document, process_pncp_document, DOCUMENT_PROCESSOR_VERSION
    
    # Alternar configura√ß√£o
    USE_DOCLING_V3 = not USE_DOCLING_V3
    
    # Recarregar m√≥dulos
    try:
        if USE_DOCLING_V3:
            console.print("[yellow]‚è≥ Carregando Docling (v3)...[/yellow]")
            from gvg_document_utils_v3_o import (
                summarize_document,
                process_pncp_document
            )
            DOCUMENT_PROCESSOR_VERSION = "v3 (Docling)"
            console.print("[green]‚úì Usando Docling (v3) para processamento de documentos[/green]")
            console.print("[blue]‚Ä¢ Melhor para extra√ß√£o de tabelas e estruturas complexas[/blue]")
            console.print("[blue]‚Ä¢ Suporte completo a arquivos ZIP[/blue]")
        else:
            console.print("[yellow]‚è≥ Carregando MarkItDown (v2)...[/yellow]")
            from gvg_document_utils_v2 import (
                summarize_document,
                process_pncp_document
            )
            DOCUMENT_PROCESSOR_VERSION = "v2 (MarkItDown)"
            console.print("[green]‚úì Usando MarkItDown (v2) para processamento de documentos[/green]")
            console.print("[blue]‚Ä¢ Mais r√°pido e compat√≠vel com mais formatos[/blue]")
            console.print("[blue]‚Ä¢ Integra√ß√£o nativa com OpenAI[/blue]")
            
    except ImportError as e:
        console.print(f"[red]‚ùå Erro ao carregar m√≥dulo: {str(e)}[/red]")
        console.print("[yellow]‚ö†Ô∏è Revertendo configura√ß√£o...[/yellow]")
        USE_DOCLING_V3 = not USE_DOCLING_V3  # Reverter
        
        # Tentar carregar a vers√£o anterior
        try:
            if USE_DOCLING_V3:
                from gvg_document_utils_v3_o import (
                    summarize_document,
                    process_pncp_document
                )
                DOCUMENT_PROCESSOR_VERSION = "v3 (Docling)"
            else:
                from gvg_document_utils_v2 import (
                    summarize_document,
                    process_pncp_document
                )
                DOCUMENT_PROCESSOR_VERSION = "v2 (MarkItDown)"
        except ImportError:
            console.print("[red]‚ùå N√£o foi poss√≠vel carregar nenhum processador de documentos![/red]")
    
    except Exception as e:
        console.print(f"[red]‚ùå Erro inesperado: {str(e)}[/red]")

def configure_system():
    """Configura√ß√µes gerais do sistema"""
    global num_top_categories, MAX_RESULTS
    
    while True:
        # Obter status do processamento inteligente (atualizado a cada loop)
        intelligent_status = get_intelligent_status()
        intelligent_enabled = intelligent_status.get('intelligent_processing_enabled', False)
        debug_enabled = intelligent_status.get('debug_enabled', False)
        
        console.print("\n[bold yellow]‚öôÔ∏è  Configura√ß√µes do Sistema[/bold yellow]")
        console.print(f"1. N√∫mero m√°ximo de resultados: [bold cyan]{MAX_RESULTS}[/bold cyan]")
        console.print(f"2. N√∫mero de TOP categorias: [bold cyan]{num_top_categories}[/bold cyan]")
        console.print(f"3. Processador de documentos: [bold cyan]{DOCUMENT_PROCESSOR_VERSION}[/bold cyan]")
        console.print(f"4. Filtro contrata√ß√µes encerradas: [bold {'green' if filter_expired else 'red'}]{'‚úì Ativo' if filter_expired else '‚úó Inativo'}[/bold {'green' if filter_expired else 'red'}]")
        console.print(f"5. Prompt Negativo: [bold {'green' if use_negation_embeddings else 'red'}]{'‚úì Ativo' if use_negation_embeddings else '‚úó Inativo'}[/bold {'green' if use_negation_embeddings else 'red'}]")
        
        # Mostrar configura√ß√µes inteligentes apenas se dispon√≠vel
        if INTELLIGENT_SEARCH_AVAILABLE:
            console.print(f"6. Processamento inteligente: [bold {'green' if intelligent_enabled else 'red'}]{'‚úì Ativo' if intelligent_enabled else '‚úó Inativo'}[/bold {'green' if intelligent_enabled else 'red'}]")
            console.print(f"7. Debug inteligente: [bold {'green' if debug_enabled else 'red'}]{'‚úì Ativo' if debug_enabled else '‚úó Inativo'}[/bold {'green' if debug_enabled else 'red'}]")
            console.print("8. Voltar ao menu principal")
        else:
            console.print("[dim]6. Processamento inteligente: [red]N√ÉO DISPON√çVEL[/red] (gvg_search_utils_v3)[/dim]")
            console.print("[dim]7. Debug inteligente: [red]N√ÉO DISPON√çVEL[/red] (gvg_search_utils_v3)[/dim]")
            console.print("8. Voltar ao menu principal")
        
        max_choice = "8"
        choice = Prompt.ask(
            "\nEscolha uma op√ß√£o",
            choices=[str(i) for i in range(1, int(max_choice) + 1)],
            default=max_choice
        )
        
        if choice == "1":
            new_max = Prompt.ask(
                f"Novo n√∫mero m√°ximo de resultados (atual: {MAX_RESULTS})",
                default=str(MAX_RESULTS)
            )
            try:
                MAX_RESULTS = int(new_max)
                console.print(f"[green]‚úì N√∫mero m√°ximo de resultados alterado para: {MAX_RESULTS}[/green]")
            except ValueError:
                console.print("[red]Valor inv√°lido![/red]")
        
        elif choice == "2":
            new_top = Prompt.ask(
                f"Novo n√∫mero de TOP categorias (atual: {num_top_categories})",
                default=str(num_top_categories)
            )
            try:
                num_top_categories = int(new_top)
                console.print(f"[green]‚úì N√∫mero de TOP categorias alterado para: {num_top_categories}[/green]")
            except ValueError:
                console.print("[red]Valor inv√°lido![/red]")
        
        elif choice == "3":
            toggle_document_processor()
                
        elif choice == "4":
            toggle_filter()
            
        elif choice == "5":
            toggle_negation_embeddings()
        
        elif choice == "6" and INTELLIGENT_SEARCH_AVAILABLE:
            toggle_intelligent_processing(not intelligent_enabled)
            status = "ATIVADO" if not intelligent_enabled else "DESATIVADO"
            console.print(f"[green]‚úì Processamento inteligente {status}[/green]")
        
        elif choice == "7" and INTELLIGENT_SEARCH_AVAILABLE:
            toggle_intelligent_debug(not debug_enabled)
            status = "ATIVADO" if not debug_enabled else "DESATIVADO"
            console.print(f"[green]‚úì Debug inteligente {status}[/green]")
        
        elif choice == "8":
            break

# Configura√ß√µes de pr√©-processamento (exemplo)
PREPROC_CONFIG = {
    "remove_special_chars": True,
    "keep_separators": True,
    "remove_accents": False,
    "case": "lower",
    "remove_stopwords": False,
    "lemmatize": True
}

# ====================================================================================
# FUN√á√ÉO PRINCIPAL DE BUSCA
# ====================================================================================

def perform_search(query, search_type, search_approach):
    """Executa a busca conforme o tipo e abordagem selecionados"""
    global last_results, last_query, last_query_categories
    
    start_time = time.time()
    
    try:
        console.print(f"\n[bold blue]Iniciando busca...[/bold blue]")
        console.print(f"[blue]Query: \"{query}\"[/blue]")
        console.print(f"[blue]Tipo: {SEARCH_TYPES[search_type]['name']}[/blue]")
        console.print(f"[blue]Abordagem: {SEARCH_APPROACHES[search_approach]['name']}[/blue]")
        
        # DEBUG TEMPOR√ÅRIO - Mostrar qual sistema est√° sendo usado
        if INTELLIGENT_SEARCH_AVAILABLE:
            try:
                status = get_intelligent_status()
                intelligent_active = status.get('intelligent_processing_enabled', False)
                debug_active = status.get('intelligent_debug_enabled', False)
                
                # Obter status do filtro de relev√¢ncia
                relevance_status = get_relevance_filter_status()
                relevance_active = relevance_status.get('relevance_filter_enabled', False)
                
                console.print(f"\n[bold yellow]üîç DEBUG - SISTEMA DE BUSCA ATIVO[/bold yellow]")
                console.print(f"[cyan]Sistema: {'ü§ñ INTELIGENTE (v3)' if intelligent_active else 'üîß TRADICIONAL (v2 fallback)'}[/cyan]")
                console.print(f"[cyan]Debug: {'üêõ ATIVO' if debug_active else 'üêõ INATIVO'}[/cyan]")
                console.print(f"[cyan]Filtro IA: {'üéØ ATIVO' if relevance_active else 'üéØ INATIVO'}[/cyan]")
                
                if intelligent_active:
                    console.print(f"[green]‚úÖ Usando intelligent_{SEARCH_TYPES[search_type]['name'].lower()}_search()[/green]")
                    console.print(f"[green]   ‚Üí Separa√ß√£o autom√°tica de termos e condi√ß√µes SQL[/green]")
                    console.print(f"[green]   ‚Üí Processamento via OpenAI Assistant[/green]")
                    if relevance_active:
                        console.print(f"[green]   ‚Üí Filtro de relev√¢ncia IA ativo (Assistant ID: asst_sc5so6LwQEhB6G9FcVSten0S)[/green]")
                else:
                    console.print(f"[yellow]‚ö†Ô∏è  Usando {SEARCH_TYPES[search_type]['name'].lower()}_search() tradicional[/yellow]")
                    console.print(f"[yellow]   ‚Üí Busca direta sem processamento inteligente[/yellow]")
                    if relevance_active:
                        console.print(f"[yellow]   ‚Üí Filtro de relev√¢ncia IA ainda ativo[/yellow]")
                    
            except Exception as e:
                console.print(f"[red]‚ùå Erro no debug: {e}[/red]")
        else:
            console.print(f"\n[bold red]üîç DEBUG - SISTEMA TRADICIONAL ATIVO[/bold red]")
            console.print(f"[red]Sistema: v2 (gvg_search_utils_v2)[/red]")
            console.print(f"[red]Motivo: gvg_search_utils_v3 n√£o dispon√≠vel[/red]")
        
        # ============================================================================
        # PROCESSAMENTO INTELIGENTE ANTECIPADO (ANTES DA BUSCA DE CATEGORIAS)
        # ============================================================================
        original_query = query
        processed_query = query  # Default: usar query original
        intelligent_info = None
        
        # Fazer processamento inteligente PRIMEIRO (se dispon√≠vel e ativo)
        if INTELLIGENT_SEARCH_AVAILABLE:
            try:
                status = get_intelligent_status()
                if status.get('intelligent_processing_enabled', False):
                    console.print(f"[dim]ü§ñ Executando processamento inteligente antecipado...[/dim]")
                    
                    # Importar e usar o preprocessor diretamente
                    from gvg_search_utils_v3 import preprocessor
                    processed = preprocessor.process_search_query(query)
                    
                    # Extrair apenas os termos de busca limpos
                    processed_query = processed['search_terms']
                    intelligent_info = processed
                    
                    console.print(f"[dim]‚úÖ Query processada: \"{processed_query}\" (termos limpos)[/dim]")
                    console.print(f"[dim]üìù Query original: \"{original_query}\"[/dim]")
                    
                    # Debug das condi√ß√µes SQL se existirem
                    if processed['sql_conditions']:
                        console.print(f"[dim]‚öôÔ∏è  Condi√ß√µes SQL detectadas: {len(processed['sql_conditions'])}[/dim]")
                else:
                    # Sem processamento inteligente, usar query original
                    processed_query = query
                    console.print(f"[dim]Usando query original: \"{processed_query}\"[/dim]")
            except Exception as e:
                console.print(f"[red]‚ùå Erro no processamento inteligente: {e}[/red]")
                processed_query = query
                console.print(f"[dim]Usando query original: \"{processed_query}\" (fallback)[/dim]")
        else:
            # Sem sistema inteligente dispon√≠vel
            processed_query = query
            console.print(f"[dim]Usando query original: \"{processed_query}\" (sistema b√°sico)[/dim]")
        
        # Inicializar vari√°veis
        results = []
        confidence = 0.0
        categories = []
        
        # FASE 1: Buscar categorias (se necess√°rio para abordagem)
        if search_approach in [2, 3]:  # Correspond√™ncia ou Filtro de categoria
            console.print(f"\n[blue]Buscando TOP {num_top_categories} categorias para a query...[/blue]")
            
            # DEBUG TEMPOR√ÅRIO - Mostrar qual termo est√° sendo usado para categorias
            console.print(f"[dim]üîç Termo para categorias: \"{processed_query}\" ‚úÖ (TERMOS LIMPOS)[/dim]")
            if processed_query != original_query:
                console.print(f"[dim]üìù Query original: \"{original_query}\"[/dim]")
                if intelligent_info:
                    console.print(f"[dim]ü§ñ Processamento inteligente: ATIVO[/dim]")
                    console.print(f"[dim]üí° Estrat√©gia: Categorias com termos limpos + Busca com query completa[/dim]")
                else:
                    console.print(f"[dim]üîß Pr√©-processamento legacy: ATIVO[/dim]")
            
            # IMPORTANTE: Usar processed_query (termos processados) para encontrar categorias
            # Isso garante que usamos os termos limpos/processados e n√£o a query original
            categories = get_top_categories_for_query(processed_query, num_top_categories)
            
            if not categories:
                console.print("[yellow]N√£o foi poss√≠vel encontrar categorias para a query.[/yellow]")
                return
            
            # Exibir categorias encontradas
            display_top_categories_table(categories)
            last_query_categories = categories
        
        # FASE 2: Executar busca conforme abordagem
        if search_approach == 1:  # DIRETA
            # Para busca direta, passar a query original para que as fun√ß√µes inteligentes
            # fa√ßam seu pr√≥prio processamento completo (incluindo condi√ß√µes SQL)
            query_for_direct_search = original_query if INTELLIGENT_SEARCH_AVAILABLE and intelligent_info else processed_query
            console.print(f"[dim]üéØ Query para busca direta: \"{query_for_direct_search}\"[/dim]")
            results, confidence = direct_search(query_for_direct_search, search_type, MAX_RESULTS, filter_expired)
        
        elif search_approach == 2:  # CORRESPOND√äNCIA
            # CORRE√á√ÉO: Para correspond√™ncia, usar original_query (query completa com condi√ß√µes SQL)
            # Isso garante que filtros de regi√£o, valor, etc. sejam aplicados
            console.print(f"[dim]üéØ Query para correspond√™ncia: \"{original_query}\" ‚úÖ (QUERY COMPLETA)[/dim]")
            results, confidence = correspondence_search(original_query, categories, MAX_RESULTS, filter_expired)
        
        elif search_approach == 3:  # FILTRO DE CATEGORIA
            # CORRE√á√ÉO: Para filtro de categoria, usar original_query (query completa com condi√ß√µes SQL)
            # Isso garante que filtros de regi√£o, valor, etc. sejam aplicados na busca tradicional
            console.print(f"[dim]üéØ Query para filtro categ√≥rico: \"{original_query}\" ‚úÖ (QUERY COMPLETA)[/dim]")
            results, confidence = category_filtered_search(original_query, search_type, categories, MAX_RESULTS, filter_expired)
        
        else:
            console.print("[red]Abordagem de busca inv√°lida![/red]")
            return
        
        # Aplicar ordena√ß√£o conforme modo selecionado
        if current_sort_mode == 1:  # Por similaridade (padr√£o)
            # J√° est√° ordenado por similaridade
            sort_message = "[dim]Ordena√ß√£o: por similaridade (decrescente)[/dim]"
        elif current_sort_mode == 2:  # Por data de encerramento
            # Ordenar por data de encerramento (ascendente)
            results.sort(key=lambda x: x.get("details", {}).get("dataencerramentoproposta", "9999-12-31"))
            sort_message = "[dim]Ordena√ß√£o: por data de encerramento (ascendente)[/dim]"
        elif current_sort_mode == 3:  # Por valor estimado
            # Ordenar por valor estimado (decrescente) - campo em lowercase devido ao PostgreSQL
            results.sort(key=lambda x: float(x.get("details", {}).get("valortotalestimado", 0) or 0), reverse=True)
            sort_message = "[dim]Ordena√ß√£o: por valor estimado (decrescente)[/dim]"
        
        # Atualizar ranks ap√≥s ordena√ß√£o
        for i, result in enumerate(results, 1):
            result["rank"] = i
        
        # Armazenar resultados
        last_results = results
        last_query = original_query
        
        # Adicionar informa√ß√µes do processamento inteligente aos resultados se dispon√≠vel
        if intelligent_info and results:
            for result in results:
                if 'details' not in result:
                    result['details'] = {}
                result['details']['intelligent_processing'] = {
                    'original_query': intelligent_info['original_query'],
                    'processed_terms': intelligent_info['search_terms'],
                    'applied_conditions': len(intelligent_info.get('sql_conditions', [])),
                    'explanation': intelligent_info.get('explanation', '')
                }
        
        # Calcular tempo de busca
        end_time = time.time()
        search_time = end_time - start_time
        
        # Exibir resultados usando processed_query para destacar termos relevantes
        display_results(results, search_time, processed_query, search_type, search_approach)
        console.print(f"[dim]Tempo total de busca: {search_time:.4f} segundos[/dim]")
        
    except Exception as e:
        console.print(f"[red]Erro durante a busca: {e}[/red]")

# ====================================================================================
# FUN√á√ïES AUXILIARES
# ====================================================================================

def show_process_documents(process_number):
    """Mostra documentos de um processo espec√≠fico com menu de sele√ß√£o"""
    if not last_results or process_number < 1 or process_number > len(last_results):
        console.print("[red]N√∫mero de processo inv√°lido![/red]")
        return
    
    result = last_results[process_number - 1]
    details = result.get("details", {})
    
    # Extrair dados b√°sicos do PNCP
    pncp_data = extract_pncp_data(result)
    
    # Tentar diferentes campos poss√≠veis para o n√∫mero de controle PNCP
    numero_controle = pncp_data['id']
    
    if numero_controle == 'N√£o informado':
        console.print("[yellow]Debug - Campos dispon√≠veis no resultado:[/yellow]")
        console.print(f"[dim]Details keys: {list(details.keys())}[/dim]")
        console.print(f"[dim]Result keys: {list(result.keys())}[/dim]")
        console.print("[red]N√£o foi poss√≠vel encontrar n√∫mero de controle PNCP![/red]")
        return
    
    console.print(f"\n[bold cyan]Processo Selecionado: #{process_number} - {numero_controle}[/bold cyan]")
    
    # Mostrar informa√ß√µes b√°sicas do PNCP
    console.print(f"[cyan]üìç Localiza√ß√£o: {pncp_data['municipio']}/{pncp_data['uf']}[/cyan]")
    if len(pncp_data['orgao']) > 80:
        console.print(f"[cyan]üèõÔ∏è √ìrg√£o: {pncp_data['orgao'][:80]}...[/cyan]")
    else:
        console.print(f"[cyan]üèõÔ∏è √ìrg√£o: {pncp_data['orgao']}[/cyan]")
    console.print(f"[cyan]üìÖ Inclus√£o: {pncp_data['data_inclusao']} | Abertura: {pncp_data['data_abertura']} | Encerramento: {pncp_data['data_encerramento']}[/cyan]")
    
    console.print(f"\n[bold green]Buscando documentos para: {numero_controle}[/bold green]")
    
    try:
        with console.status("[bold green]Carregando documentos..."):
            documentos = fetch_documentos(numero_controle)
        
        if not documentos:
            console.print("[yellow]Nenhum documento encontrado para este processo.[/yellow]")
            return
        
        # Mostrar lista de documentos dispon√≠veis
        console.print(f"\n[bold green]Documentos dispon√≠veis ({len(documentos)}):[/bold green]")
        for i, doc in enumerate(documentos, 1):
            tipo_info = f" ({doc['tipo']})" if doc.get('tipo') and doc['tipo'] != 'N/A' else ""
            data_info = f" - {doc['data_publicacao'][:10]}" if doc.get('data_publicacao') and doc['data_publicacao'] != 'N/A' else ""
            console.print(f"[cyan]{i}[/cyan]. {doc['nome']}{tipo_info}{data_info}")
            console.print(f"   [dim][link={doc['url']}]{doc['url']}[/link][/dim]")
        
        # Menu de op√ß√µes
        console.print(f"\n[bold yellow]Op√ß√µes:[/bold yellow]")
        console.print(f"[cyan]1-{len(documentos)}[/cyan] - Processar documento espec√≠fico")
        console.print(f"[cyan]A[/cyan] - Processar TODOS os documentos")
        console.print(f"[cyan]V[/cyan] - Apenas visualizar links (sem processar)")
        console.print(f"[cyan]Q[/cyan] - Voltar ao menu principal")
        
        choice = Prompt.ask(
            "\nEscolha uma op√ß√£o",
            default="V"
        ).upper()
        
        if choice == "Q":
            return
        elif choice == "V":
            console.print(f"\n[bold green]Links diretos para os documentos:[/bold green]")
            for i, doc in enumerate(documentos, 1):
                tipo_info = f" ({doc['tipo']})" if doc.get('tipo') and doc['tipo'] != 'N/A' else ""
                data_info = f" - {doc['data_publicacao'][:10]}" if doc.get('data_publicacao') and doc['data_publicacao'] != 'N/A' else ""
                console.print(f"{i}. [link={doc['url']}]{doc['nome']}{tipo_info}{data_info}[/link]")
            return
        elif choice == "A":
            # Processar todos os documentos
            console.print(f"\n[bold yellow]Processando e sumarizando {len(documentos)} documento(s)...[/bold yellow]")
            
            with console.status("[bold green]Processando documentos..."):
                for i, doc in enumerate(documentos, 1):
                    console.print(f"\n[bold yellow]Resumo do documento {i} - {doc['nome']}:[/bold yellow]")
                    summary = summarize_document(doc['url'], MAX_TOKENS, doc['nome'], pncp_data)
                    if summary:
                        console.print(summary)
                    else:
                        console.print("[yellow]N√£o foi poss√≠vel sumarizar este documento.[/yellow]")
                    
                    if i < len(documentos):
                        console.print("\n" + "-"*50)
        else:
            # Processar documento espec√≠fico
            try:
                doc_index = int(choice) - 1
                if 0 <= doc_index < len(documentos):
                    doc = documentos[doc_index]
                    console.print(f"\n[bold yellow]Processando documento: {doc['nome']}[/bold yellow]")
                    
                    with console.status("[bold green]Processando documento..."):
                        summary = summarize_document(doc['url'], MAX_TOKENS, doc['nome'], pncp_data)
                    
                    if summary:
                        console.print(f"\n[bold green]Resumo do documento:[/bold green]")
                        console.print(summary)
                    else:
                        console.print("[yellow]N√£o foi poss√≠vel sumarizar este documento.[/yellow]")
                else:
                    console.print("[red]N√∫mero de documento inv√°lido![/red]")
            except ValueError:
                console.print("[red]Op√ß√£o inv√°lida! Use n√∫meros 1-{} ou A/V/Q.[/red]".format(len(documentos)))
    
    except Exception as e:
        console.print(f"[red]Erro ao buscar documentos: {e}[/red]")

def generate_process_keywords(process_number):
    """Gera palavras-chave para um processo espec√≠fico"""
    if not last_results or process_number < 1 or process_number > len(last_results):
        console.print("[red]N√∫mero de processo inv√°lido![/red]")
        return
    
    result = last_results[process_number - 1]
    details = result.get("details", {})
    
    description = details.get("descricaocompleta", "")
    if not description:
        console.print("[yellow]Descri√ß√£o n√£o dispon√≠vel para este processo.[/yellow]")
        return
    
    console.print(f"\n[bold cyan]Processo Selecionado: #{process_number} - {result['id']}[/bold cyan]")
    console.print(f"\n[bold green]Gerando palavras-chave...[/bold green]")
    
    try:
        with console.status("[bold green]Analisando descri√ß√£o..."):
            keywords = generate_keywords(description)
        
        if keywords:
            console.print(f"\n[bold green]Palavras-chave geradas:[/bold green]")
            console.print(f"[cyan]{keywords}[/cyan]")
        else:
            console.print("[yellow]N√£o foi poss√≠vel gerar palavras-chave.[/yellow]")
    
    except Exception as e:
        console.print(f"[red]Erro ao gerar palavras-chave: {e}[/red]")

def generate_export_filename(query, extension):
    """
    Gera nome de arquivo padronizado para exporta√ß√£o.
    Formato: Busca_{PROMPT}_{Sx}_{Ax}_{Rx}_{Ox}_{Ix}_{timestamp}.{extension}
    
    Args:
        query (str): Texto da query (ser√° truncado e sanitizado)
        extension (str): Extens√£o do arquivo (xlsx, pdf, json)
        
    Returns:
        str: Nome do arquivo formatado
    """
    from datetime import datetime
    
    # Sanitizar e truncar query para o nome do arquivo
    query_clean = re.sub(r'[^\w\s-]', '', query)  # Remove caracteres especiais
    query_clean = re.sub(r'\s+', '_', query_clean.strip())  # Substitui espa√ßos por underscore
    query_clean = query_clean[:30].upper()  # Limita a 30 caracteres e converte para mai√∫sculas
    
    # Obter status do processamento inteligente
    intelligent_status = get_intelligent_status()
    intelligent_enabled = 1 if intelligent_status.get('intelligent_processing_enabled', False) else 0
    
    # Obter status do filtro de relev√¢ncia
    relevance_status = get_relevance_filter_status()
    relevance_level = relevance_status.get('relevance_filter_level', 1)
    
    # Gerar timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Montar nome do arquivo
    filename = f"Busca_{query_clean}_S{current_search_type}_A{current_search_approach}_R{relevance_level}_O{current_sort_mode}_I{intelligent_enabled}_{timestamp}.{extension}"
    
    return filename

def export_results_to_excel(results, query, search_type_id):
    """Exporta os resultados da busca para um arquivo Excel."""
    if not results:
        console.print("[yellow]Nenhum resultado para exportar.[/yellow]")
        return False
    
    try:
        # Criar um dataframe com os resultados
        data = []
        for result in results:
            details = result.get("details", {})
            if details:
                result_data = {
                    "Rank": result["rank"],
                    "ID": result["id"],
                    "Similaridade": result["similarity"],
                    "√ìrg√£o": details.get("orgaoentidade_razaosocial", "N/A"),
                    "Unidade": details.get("unidadeorgao_nomeunidade", "N/A"),
                    "Munic√≠pio": details.get("unidadeorgao_municipionome", "N/A"),
                    "UF": details.get("unidadeorgao_ufsigla", "N/A"),
                    "Valor": details.get("valortotalestimado", 0),
                    "Data Inclus√£o": format_date(details.get("datainclusao", "N/A")),
                    "Data Abertura": format_date(details.get("dataaberturaproposta", "N/A")),
                    "Data Encerramento": format_date(details.get("dataencerramentoproposta", "N/A")),
                    "Modalidade ID": details.get("modalidadeid", "N/A"),
                    "Modalidade Nome": details.get("modalidadenome", "N/A"),
                    "Disputa ID": details.get("modadisputaid", "N/A"),
                    "Disputa Nome": details.get("modadisputanome", "N/A"),
                    "Usu√°rio": details.get("usuarionome", "N/A"),
                    "Poder": decode_poder(details.get("orgaoentidade_poderid", "N/A")),
                    "Esfera": decode_esfera(details.get("orgaoentidade_esferaid", "N/A")),
                    "Link Sistema": details.get("linksistemaorigem", "N/A"),
                    "Descri√ß√£o": details.get("descricaocompleta", "N/A")
                }
                
                # Adicionar scores espec√≠ficos para abordagem de correspond√™ncia
                if current_search_approach == 2 and "correspondence_similarity" in result:
                    result_data["Score_Correspondencia"] = result["correspondence_similarity"]
                
                # Adicionar informa√ß√µes da categoria TOP
                if "top_category_info" in result and result["top_category_info"]:
                    cat = result["top_category_info"]
                    result_data["Categoria_TOP"] = f"{cat['codigo']} - {cat['descricao']} (Score: {cat['correspondence_score']:.3f})"
                
                # Adicionar scores espec√≠ficos para busca h√≠brida
                if "semantic_score" in result and "keyword_score" in result:
                   
                    result_data["Score Sem√¢ntico"] = result["semantic_score"]
                    result_data["Score Palavra-chave"] = result["keyword_score"]
                
                data.append(result_data)
        
        # Criar DataFrame
        df = pd.DataFrame(data)
        
        # Criar diret√≥rio para resultados se n√£o existir
        os.makedirs(RESULTS_PATH, exist_ok=True)
        
        # Gerar nome do arquivo usando a fun√ß√£o padronizada
        filename_base = generate_export_filename(query, "xlsx")
        filename = os.path.join(RESULTS_PATH, filename_base)
        
        # Salvar para Excel
        df.to_excel(filename, index=False, engine='openpyxl')
        
        console.print(f"[green]Resultados exportados para: {filename}[/green]")
        return True
    
    except Exception as e:
        console.print(f"[bold red]Erro ao exportar resultados: {str(e)}[/bold red]")
        return False

def export_results_to_pdf(results, query, search_type_id):
    """Exporta os resultados da busca para um arquivo PDF formatado como no terminal."""
    if not results:
        console.print("[yellow]Nenhum resultado para exportar.[/yellow]")
        return False
    
    try:
        # Criar diret√≥rio para resultados se n√£o existir
        os.makedirs(RESULTS_PATH, exist_ok=True)
        
        # Gerar nome do arquivo usando a fun√ß√£o padronizada
        filename_base = generate_export_filename(query, "pdf")
        filename = os.path.join(RESULTS_PATH, filename_base)
        
        # Configurar documento PDF
        doc = SimpleDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=45,
            leftMargin=45,
            topMargin=54,
            bottomMargin=54
        )
        
        # Preparar estilos
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            "CustomTitle",
            parent=styles["Title"],
            alignment=1,  # Centralizado
            fontSize=16,
            spaceAfter=20
        )
        heading_style = styles["Heading1"]
        normal_style = styles["Normal"]
        
        # Estilo para descri√ß√µes
        desc_style = ParagraphStyle(
            "Description",
            parent=normal_style,
            fontSize=11,
            leading=13,
            spaceAfter=6
        )
        
        # Elementos para o PDF
        elements = []
        
        # Extrair apenas a parte positiva da busca (remover parte ap√≥s -- ou similar)
        try:
            if use_negation_embeddings and current_search_type in [1, 3]:
                pos_terms, _ = extract_pos_neg_terms(query)
                search_query_display = pos_terms.strip() if pos_terms.strip() else query
            else:
                search_query_display = query
        except:
            search_query_display = query
        
        # T√≠tulo do documento (apenas busca positiva em mai√∫sculas)
        elements.append(Paragraph(f"BUSCA: \"{search_query_display.upper()}\"", title_style))
        
        # Informa√ß√µes da busca
        elements.append(Paragraph(f"Tipo de busca: {SEARCH_TYPES[search_type_id]['name']}", normal_style))
        elements.append(Paragraph(f"Abordagem: {SEARCH_APPROACHES[current_search_approach]['name']}", normal_style))
        elements.append(Paragraph(f"Ordena√ß√£o: {SORT_MODES[current_sort_mode]['name']}", normal_style))
        elements.append(Paragraph(f"Data da pesquisa: {datetime.now().strftime('%d/%m/%Y %H:%M')}", normal_style))
        elements.append(Spacer(1, 0.2*inch))
        
        # Tabela resumida com margem e fonte menor
        table_data = [
            ["Rank", "Unidade", "Local", "Similaridade", "Valor (R$)", "Data Proposta"]
        ]
        
        # Garantir que os resultados est√£o em ordem num√©rica ascendente
        sorted_results = sorted(results, key=lambda x: x.get('rank', 999))
        
        for result in sorted_results:
            details = result.get("details", {})
            if not details:
                continue
                
            valor = format_currency(details.get("valortotalestimado", 0))
            data_encerramento = format_date(details.get("dataencerramentoproposta", "N/A"))
            
            unidade = details.get('unidadeorgao_nomeunidade', 'N/A')
            unidade = f"{unidade[:30]}..." if len(unidade) > 30 else unidade
            
            municipio = details.get('unidadeorgao_municipionome', 'N/A')
            uf = details.get('unidadeorgao_ufsigla', '')
            local = f"{municipio}/{uf}" if uf else municipio
            
            row_data = [
                str(result['rank']),
                unidade,
                local,
                f"{result['similarity']:.4f}",
                valor,
                str(data_encerramento)
            ]
            
            table_data.append(row_data)
        
        # Criar e estilizar a tabela com margens e fonte menor
        table = PDFTable(table_data, repeatRows=1)
        table.setStyle(TableStyle([
            # Azul escuro no cabe√ßalho em vez de roxo
            ('BACKGROUND', (0, 0), (-1, 0), colors.navy),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),  # Fonte menor
            ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
            ('TOPPADDING', (0, 0), (-1, 0), 8),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (0, -1), 'CENTER'),
            ('ALIGN', (3, 0), (3, -1), 'RIGHT'),
            ('ALIGN', (4, 0), (4, -1), 'RIGHT'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),  # Fonte menor nos dados
        ]))
        
        # Adicionar margens na tabela
        elements.append(Spacer(1, 0.1*inch))
        elements.append(table)
        elements.append(Spacer(1, 0.3*inch))
        
        # Detalhes de cada resultado
        elements.append(Paragraph("Detalhes dos Resultados", heading_style))
        elements.append(Spacer(1, 0.1*inch))
        
        # Estilo para card/caixa de resultado
        card_style = ParagraphStyle(
            "CardStyle",
            parent=normal_style,
            fontSize=10,
            leading=12,
            leftIndent=10,
            rightIndent=10,
            spaceAfter=3,
            spaceBefore=3
        )
        
        # Estilo para t√≠tulo do card (rank + ID)
        card_title_style = ParagraphStyle(
            "CardTitleStyle",
            parent=styles["Heading2"],
            fontSize=14,
            spaceAfter=5,
            textColor=colors.navy,
            alignment=0
        )
        
        # Estilo para subt√≠tulo do card (√≥rg√£o)
        card_subtitle_style = ParagraphStyle(
            "CardSubtitleStyle",
            parent=styles["Heading3"],
            fontSize=11,
            spaceAfter=8,
            textColor=colors.darkblue
        )
        
        # Estilo para label da descri√ß√£o
        desc_label_style = ParagraphStyle(
            "DescLabelStyle",
            parent=card_style,
            fontSize=10,
            fontName='Helvetica-Bold',
            spaceAfter=3
        )
        
        # Estilo para descri√ß√£o
        desc_card_style = ParagraphStyle(
            "DescCardStyle",
            parent=card_style,
            fontSize=10,
            leading=11,
            leftIndent=15,
            rightIndent=15
        )
        
        # Garantir que os resultados est√£o em ordem num√©rica ascendente novamente
        for result in sorted_results:
            details = result.get("details", {})
            if not details:
                continue
            
            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            # IN√çCIO DO CARD
            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            
            # T√≠tulo do card: Rank + √ìrg√£o
            orgao_raw = details.get('orgaoentidade_razaosocial', '√ìrg√£o n√£o informado')
            orgao = escape_html_for_pdf(orgao_raw.title() if orgao_raw else '√ìrg√£o n√£o informado')
            elements.append(Paragraph(f"#{result['rank']} - {orgao}", card_title_style))
            
            # Criar dados organizados em colunas usando uma mini-tabela
            info_data = [
                ["Unidade:", escape_html_for_pdf(details.get('unidadeorgao_nomeunidade', 'N/A'))],
                ["Local:", f"{escape_html_for_pdf(details.get('unidadeorgao_municipionome', 'N/A'))}/{escape_html_for_pdf(details.get('unidadeorgao_ufsigla', 'N/A'))}"],
                ["Valor:", escape_html_for_pdf(format_currency(details.get('valortotalestimado', 0)))]
            ]
            
            # Datas
            data_text = f"Inclus√£o: {escape_html_for_pdf(format_date(details.get('datainclusao', 'N/A')))} | Abertura: {escape_html_for_pdf(format_date(details.get('dataaberturaproposta', 'N/A')))} | Encerramento: {escape_html_for_pdf(format_date(details.get('dataencerramentoproposta', 'N/A')))}"
            info_data.append(["Datas:", data_text])
            
            # Modalidade e Disputa
            modalidade_text = f"{escape_html_for_pdf(details.get('modalidadeid', 'N/A'))} - {escape_html_for_pdf(details.get('modalidadenome', 'N/A'))}"
            disputa_text = f"{escape_html_for_pdf(details.get('modadisputaid', 'N/A'))} - {escape_html_for_pdf(details.get('modadisputanome', 'N/A'))}"
            info_data.append(["Modalidade:", modalidade_text])
            info_data.append(["Disputa:", disputa_text])
            
            # Criar mini-tabela para informa√ß√µes organizadas
            info_table = PDFTable(info_data, colWidths=[2*inch, 4.5*inch])
            info_table.setStyle(TableStyle([
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),  # Primeira coluna em negrito
                ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),       # Segunda coluna normal
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('LEFTPADDING', (0, 0), (-1, -1), 10),
                ('RIGHTPADDING', (0, 0), (-1, -1), 5),
                ('TOPPADDING', (0, 0), (-1, -1), 3),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
                ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.gray),
            ]))
            
            elements.append(info_table)
            elements.append(Spacer(1, 0.1*inch))
            
            # Descri√ß√£o em se√ß√£o separada
            elements.append(Paragraph("Descri√ß√£o:", desc_label_style))
            
            descricao = details.get("descricaocompleta", "N/A")
            # DESCRI√á√ÉO COMPLETA - Removido limite de 1000 caracteres
            descricao = descricao.replace(" :: ", "\n‚Ä¢ ")
            if not descricao.startswith("‚Ä¢"):
                descricao = "‚Ä¢ " + descricao

            # Escapar caracteres especiais que podem causar problemas de parsing
            descricao = escape_html_for_pdf(descricao)
            
            elements.append(Paragraph(descricao, desc_card_style))
            
            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            # FINAL DO CARD - Linha divis√≥ria
            # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
            elements.append(Spacer(1, 0.2*inch))
            
            # Linha divis√≥ria visual
            line_data = [["" for _ in range(10)]]
            line_table = PDFTable(line_data, colWidths=[0.65*inch] * 10)
            line_table.setStyle(TableStyle([
                ('LINEBELOW', (0, 0), (-1, -1), 2, colors.navy),
                ('TOPPADDING', (0, 0), (-1, -1), 0),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 0),
            ]))
            elements.append(line_table)
            elements.append(Spacer(1, 0.3*inch))
        
        # Construir o PDF
        doc.build(elements)
        
        console.print(f"[green]Resultados exportados para PDF: {filename}[/green]")
        return True
    
    except Exception as e:
        console.print(f"[bold red]Erro ao exportar resultados para PDF: {str(e)}[/bold red]")
        return False

def convert_datetime_to_string(obj):
    """Converte objetos datetime para string formatada."""
    if isinstance(obj, datetime):
        return obj.strftime("%Y-%m-%d %H:%M:%S")
    elif obj is None:
        return ""
    else:
        # Se j√° √© string ou outro tipo, retorna como est√°
        return str(obj)

def safe_float_conversion(value):
    """Converte valores para float, tratando NaN como zero."""
    try:
        if value is None:
            return 0.0
        
        # Converter para float
        float_value = float(value)
        
        # Verificar se √© NaN e converter para 0
        if np.isnan(float_value):
            return 0.0
            
        return float_value
    except (ValueError, TypeError):
        return 0.0

def export_results_to_json(results, query, search_type_id):
    """Exporta os resultados da busca para um arquivo JSON."""
    if not results:
        console.print("[yellow]Nenhum resultado para exportar.[/yellow]")
        return False
    
    try:
        # Criar lista com os resultados no mesmo formato do Excel
        data = []
        for result in results:
            details = result.get("details", {})
            if details:
                record = {
                    "rank": result.get("rank", 0),
                    "id": result.get("id", ""),
                    "similarity": safe_float_conversion(result.get("similarity", 0)),
                    "orgao": details.get("orgaoentidade_razaosocial", ""),
                    "unidade": details.get("unidadeorgao_nomeunidade", ""),
                    "municipio": details.get("unidadeorgao_municipionome", ""),
                    "uf": details.get("unidadeorgao_ufsigla", ""),
                    "valor_estimado": safe_float_conversion(details.get("valortotalestimado", 0)),
                    "valor_homologado": safe_float_conversion(details.get("valortotalhomologado", 0)),
                    "data_inclusao": convert_datetime_to_string(details.get("datainclusao", "")),
                    "data_abertura": convert_datetime_to_string(details.get("dataaberturaproposta", "")),
                    "data_encerramento": convert_datetime_to_string(details.get("dataencerramentoproposta", "")),
                    "modalidade_id": details.get("modalidadeid", ""),
                    "modalidade_nome": details.get("modalidadenome", ""),
                    "disputa_id": details.get("modadisputaid", ""),
                    "disputa_nome": details.get("modadisputanome", ""),
                    "usuario": details.get("usuarionome", ""),
                    "poder": details.get("orgaoentidade_poderid", ""),
                    "esfera": details.get("orgaoentidade_esferaid", ""),
                    "link_sistema": details.get("linksistemaorigem", ""),
                    "descricao": details.get("descricaocompleta", "")
                }
                data.append(record)
        
        # Criar diret√≥rio para resultados se n√£o existir
        os.makedirs(RESULTS_PATH, exist_ok=True)
        
        # Gerar nome do arquivo usando a fun√ß√£o padronizada
        filename_base = generate_export_filename(query, "json")
        filename = os.path.join(RESULTS_PATH, filename_base)
        
        # Criar estrutura JSON com metadados
        json_data = {
            "metadata": {
                "query": query,
                "search_type": SEARCH_TYPES[search_type_id]['name'],
                "search_approach": SEARCH_APPROACHES[current_search_approach]['name'],
                "sort_mode": SORT_MODES[current_sort_mode]['name'],
                "export_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "total_results": len(data)
            },
            "results": data
        }
        
        # Salvar para JSON
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, ensure_ascii=False, indent=2)
        
        console.print(f"[green]Resultados exportados para JSON: {filename}[/green]")
        return True
    
    except Exception as e:
        console.print(f"[bold red]Erro ao exportar resultados para JSON: {str(e)}[/bold red]")
        return False

def export_results(results, query, search_type_id):
    """Permite ao usu√°rio escolher o formato de exporta√ß√£o dos resultados."""
    if not results:
        console.print("[yellow]Nenhum resultado para exportar.[/yellow]")
        return
    
    console.print("\n[bold cyan]Escolha o formato de exporta√ß√£o:[/bold cyan]")
    console.print("[cyan]1[/cyan] - Excel (.xlsx)")
    console.print("[cyan]2[/cyan] - PDF (.pdf)")
    console.print("[cyan]3[/cyan] - JSON (.json)")
    
    choice = Prompt.ask(
        "Formato",
        choices=["1", "2", "3"],
        default="1"
    )
    
    if choice == "1":
        export_results_to_excel(results, query, search_type_id)
    elif choice == "2":
        export_results_to_pdf(results, query, search_type_id)
    else:
        export_results_to_json(results, query, search_type_id)

def escape_html_for_pdf(text):
    """Escapa caracteres HTML para uso seguro em Paragraphs do ReportLab"""
    if not isinstance(text, str):
        text = str(text)
    
    # Substituir caracteres especiais por entidades HTML
    replacements = [
        ('&', '&amp;'),
        ('<', '&lt;'),
        ('>', '&gt;'),
        ('"', '&quot;'),
        ("'", '&#39;')
    ]
    
    for old, new in replacements:
        text = text.replace(old, new)
    
    return text

def extract_pncp_data(result):
    """
    Extrai dados b√°sicos do PNCP de um resultado de busca
    
    Args:
        result: Resultado da busca contendo details do processo
        
    Returns:
        dict: Dicion√°rio com dados b√°sicos do PNCP
    """
    details = result.get("details", {})
    
    # Extrair ID do processo
    processo_id = None
    possible_id_fields = [
        'numero_controle_pncp',
        'numerocontrolepncp', 
        'numero_processo',
        'numeroprocesso'
    ]
    
    for field in possible_id_fields:
        if field in details and details[field]:
            processo_id = details[field]
            break
    
    # Se n√£o encontrou nos details, tentar no resultado principal
    if not processo_id and 'id' in result and result['id']:
        processo_id = result['id']
    
    # Montar dados do PNCP
    pncp_data = {
        'id': processo_id or 'N√£o informado',
        'link': details.get('linksistemaorigem', 'N√£o informado'),
        'data_inclusao': format_date(details.get('datainclusao', 'N/A')),
        'data_abertura': format_date(details.get('dataaberturaproposta', 'N/A')),
        'data_encerramento': format_date(details.get('dataencerramentoproposta', 'N/A')),
        'municipio': details.get('unidadeorgao_municipionome', 'N√£o informado'),
        'uf': details.get('unidadeorgao_ufsigla', 'N√£o informado'),
        'orgao': details.get('orgaoentidade_razaosocial', 'N√£o informado')
    }
    
    return pncp_data

def display_menu():
    """Exibe o menu principal com as op√ß√µes dispon√≠veis"""
    console.print("\n" + "="*80)
    console.print("[bold cyan]MENU DE OP√á√ïES:[/bold cyan]")
    
    # Obter status atual do filtro de relev√¢ncia
    relevance_status = get_relevance_filter_status()
    relevance_level_name = relevance_status.get('level_name', 'Desconhecido')
    
    console.print(f"1. Tipo de busca: [bold]{SEARCH_TYPES[current_search_type]['name']}[/bold]")
    console.print(f"2. Abordagem: [bold]{SEARCH_APPROACHES[current_search_approach]['name']}[/bold]")
    console.print(f"3. Relev√¢ncia: [bold]{relevance_level_name}[/bold]")
    console.print(f"4. Ordena√ß√£o: [bold]{SORT_MODES[current_sort_mode]['name']}[/bold]")
    console.print("5. Configura√ß√µes do sistema")
    
    # Op√ß√µes contextuais baseadas em resultados dispon√≠veis
    if last_results:
        console.print("\n[bold yellow]Op√ß√µes de resultados:[/bold yellow]")
        console.print("6. üìÑ Ver documentos de um processo")
        console.print("7. üî§ Gerar palavras-chave de um processo") 
        console.print("8. üìä Exportar resultados")
    else:
        console.print("[dim]Realize uma busca para ver op√ß√µes de resultados[/dim]")

def select_relevance_level():
    """Interface para sele√ß√£o do n√≠vel de relev√¢ncia"""
    current_status = get_relevance_filter_status()
    current_level = current_status.get('relevance_filter_level', 1)
    
    console.print("\n[bold yellow]üìä N√≠veis de Relev√¢ncia Dispon√≠veis:[/bold yellow]")
    for level_num, level_info in RELEVANCE_LEVELS.items():
        indicator = "üëâ" if level_num == current_level else "  "
        console.print(f"{indicator} {level_num}. {level_info['name']}: {level_info['description']}")
    
    choice = Prompt.ask(
        "\n[bold yellow]Escolha o n√≠vel de relev√¢ncia[/bold yellow]",
        choices=[str(i) for i in RELEVANCE_LEVELS.keys()],
        default=str(current_level)
    )
    
    new_level = int(choice)
    set_relevance_filter_level(new_level)
    
    level_name = RELEVANCE_LEVELS[new_level]['name']
    console.print(f"[green]‚úì N√≠vel de relev√¢ncia alterado para: {level_name} (n√≠vel {new_level})[/green]")
    
    if new_level > 1:
        console.print(f"[cyan]‚ÑπÔ∏è  O filtro de relev√¢ncia usa IA para eliminar contratos n√£o relacionados √† sua consulta[/cyan]")
    
    return new_level

def main():
    """Fun√ß√£o principal do sistema"""
    global current_search_type, current_search_approach, current_sort_mode, filter_expired
    
    # Cabe√ßalho do sistema
    console.print(Panel(
        "[bold cyan]Sistema de Busca Inteligente para Contratos P√∫blicos PNCP[/bold cyan]\n" +
        "[bold cyan]Conecta ao Supabase e realiza diferentes tipos de busca[/bold cyan]\n" +
        "[bold yellow]Tr√™s abordagens distintas de busca com menu separado![/bold yellow]",
        title="[bold magenta]SISTEMA DE BUSCA GOVGO SUPABASE[/bold magenta]",
        subtitle="[bold cyan]Direta ‚Ä¢ Correspond√™ncia ‚Ä¢ Filtro[/bold cyan]",
        expand=False,
        width=80
    ))
    
    # Loop principal
    while True:
        display_menu()
        
        user_input = input("\n> ").strip()
        
        if user_input == "1":
            select_search_type()
        
        elif user_input == "2":
            select_search_approach()
        
        elif user_input == "3":
            select_relevance_level()
        
        elif user_input == "4":
            select_sort_mode()
        
        elif user_input == "5":
            configure_system()
        
        elif user_input == "6" and last_results:
            try:
                process_num = int(Prompt.ask(f"N√∫mero do processo (1-{len(last_results)})"))
                show_process_documents(process_num)
            except ValueError:
                console.print("[red]N√∫mero inv√°lido![/red]")
        
        elif user_input == "7" and last_results:
            try:
                process_num = int(Prompt.ask(f"N√∫mero do processo (1-{len(last_results)})"))
                generate_process_keywords(process_num)
            except ValueError:
                console.print("[red]N√∫mero inv√°lido![/red]")
        
        elif user_input == "8" and last_results:
            export_results(last_results, last_query, current_search_type)
        
        elif user_input.lower() in ['sair', 'exit', 'quit', 'q']:
            console.print("[bold yellow]Encerrando sistema...[/bold yellow]")
            
            # DEBUG TEMPOR√ÅRIO - Lembrete sobre debug ativo
            console.print("\n[dim]üí° Lembrete: Debug tempor√°rio est√° ATIVO nesta vers√£o[/dim]")
            console.print("[dim]   Mostra status detalhado do sistema inteligente v3[/dim]")
            console.print("[dim]   Para remover: localizar coment√°rios '# DEBUG TEMPOR√ÅRIO'[/dim]")
            
            break
        
        elif user_input:  # Qualquer outro texto n√£o vazio = nova busca
            perform_search(user_input, current_search_type, current_search_approach)

if __name__ == "__main__":
    main()
