# =======================================================================
# CRIA√á√ÉO DA TABELA CATEGORIAS NO SUPABASE
# =======================================================================
# Este script cria a tabela 'categorias' no banco Supabase com base na
# estrutura da planilha CATEGORIAS.xlsx analisada anteriormente.
# 
# Funcionalidades:
# - Conex√£o com Supabase usando configura√ß√µes do .env
# - Cria√ß√£o da tabela categorias com todos os campos
# - Adi√ß√£o do campo cat_embeddings para vetores de busca sem√¢ntica
# - Cria√ß√£o de √≠ndices otimizados para performance
# - Verifica√ß√£o de integridade da tabela criada
# 
# Resultado: Tabela categorias pronta para receber dados e embeddings.
# =======================================================================

import psycopg2
import os
import sys
from datetime import datetime
from dotenv import load_dotenv
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

# Configure Rich console
console = Console()

def load_database_config():
    """Carrega configura√ß√µes do banco de dados"""
    
    script_dir = os.path.dirname(os.path.abspath(__file__))
    env_path = os.path.join(script_dir, "supabase_v0.env")
    
    console.print(f"üìÇ [cyan]Carregando configura√ß√£o: {env_path}[/cyan]")
    
    if not os.path.exists(env_path):
        console.print(f"[red]‚ùå Arquivo n√£o encontrado: {env_path}[/red]")
        sys.exit(1)
    
    load_dotenv(env_path)
    
    config = {
        'user': os.getenv('user'),
        'password': os.getenv('password'),
        'host': os.getenv('host'),
        'port': os.getenv('port'),
        'dbname': os.getenv('dbname')
    }
    
    # Verificar se todas as configura√ß√µes est√£o presentes
    missing = [k for k, v in config.items() if not v]
    if missing:
        console.print(f"[red]‚ùå Configura√ß√µes faltando: {', '.join(missing)}[/red]")
        sys.exit(1)
    
    console.print(f"[green]‚úì Configura√ß√µes carregadas com sucesso[/green]")
    console.print(f"   Host: {config['host']}")
    console.print(f"   Port: {config['port']}")
    console.print(f"   Database: {config['dbname']}")
    console.print(f"   User: {config['user']}")
    
    return config

def create_categorias_table():
    """Cria a tabela categorias no Supabase"""
    
    console.print(Panel("[bold green]CRIA√á√ÉO DA TABELA CATEGORIAS[/bold green]"))
    
    # Carregar configura√ß√µes
    config = load_database_config()
    
    # Conectar ao banco
    console.print("üîå [yellow]Conectando ao Supabase...[/yellow]")
    
    try:
        conn = psycopg2.connect(
            user=config['user'],
            password=config['password'],
            host=config['host'],
            port=config['port'],
            dbname=config['dbname']
        )
        
        console.print(f"[green]‚úì Conectado ao Supabase: {config['host']}[/green]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Erro ao conectar: {e}[/red]")
        sys.exit(1)
    
    cursor = conn.cursor()
    
    try:
        # 1. VERIFICAR SE A TABELA J√Å EXISTE
        console.print("üîç [cyan]Verificando se a tabela j√° existe...[/cyan]")
        
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'categorias'
            );
        """)
        
        table_exists = cursor.fetchone()[0]
        
        if table_exists:
            console.print("‚ö†Ô∏è [yellow]Tabela 'categorias' j√° existe![/yellow]")
            response = input("Deseja recriar a tabela? (s/n): ").lower().strip()
            
            if response == 's':
                console.print("üóëÔ∏è [red]Removendo tabela existente...[/red]")
                cursor.execute("DROP TABLE IF EXISTS categorias CASCADE;")
                conn.commit()
                console.print("[green]‚úì Tabela removida[/green]")
            else:
                console.print("[yellow]Opera√ß√£o cancelada pelo usu√°rio[/yellow]")
                return False
        
        # 2. CRIAR A TABELA
        console.print("üèóÔ∏è [blue]Criando tabela categorias...[/blue]")
        
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS categorias (
            id SERIAL PRIMARY KEY,
            codcat VARCHAR(100) NOT NULL,
            nomcat TEXT NOT NULL,
            codnv0 VARCHAR(100) NOT NULL,
            nomnv0 VARCHAR(100) NOT NULL,
            codnv1 INTEGER NOT NULL,
            nomnv1 VARCHAR(500) NOT NULL,
            codnv2 INTEGER NOT NULL,
            nomnv2 VARCHAR(500) NOT NULL,
            codnv3 INTEGER NOT NULL,
            nomnv3 VARCHAR(500) NOT NULL,
            cat_embeddings VECTOR(3072),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        
        cursor.execute(create_table_sql)
        conn.commit()
        console.print("[green]‚úì Tabela criada com sucesso![/green]")
        
        # 3. CRIAR √çNDICES
        console.print("üìã [blue]Criando √≠ndices...[/blue]")
        
        indices_sql = [
            # √çndice para busca por c√≥digo da categoria
            "CREATE INDEX IF NOT EXISTS idx_categorias_codcat ON categorias(codcat);",
            
            # √çndice para busca por n√≠veis
            "CREATE INDEX IF NOT EXISTS idx_categorias_nivel0 ON categorias(codnv0);",
            "CREATE INDEX IF NOT EXISTS idx_categorias_nivel1 ON categorias(codnv1);",
            "CREATE INDEX IF NOT EXISTS idx_categorias_nivel2 ON categorias(codnv2);",
            "CREATE INDEX IF NOT EXISTS idx_categorias_nivel3 ON categorias(codnv3);",
            
            # √çndice para busca textual
            "CREATE INDEX IF NOT EXISTS idx_categorias_nomcat ON categorias USING gin(to_tsvector('portuguese', nomcat));",
            "CREATE INDEX IF NOT EXISTS idx_categorias_nomnv1 ON categorias USING gin(to_tsvector('portuguese', nomnv1));",
            "CREATE INDEX IF NOT EXISTS idx_categorias_nomnv2 ON categorias USING gin(to_tsvector('portuguese', nomnv2));",
            "CREATE INDEX IF NOT EXISTS idx_categorias_nomnv3 ON categorias USING gin(to_tsvector('portuguese', nomnv3));",
            
            # √çndice para embeddings (busca sem√¢ntica)
            "CREATE INDEX IF NOT EXISTS idx_categorias_embeddings ON categorias USING ivfflat (cat_embeddings vector_cosine_ops);"
        ]
        
        for i, sql in enumerate(indices_sql, 1):
            try:
                cursor.execute(sql)
                console.print(f"   ‚úì √çndice {i}/{len(indices_sql)} criado")
            except Exception as e:
                console.print(f"   ‚ö†Ô∏è Erro no √≠ndice {i}: {e}")
        
        conn.commit()
        console.print("[green]‚úì √çndices criados![/green]")
        
        # 4. VERIFICAR ESTRUTURA DA TABELA
        console.print("üîç [cyan]Verificando estrutura da tabela...[/cyan]")
        
        cursor.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'categorias' 
            AND table_schema = 'public'
            ORDER BY ordinal_position;
        """)
        
        columns = cursor.fetchall()
        
        # Criar tabela de estrutura
        structure_table = Table()
        structure_table.add_column("Campo", style="green")
        structure_table.add_column("Tipo", style="yellow")
        structure_table.add_column("Nulo?", style="cyan")
        structure_table.add_column("Padr√£o", style="magenta")
        
        for col in columns:
            structure_table.add_row(
                col[0],  # column_name
                col[1],  # data_type
                "Sim" if col[2] == "YES" else "N√£o",  # is_nullable
                str(col[3]) if col[3] else ""  # column_default
            )
        
        console.print(structure_table)
        
        # 5. VERIFICAR √çNDICES CRIADOS
        console.print("üìã [cyan]Verificando √≠ndices criados...[/cyan]")
        
        cursor.execute("""
            SELECT indexname, indexdef 
            FROM pg_indexes 
            WHERE tablename = 'categorias'
            ORDER BY indexname;
        """)
        
        indices = cursor.fetchall()
        
        for idx_name, idx_def in indices:
            console.print(f"   ‚úì [green]{idx_name}[/green]")
        
        console.print(f"[green]‚úì Total de {len(indices)} √≠ndices encontrados[/green]")
        
        # 6. INFORMA√á√ïES FINAIS
        console.print("\nüìä [bold blue]RESUMO DA TABELA CRIADA:[/bold blue]")
        console.print(f"   üìã Nome: categorias")
        console.print(f"   üî¢ Campos: {len(columns)}")
        console.print(f"   üìã √çndices: {len(indices)}")
        console.print(f"   üß† Pronta para embeddings: Sim (VECTOR 3072)")
        console.print(f"   üîç Busca textual: Sim (GIN indices)")
        console.print(f"   üéØ Busca sem√¢ntica: Sim (IVFFlat index)")
        
        return True
        
    except Exception as e:
        console.print(f"[red]‚ùå Erro durante cria√ß√£o: {e}[/red]")
        conn.rollback()
        return False
        
    finally:
        cursor.close()
        conn.close()
        console.print("üîå [yellow]Conex√£o fechada[/yellow]")

def main():
    """Fun√ß√£o principal"""
    start_time = datetime.now()
    
    try:
        success = create_categorias_table()
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        if success:
            console.print(Panel(f"[bold green]TABELA CATEGORIAS CRIADA COM SUCESSO EM {duration:.2f}s![/bold green]"))
            console.print("[cyan]A tabela est√° pronta para:[/cyan]")
            console.print("   üìä Receber dados da planilha CATEGORIAS.xlsx")
            console.print("   üß† Gerar embeddings para busca sem√¢ntica")
            console.print("   üîç Realizar consultas textuais e por c√≥digo")
        else:
            console.print(Panel(f"[bold red]FALHA NA CRIA√á√ÉO DA TABELA![/bold red]"))
        
    except Exception as e:
        console.print(Panel(f"[bold red]ERRO GERAL: {e}[/bold red]"))

if __name__ == "__main__":
    main()
