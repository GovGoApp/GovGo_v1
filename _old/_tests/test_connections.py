#!/usr/bin/env python3
"""
Teste de Verifica√ß√£o de Conex√µes Ativas
Verifica quantas conex√µes est√£o abertas no PostgreSQL
"""

import os
import sys
import psycopg2
from dotenv import load_dotenv

# Carregar .env da pasta v1 (pasta pai)
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(dotenv_path)

# Configura√ß√µes de conex√£o
DB_PARAMS = {
    'host': os.getenv('SUPABASE_HOST', 'aws-0-sa-east-1.pooler.supabase.com'),
    'port': os.getenv('SUPABASE_PORT', '6543'),
    'database': os.getenv('SUPABASE_DATABASE', 'postgres'),
    'user': os.getenv('SUPABASE_USER', 'postgres.xrcqjnvltvhkwrqvvddf'),
    'password': os.getenv('SUPABASE_PASSWORD'),
    'sslmode': 'require',
    'connect_timeout': 10
}

def check_active_connections():
    """Verifica conex√µes ativas no PostgreSQL"""
    print("üîç VERIFICANDO CONEX√ïES ATIVAS NO POSTGRESQL")
    print("="*50)
    
    try:
        conn = psycopg2.connect(**DB_PARAMS)
        cursor = conn.cursor()
        
        # 1. Total de conex√µes ativas
        cursor.execute("""
            SELECT count(*) as total_connections
            FROM pg_stat_activity 
            WHERE state = 'active' OR state = 'idle'
        """)
        total_connections = cursor.fetchone()[0]
        print(f"üìä Total de conex√µes ativas/idle: {total_connections}")
        
        # 2. Conex√µes por estado
        cursor.execute("""
            SELECT state, count(*) 
            FROM pg_stat_activity 
            GROUP BY state
            ORDER BY count(*) DESC
        """)
        states = cursor.fetchall()
        print(f"\nüìã Conex√µes por estado:")
        for state, count in states:
            print(f"   ‚Ä¢ {state}: {count}")
        
        # 3. Conex√µes do nosso usu√°rio espec√≠fico
        cursor.execute("""
            SELECT count(*) 
            FROM pg_stat_activity 
            WHERE usename = %s 
              AND (state = 'active' OR state = 'idle')
        """, (DB_PARAMS['user'].split('.')[1] if '.' in DB_PARAMS['user'] else DB_PARAMS['user'],))
        user_connections = cursor.fetchone()[0]
        print(f"\nüë§ Conex√µes do nosso usu√°rio: {user_connections}")
        
        # 4. Detalhes das conex√µes do nosso usu√°rio
        cursor.execute("""
            SELECT 
                pid,
                state,
                query_start,
                state_change,
                left(query, 50) as query_preview
            FROM pg_stat_activity 
            WHERE usename = %s 
              AND (state = 'active' OR state = 'idle')
            ORDER BY state_change DESC
            LIMIT 10
        """, (DB_PARAMS['user'].split('.')[1] if '.' in DB_PARAMS['user'] else DB_PARAMS['user'],))
        
        user_details = cursor.fetchall()
        print(f"\nüîç Detalhes das conex√µes do usu√°rio:")
        for pid, state, query_start, state_change, query in user_details:
            print(f"   ‚Ä¢ PID {pid}: {state} | In√≠cio: {query_start} | Query: {query}...")
        
        # 5. Limite de conex√µes
        cursor.execute("SHOW max_connections")
        max_conn = cursor.fetchone()[0]
        print(f"\n‚öôÔ∏è Limite m√°ximo de conex√µes: {max_conn}")
        
        # 6. Conex√µes por aplica√ß√£o
        cursor.execute("""
            SELECT application_name, count(*) 
            FROM pg_stat_activity 
            WHERE application_name IS NOT NULL
            GROUP BY application_name
            ORDER BY count(*) DESC
        """)
        apps = cursor.fetchall()
        print(f"\nüì± Conex√µes por aplica√ß√£o:")
        for app, count in apps:
            print(f"   ‚Ä¢ {app}: {count}")
        
        cursor.close()
        conn.close()
        
        # An√°lise
        print(f"\nüìà AN√ÅLISE:")
        percentage = (total_connections / int(max_conn)) * 100
        print(f"   ‚Ä¢ Uso de conex√µes: {percentage:.1f}% ({total_connections}/{max_conn})")
        
        if user_connections > 5:
            print(f"   ‚ö†Ô∏è Muitas conex√µes do nosso usu√°rio ({user_connections})! Poss√≠vel vazamento.")
        elif user_connections == 0:
            print(f"   ‚úÖ Nenhuma conex√£o √≥rf√£ detectada.")
        else:
            print(f"   ‚úÖ Conex√µes do usu√°rio em n√≠vel normal ({user_connections}).")
            
        if percentage > 80:
            print(f"   üö® PostgreSQL pr√≥ximo do limite de conex√µes!")
        elif percentage > 50:
            print(f"   ‚ö†Ô∏è Uso moderado de conex√µes.")
        else:
            print(f"   ‚úÖ Uso baixo de conex√µes.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar conex√µes: {e}")
        return False

def test_connection_lifecycle():
    """Testa ciclo de vida das conex√µes"""
    print(f"\nüîÑ TESTANDO CICLO DE VIDA DAS CONEX√ïES")
    print("-"*40)
    
    connections = []
    try:
        # Criar v√°rias conex√µes
        print("üì§ Criando 5 conex√µes...")
        for i in range(5):
            conn = psycopg2.connect(**DB_PARAMS)
            connections.append(conn)
            print(f"   ‚úÖ Conex√£o {i+1} criada")
        
        # Verificar se apareceram no PostgreSQL
        print("\nüîç Verificando no PostgreSQL...")
        check_conn = psycopg2.connect(**DB_PARAMS)
        cursor = check_conn.cursor()
        cursor.execute("""
            SELECT count(*) 
            FROM pg_stat_activity 
            WHERE usename = %s 
              AND (state = 'active' OR state = 'idle')
        """, (DB_PARAMS['user'].split('.')[1] if '.' in DB_PARAMS['user'] else DB_PARAMS['user'],))
        active_count = cursor.fetchone()[0]
        print(f"üìä Conex√µes ativas detectadas: {active_count}")
        cursor.close()
        check_conn.close()
        
    finally:
        # Fechar conex√µes corretamente
        print(f"\nüîí Fechando conex√µes...")
        for i, conn in enumerate(connections):
            conn.close()
            print(f"   üîí Conex√£o {i+1} fechada")

def main():
    """Executa verifica√ß√£o completa de conex√µes"""
    check_active_connections()
    test_connection_lifecycle()
    
    print(f"\nüîÑ Executando verifica√ß√£o final...")
    check_active_connections()

if __name__ == "__main__":
    main()
