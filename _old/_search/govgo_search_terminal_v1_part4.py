#!/usr/bin/env python3
"""
govgo_search_terminal_v1_part4.py - PARTE 4/4
Sistema de Busca PNCP V1 - Fun√ß√£o Principal e Controles
=======================================================

üöÄ PARTE 4/4 - FUN√á√ÉO PRINCIPAL:
‚Ä¢ Loop principal do terminal V1
‚Ä¢ Controles de sistema e configura√ß√£o
‚Ä¢ Fun√ß√µes de an√°lise de documentos
‚Ä¢ Gerenciamento de sess√£o e cleanup
‚Ä¢ Integra√ß√£o de todas as partes

üìã CONTE√öDO DESTA PARTE:
‚Ä¢ Fun√ß√£o principal main() V1
‚Ä¢ Controles de processamento inteligente
‚Ä¢ An√°lise de documentos via upload
‚Ä¢ Gerenciamento de filtros de relev√¢ncia
‚Ä¢ Cleanup e finaliza√ß√£o de sess√£o
"""

import os
import sys
import time
from pathlib import Path
from typing import List, Dict, Optional
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.status import Status

# Importar todas as partes anteriores
try:
    from govgo_search_terminal_v1_part1 import (
        TerminalConfig, TerminalState, VERSION,
        SEARCH_ENGINE_AVAILABLE, DOCUMENT_PROCESSOR_AVAILABLE,
        create_header_panel, create_status_table,
        toggle_intelligent_processing, get_intelligent_status,
        set_relevance_filter_level, get_relevance_filter_status
    )
    
    from govgo_search_terminal_v1_part2 import (
        show_main_menu, show_search_menu, show_config_menu
    )
    
    from govgo_search_terminal_v1_part3 import (
        perform_search_with_ui, show_detailed_results, show_categories_detail,
        show_search_history
    )
except ImportError as e:
    print(f"‚ùå ERRO: N√£o foi poss√≠vel importar partes anteriores: {e}")
    print("üí° Certifique-se que todas as partes (1-3) est√£o na mesma pasta!")
    sys.exit(1)

# Importar processador de documentos V1 se dispon√≠vel
if DOCUMENT_PROCESSOR_AVAILABLE:
    try:
        from govgo_document_processor_v1 import get_document_processor
    except ImportError:
        DOCUMENT_PROCESSOR_AVAILABLE = False

# ============================================================================
# FUN√á√ïES DE CONTROLE DE SISTEMA V1
# ============================================================================

def show_system_status(console: Console, state: TerminalState) -> None:
    """Mostra status detalhado do sistema V1"""
    console.clear()
    
    header = create_header_panel("Status do Sistema V1", "Informa√ß√µes detalhadas dos componentes")
    console.print(header)
    console.print()
    
    # Tabela de status
    status_table = create_status_table(state)
    console.print(status_table)
    console.print()
    
    # Informa√ß√µes adicionais
    additional_info = Panel(
        "[bold cyan]Informa√ß√µes T√©cnicas V1:[/bold cyan]\n\n"
        f"‚Ä¢ Sistema: [white]GovGo Search V1[/white]\n"
        f"‚Ä¢ Vers√£o: [green]{VERSION}[/green]\n"
        f"‚Ä¢ Base de Dados: [yellow]Supabase V1[/yellow]\n"
        f"‚Ä¢ Engine: [blue]govgo_search_engine_v1.py[/blue]\n"
        f"‚Ä¢ Processador: [magenta]govgo_document_processor_v1.py[/magenta]\n"
        f"‚Ä¢ Interface: [cyan]Rich Terminal UI[/cyan]",
        title="[bold]üîß Detalhes T√©cnicos[/bold]",
        border_style="blue"
    )
    console.print(additional_info)
    console.print()
    
    Prompt.ask("Pressione [Enter] para voltar", default="")

def toggle_intelligent_processing_ui(console: Console, state: TerminalState) -> None:
    """Interface para toggle do processamento inteligente V1"""
    console.clear()
    
    header = create_header_panel("Processamento Inteligente V1", "Ativar/Desativar sistema de IA")
    console.print(header)
    console.print()
    
    # Status atual
    current_status = get_intelligent_status()
    is_enabled = current_status.get('intelligent_processing_enabled', False)
    
    current_panel = Panel(
        f"[bold]Status Atual:[/bold] {'üß† Ativo' if is_enabled else 'üí§ Inativo'}\n\n"
        f"[dim]Funcionalidades do Processamento Inteligente V1:[/dim]\n"
        f"‚Ä¢ An√°lise sem√¢ntica avan√ßada de queries\n"
        f"‚Ä¢ Extra√ß√£o autom√°tica de condi√ß√µes SQL\n"
        f"‚Ä¢ Identifica√ß√£o de entidades (UF, valores, datas)\n"
        f"‚Ä¢ Preprocessamento de termos de nega√ß√£o\n"
        f"‚Ä¢ Otimiza√ß√£o contextual de buscas",
        title=f"[bold]{'üß†' if is_enabled else 'üí§'} Processamento Inteligente V1[/bold]",
        border_style="green" if is_enabled else "yellow"
    )
    console.print(current_panel)
    console.print()
    
    # Confirmar altera√ß√£o
    action = "desativar" if is_enabled else "ativar"
    if Confirm.ask(f"Deseja {action} o processamento inteligente?"):
        try:
            with Status(f"Alterando processamento inteligente V1...", console=console):
                new_status = toggle_intelligent_processing()
                new_enabled = new_status.get('intelligent_processing_enabled', False)
                state.intelligent_status = new_status
            
            # Mostrar resultado
            if new_enabled != is_enabled:
                result_text = "üß† Ativado" if new_enabled else "üí§ Desativado"
                console.print(f"\n‚úÖ Processamento inteligente V1: [bold green]{result_text}[/bold green]")
            else:
                console.print(f"\n‚ö†Ô∏è Status mantido: {'üß† Ativo' if new_enabled else 'üí§ Inativo'}")
                
        except Exception as e:
            console.print(f"\n[red]‚ùå Erro ao alterar processamento inteligente: {e}[/red]")
    else:
        console.print(f"\n[yellow]Opera√ß√£o cancelada - Status mantido[/yellow]")
    
    console.print()
    Prompt.ask("Pressione [Enter] para voltar", default="")

def manage_relevance_filter_ui(console: Console, state: TerminalState) -> None:
    """Interface para gerenciar filtro de relev√¢ncia V1"""
    console.clear()
    
    header = create_header_panel("Filtro de Relev√¢ncia V1", "Configurar n√≠veis de filtragem IA")
    console.print(header)
    console.print()
    
    # Status atual
    current_status = get_relevance_filter_status()
    current_level = current_status.get('relevance_filter_level', 1)
    
    # Informa√ß√µes dos n√≠veis
    level_info = {
        1: {"name": "üîì Sem Filtro", "description": "Todos os resultados s√£o retornados", "color": "blue"},
        2: {"name": "‚öñÔ∏è Flex√≠vel", "description": "Filtragem moderada baseada em IA", "color": "yellow"},
        3: {"name": "üîí Restritivo", "description": "Filtragem rigorosa - apenas alta relev√¢ncia", "color": "red"}
    }
    
    # Painel atual
    current_info = level_info[current_level]
    current_panel = Panel(
        f"[bold]N√≠vel Atual:[/bold] {current_info['name']}\n"
        f"[dim]{current_info['description']}[/dim]\n\n"
        f"[bold cyan]Como funciona o Filtro V1:[/bold cyan]\n"
        f"‚Ä¢ [dim]N√≠vel 1:[/dim] Retorna todos os resultados encontrados\n"
        f"‚Ä¢ [dim]N√≠vel 2:[/dim] IA analisa e remove resultados pouco relevantes\n"
        f"‚Ä¢ [dim]N√≠vel 3:[/dim] IA aplica crit√©rios rigorosos de relev√¢ncia\n\n"
        f"[yellow]üí° Recomenda√ß√£o: Use N√≠vel 2 para a maioria das buscas[/yellow]",
        title=f"[bold]{current_info['name']} - N√≠vel {current_level}[/bold]",
        border_style=current_info['color']
    )
    console.print(current_panel)
    console.print()
    
    # Menu de op√ß√µes
    console.print("[bold]Escolha o novo n√≠vel de relev√¢ncia:[/bold]")
    for level, info in level_info.items():
        current_marker = "‚úÖ" if level == current_level else "  "
        console.print(f"   {current_marker} {level}. {info['name']} - {info['description']}")
    console.print("   0. Manter atual e voltar")
    console.print()
    
    # Escolha do usu√°rio
    choice = Prompt.ask("N√≠vel desejado", choices=["0", "1", "2", "3"], default="0")
    
    if choice == "0":
        console.print("[yellow]N√≠vel mantido[/yellow]")
    else:
        new_level = int(choice)
        if new_level != current_level:
            try:
                with Status(f"Configurando filtro de relev√¢ncia V1...", console=console):
                    set_relevance_filter_level(new_level)
                    new_status = get_relevance_filter_status()
                    state.relevance_status = new_status
                
                new_info = level_info[new_level]
                console.print(f"\n‚úÖ Filtro configurado: [bold green]{new_info['name']}[/bold green]")
                
            except Exception as e:
                console.print(f"\n[red]‚ùå Erro ao configurar filtro: {e}[/red]")
        else:
            console.print(f"\n[yellow]N√≠vel {new_level} j√° estava ativo[/yellow]")
    
    console.print()
    Prompt.ask("Pressione [Enter] para voltar", default="")

def analyze_document_ui(console: Console, state: TerminalState) -> None:
    """Interface para an√°lise de documentos V1"""
    console.clear()
    
    header = create_header_panel("An√°lise de Documentos V1", "Upload e processamento de arquivos")
    console.print(header)
    console.print()
    
    if not DOCUMENT_PROCESSOR_AVAILABLE:
        error_panel = Panel(
            "[red]‚ùå Processador de documentos V1 n√£o dispon√≠vel![/red]\n\n"
            "[dim]Verifique se o m√≥dulo govgo_document_processor_v1.py est√° instalado corretamente.[/dim]",
            title="[bold red]M√≥dulo Indispon√≠vel[/bold red]",
            border_style="red"
        )
        console.print(error_panel)
        Prompt.ask("Pressione [Enter] para voltar", default="")
        return
    
    # Informa√ß√µes sobre an√°lise de documentos
    info_panel = Panel(
        "[bold cyan]Funcionalidades de An√°lise V1:[/bold cyan]\n\n"
        "‚Ä¢ [white]Extra√ß√£o de texto[/white] de PDFs, Word, Excel, etc.\n"
        "‚Ä¢ [white]Sumariza√ß√£o autom√°tica[/white] com IA\n"
        "‚Ä¢ [white]Identifica√ß√£o de entidades[/white] (valores, datas, √≥rg√£os)\n"
        "‚Ä¢ [white]Gera√ß√£o de queries[/white] otimizadas para busca\n"
        "‚Ä¢ [white]An√°lise de relev√¢ncia[/white] contextual\n\n"
        "[yellow]üîß Engines suportados:[/yellow]\n"
        "‚Ä¢ Docling V3 (preferencial)\n"
        "‚Ä¢ MarkItDown V2 (fallback)",
        title="[bold]üìÑ An√°lise de Documentos V1[/bold]",
        border_style="blue"
    )
    console.print(info_panel)
    console.print()
    
    # Solicitar caminho do arquivo
    file_path = Prompt.ask("üìÅ [bold]Caminho do arquivo para an√°lise[/bold]", default="")
    
    if not file_path or file_path.strip() == "":
        console.print("[yellow]Opera√ß√£o cancelada[/yellow]")
        return
    
    file_path = file_path.strip()
    
    # Verificar se arquivo existe
    if not Path(file_path).exists():
        console.print(f"[red]‚ùå Arquivo n√£o encontrado: {file_path}[/red]")
        Prompt.ask("Pressione [Enter] para voltar", default="")
        return
    
    # Processar documento
    try:
        with Status("Analisando documento V1...", console=console) as status:
            processor = get_document_processor()
            
            status.update("Extraindo texto...")
            result = processor.analyze_document(file_path)
            
            status.update("Processando an√°lise...")
            time.sleep(1)  # Simular processamento
        
        if result:
            # Mostrar resultados da an√°lise
            console.print("\n[bold green]‚úÖ An√°lise conclu√≠da![/bold green]")
            console.print()
            
            # Resumo do documento
            summary_text = result.get('summary', 'Resumo n√£o dispon√≠vel')[:500] + "..." if len(result.get('summary', '')) > 500 else result.get('summary', 'Resumo n√£o dispon√≠vel')
            
            result_panel = Panel(
                f"[bold]üìÑ Arquivo:[/bold] {Path(file_path).name}\n"
                f"[bold]üìè Tamanho:[/bold] {result.get('text_length', 0)} caracteres\n"
                f"[bold]üéØ Confian√ßa:[/bold] {result.get('confidence', 0):.2f}\n\n"
                f"[bold cyan]üìù Resumo:[/bold cyan]\n{summary_text}",
                title="[bold]üìä Resultado da An√°lise V1[/bold]",
                border_style="green"
            )
            console.print(result_panel)
            
            # Queries sugeridas
            if 'suggested_queries' in result and result['suggested_queries']:
                console.print()
                console.print("[bold yellow]üí° Queries sugeridas para busca:[/bold yellow]")
                for i, query in enumerate(result['suggested_queries'][:5], 1):
                    console.print(f"   {i}. [cyan]{query}[/cyan]")
            
        else:
            console.print("\n[red]‚ùå Falha na an√°lise do documento[/red]")
            
    except Exception as e:
        console.print(f"\n[red]‚ùå Erro durante a an√°lise: {e}[/red]")
    
    console.print()
    Prompt.ask("Pressione [Enter] para voltar", default="")

# ============================================================================
# FUN√á√ÉO PRINCIPAL V1
# ============================================================================

def main():
    """Fun√ß√£o principal do Terminal V1"""
    console = Console()
    state = TerminalState()
    
    # Cabe√ßalho inicial
    console.clear()
    welcome_header = create_header_panel(
        "üöÄ Bem-vindo ao GovGo Search V1!",
        "Sistema Avan√ßado de Busca PNCP com IA"
    )
    console.print(welcome_header)
    console.print()
    
    # Verifica√ß√µes iniciais
    console.print("[bold yellow]üîç Verificando componentes V1...[/bold yellow]")
    
    if not SEARCH_ENGINE_AVAILABLE:
        console.print("[red]‚ùå Motor de busca V1 indispon√≠vel![/red]")
        console.print("[dim]Verifique govgo_search_engine_v1.py[/dim]")
        return
    else:
        console.print("[green]‚úÖ Motor de busca V1 carregado[/green]")
    
    if not DOCUMENT_PROCESSOR_AVAILABLE:
        console.print("[yellow]‚ö†Ô∏è Processador de documentos V1 indispon√≠vel[/yellow]")
        console.print("[dim]Algumas funcionalidades podem estar limitadas[/dim]")
    else:
        console.print("[green]‚úÖ Processador de documentos V1 carregado[/green]")
    
    console.print()
    time.sleep(2)
    
    # Atualizar status inicial
    try:
        state.intelligent_status = get_intelligent_status()
        state.relevance_status = get_relevance_filter_status()
    except Exception as e:
        console.print(f"[yellow]‚ö†Ô∏è Falha ao obter status inicial: {e}[/yellow]")
    
    # Loop principal
    try:
        while True:
            choice = show_main_menu(console, state)
            
            if choice == "0":  # Sair
                break
                
            elif choice == "1":  # Nova Busca
                search_params = show_search_menu(console, state.config)
                if search_params:
                    success = perform_search_with_ui(console, state, search_params)
                    if success and state.last_results:
                        # Menu p√≥s-busca
                        while True:
                            post_choice = Prompt.ask(
                                "[cyan]A√ß√£o[/cyan]",
                                choices=["enter", "e", "c", "s", "m"],
                                default="enter"
                            ).lower()
                            
                            if post_choice == "enter":
                                show_detailed_results(console, state.last_results)
                                break
                            elif post_choice == "e":
                                # Exporta√ß√£o manual (TODO: implementar menu de exporta√ß√£o)
                                console.print("[yellow]Funcionalidade de exporta√ß√£o manual em desenvolvimento[/yellow]")
                                time.sleep(1)
                                break
                            elif post_choice == "c":
                                show_categories_detail(console, state.last_categories)
                                break
                            elif post_choice == "s":
                                # Estat√≠sticas detalhadas (TODO: implementar)
                                console.print("[yellow]Estat√≠sticas detalhadas em desenvolvimento[/yellow]")
                                time.sleep(1)
                                break
                            elif post_choice == "m":
                                break
            
            elif choice == "2":  # Configura√ß√µes
                show_config_menu(console, state.config)
            
            elif choice == "3":  # Status do Sistema
                show_system_status(console, state)
            
            elif choice == "4":  # Hist√≥rico
                show_search_history(console, state)
            
            elif choice == "5":  # √öltimos Resultados
                if state.last_results:
                    show_detailed_results(console, state.last_results)
                else:
                    console.clear()
                    console.print(Panel(
                        "[yellow]üì≠ Nenhum resultado dispon√≠vel[/yellow]\n\n"
                        "[dim]Realize uma busca primeiro para ver os resultados aqui[/dim]",
                        title="[bold]Sem Resultados[/bold]",
                        border_style="yellow"
                    ))
                    Prompt.ask("Pressione [Enter] para voltar", default="")
            
            elif choice == "6":  # TOP Categorias
                if state.last_categories:
                    show_categories_detail(console, state.last_categories)
                else:
                    console.clear()
                    console.print(Panel(
                        "[yellow]üì≠ Nenhuma categoria dispon√≠vel[/yellow]\n\n"
                        "[dim]Realize uma busca com filtro categ√≥rico primeiro[/dim]",
                        title="[bold]Sem Categorias[/bold]",
                        border_style="yellow"
                    ))
                    Prompt.ask("Pressione [Enter] para voltar", default="")
            
            elif choice == "7":  # An√°lise de Documento
                analyze_document_ui(console, state)
            
            elif choice == "8":  # Processamento Inteligente
                toggle_intelligent_processing_ui(console, state)
            
            elif choice == "9":  # Filtro de Relev√¢ncia
                manage_relevance_filter_ui(console, state)
    
    except KeyboardInterrupt:
        console.print("\n[yellow]Opera√ß√£o cancelada pelo usu√°rio[/yellow]")
    
    except Exception as e:
        console.print(f"\n[red]‚ùå Erro inesperado: {e}[/red]")
    
    finally:
        # Cleanup e despedida
        console.clear()
        
        # Resumo da sess√£o
        session = state.get_session_summary()
        
        goodbye_panel = Panel(
            f"[bold cyan]Obrigado por usar o GovGo Search V1![/bold cyan]\n\n"
            f"üìä [white]Resumo da Sess√£o:[/white]\n"
            f"‚Ä¢ Buscas realizadas: [green]{session['searches_performed']}[/green]\n"
            f"‚Ä¢ Resultados encontrados: [yellow]{session['total_results']}[/yellow]\n"
            f"‚Ä¢ Tempo de sess√£o: [blue]{session['duration_minutes']:.1f} minutos[/blue]\n"
            f"‚Ä¢ M√©dia de resultados: [magenta]{session['avg_results_per_search']:.1f}[/magenta]\n\n"
            f"[dim]At√© a pr√≥xima! üëã[/dim]",
            title="[bold]üöÄ GovGo Search V1 - Sess√£o Encerrada[/bold]",
            border_style="cyan"
        )
        console.print(goodbye_panel)

# ============================================================================
# EXPORTA√á√ÉO DA PARTE 4
# ============================================================================

if __name__ == "__main__":
    print("üöÄ GovGo Search Terminal V1 - PARTE 4/4")
    print("üéÆ Fun√ß√£o principal e controles carregados!")
    print("‚ö†Ô∏è Execute o arquivo principal govgo_search_terminal_v1.py")
    print()
    print("üîß Ou execute diretamente com: python -c 'from govgo_search_terminal_v1_part4 import main; main()'")
