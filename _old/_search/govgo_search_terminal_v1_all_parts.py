#!/usr/bin/env python3
"""
govgo_search_terminal_v1.py
Sistema de Busca PNCP V1 - Terminal Interativo Completo
=======================================================

üöÄ MIGRA√á√ÉO COMPLETA V0 ‚Üí V1:
‚Ä¢ Baseado no GvG_SP_Search_Terminal_v9.py 
‚Ä¢ Sistema unificado de busca para GovGo V1
‚Ä¢ Nova base Supabase V1: hemztmtbejcbhgfmsvfq
‚Ä¢ Interface Rich modernizada e modular
‚Ä¢ C√≥digo organizado em 4 partes modulares

üéØ FUNCIONALIDADES PRINCIPAIS V1:
‚Ä¢ Interface interativa Rich com menus coloridos
‚Ä¢ Busca sem√¢ntica, palavras-chave e h√≠brida com IA
‚Ä¢ Sistema de relev√¢ncia 3 n√≠veis configur√°vel
‚Ä¢ Processamento inteligente de consultas V1
‚Ä¢ An√°lise e sumariza√ß√£o de documentos
‚Ä¢ Exporta√ß√£o autom√°tica JSON/PDF/Excel/LOG
‚Ä¢ Hist√≥rico de buscas e estat√≠sticas da sess√£o
‚Ä¢ Configura√ß√µes din√¢micas e personaliz√°veis

üìã ESTRUTURA MODULAR V1:
‚Ä¢ PARTE 1: Configura√ß√µes, imports, classes b√°sicas
‚Ä¢ PARTE 2: Fun√ß√µes de menu e interface Rich
‚Ä¢ PARTE 3: Fun√ß√µes de busca e processamento  
‚Ä¢ PARTE 4: Fun√ß√£o principal e controles de sistema

üîß REQUISITOS V1:
‚Ä¢ Python 3.8+
‚Ä¢ Rich library para interface
‚Ä¢ Sistema V1 configurado (govgo_search_engine_v1.py)
‚Ä¢ Processador V1 (govgo_document_processor_v1.py)
‚Ä¢ Banco PostgreSQL com pgvector (Supabase V1)
‚Ä¢ OpenAI API key para processamento inteligente

üìö EXEMPLOS DE USO:
    # Executar terminal interativo
    python govgo_search_terminal_v1.py
    
    # Executar com configura√ß√µes espec√≠ficas  
    python govgo_search_terminal_v1.py --config custom_config.json
    
    # Modo debug
    python govgo_search_terminal_v1.py --debug

‚öôÔ∏è CONFIGURA√á√ïES PADR√ÉO V1:
‚Ä¢ Tipo de Busca: Sem√¢ntica
‚Ä¢ Abordagem: Filtro Categ√≥rico  
‚Ä¢ Relev√¢ncia: N√≠vel 1 (Sem filtro)
‚Ä¢ Ordena√ß√£o: Por Valor Estimado
‚Ä¢ Max Resultados: 30
‚Ä¢ TOP Categorias: 10
‚Ä¢ Filtrar Encerradas: Ativo
‚Ä¢ Negation Embeddings: Ativo
‚Ä¢ Export Autom√°tico: Ativo

üö® MIGRA√á√ÉO V0 ‚Üí V1:
‚Ä¢ Tabelas: categorias ‚Üí categoria, contratacoes ‚Üí contratacao
‚Ä¢ Campos: snake_case (orgao_entidade_razao_social, etc.)
‚Ä¢ Embeddings: embedding_vector ‚Üí embeddings
‚Ä¢ Engine: Novo motor unificado V1
‚Ä¢ Interface: Rich UI modernizada
‚Ä¢ Funcionalidades: Processamento inteligente V1
"""

import os
import sys
import argparse
import json
from pathlib import Path

# Verificar se todas as partes est√£o dispon√≠veis
def check_parts_available():
    """Verifica se todas as partes modulares est√£o dispon√≠veis"""
    current_dir = Path(__file__).parent
    parts = [
        'govgo_search_terminal_v1_part1.py',
        'govgo_search_terminal_v1_part2.py', 
        'govgo_search_terminal_v1_part3.py',
        'govgo_search_terminal_v1_part4.py'
    ]
    
    missing_parts = []
    for part in parts:
        if not (current_dir / part).exists():
            missing_parts.append(part)
    
    if missing_parts:
        print("‚ùå ERRO: Partes modulares n√£o encontradas:")
        for part in missing_parts:
            print(f"   ‚Ä¢ {part}")
        print("\nüí° Certifique-se que todas as 4 partes est√£o na mesma pasta!")
        return False
    
    return True

def load_config_from_file(config_path: str):
    """Carrega configura√ß√£o de arquivo JSON"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar configura√ß√£o: {e}")
        return None

def setup_argument_parser():
    """Configura parser de argumentos V1"""
    parser = argparse.ArgumentParser(
        description='Sistema de Busca PNCP V1 - Terminal Interativo',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        '--config', '-c',
        help='Arquivo JSON com configura√ß√µes personalizadas',
        type=str,
        metavar='FILE'
    )
    
    parser.add_argument(
        '--debug', '-d',
        help='Ativar modo debug com informa√ß√µes detalhadas',
        action='store_true'
    )
    
    parser.add_argument(
        '--version', '-v',
        help='Mostrar vers√£o e informa√ß√µes do sistema',
        action='store_true'
    )
    
    parser.add_argument(
        '--check-deps', '--check',
        help='Verificar depend√™ncias e componentes V1',
        action='store_true'
    )
    
    return parser

def show_version_info():
    """Mostra informa√ß√µes de vers√£o V1"""
    print("üöÄ GovGo Search Terminal V1")
    print("=" * 50)
    print(f"Vers√£o: 1.0.0")
    print(f"Data: Dezembro 2024") 
    print(f"Base: Supabase V1 (hemztmtbejcbhgfmsvfq)")
    print(f"Engine: govgo_search_engine_v1.py")
    print(f"Processador: govgo_document_processor_v1.py")
    print(f"Interface: Rich Terminal UI")
    print(f"Python: {sys.version}")
    print("=" * 50)

def check_dependencies():
    """Verifica depend√™ncias e componentes V1"""
    print("üîç Verificando Componentes V1...")
    print("=" * 50)
    
    # Verificar partes modulares
    if check_parts_available():
        print("‚úÖ Partes modulares: OK")
    else:
        print("‚ùå Partes modulares: FALHA")
        return False
    
    # Verificar Rich
    try:
        import rich
        print(f"‚úÖ Rich UI: {rich.__version__}")
    except ImportError:
        print("‚ùå Rich UI: N√ÉO INSTALADO")
        print("   pip install rich")
        return False
    
    # Verificar motor de busca V1
    try:
        sys.path.insert(0, str(Path(__file__).parent))
        from govgo_search_engine_v1 import GovGoSearchEngine
        print("‚úÖ Motor de Busca V1: OK")
    except ImportError as e:
        print(f"‚ùå Motor de Busca V1: FALHA - {e}")
        return False
    
    # Verificar processador de documentos V1
    try:
        from govgo_document_processor_v1 import get_query_processor
        print("‚úÖ Processador de Documentos V1: OK") 
    except ImportError:
        print("‚ö†Ô∏è Processador de Documentos V1: INDISPON√çVEL")
        print("   (Funcionalidade opcional)")
    
    # Verificar pandas/numpy
    try:
        import pandas as pd
        import numpy as np
        print(f"‚úÖ Pandas/NumPy: {pd.__version__}/{np.__version__}")
    except ImportError:
        print("‚ùå Pandas/NumPy: N√ÉO INSTALADO")
        print("   pip install pandas numpy")
        return False
    
    # Verificar dotenv
    try:
        from dotenv import load_dotenv
        print("‚úÖ Python-dotenv: OK")
    except ImportError:
        print("‚ùå Python-dotenv: N√ÉO INSTALADO")
        print("   pip install python-dotenv")
        return False
    
    print("=" * 50)
    print("‚úÖ Verifica√ß√£o de depend√™ncias conclu√≠da!")
    return True

def main():
    """Fun√ß√£o principal do arquivo unificado V1"""
    # Parser de argumentos
    parser = setup_argument_parser()
    args = parser.parse_args()
    
    # Comandos especiais
    if args.version:
        show_version_info()
        return
    
    if args.check_deps:
        if check_dependencies():
            print("\nüöÄ Sistema pronto para uso!")
        else:
            print("\n‚ùå Corrija as depend√™ncias antes de continuar")
        return
    
    # Verificar partes modulares
    if not check_parts_available():
        sys.exit(1)
    
    # Debug mode
    if args.debug:
        print("üêõ Modo DEBUG ativado")
        os.environ['GOVGO_DEBUG'] = '1'
    
    try:
        # Importar e executar fun√ß√£o principal
        from govgo_search_terminal_v1_part4 import main as terminal_main
        
        # Carregar configura√ß√£o personalizada se fornecida
        if args.config:
            config_data = load_config_from_file(args.config)
            if config_data:
                print(f"‚úÖ Configura√ß√£o carregada: {args.config}")
                # TODO: Aplicar configura√ß√£o personalizada ao TerminalState
            else:
                print("‚ö†Ô∏è Usando configura√ß√£o padr√£o")
        
        # Executar terminal principal V1
        terminal_main()
        
    except ImportError as e:
        print(f"‚ùå ERRO: Falha ao importar componentes V1: {e}")
        print("üí° Execute --check-deps para diagnosticar o problema")
        sys.exit(1)
    
    except KeyboardInterrupt:
        print("\nüëã Terminal V1 encerrado pelo usu√°rio")
    
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
