#!/usr/bin/env python3
"""
GovGo V1 - Limpar Banco de Dados COMPLETO
==========================================
Remove TODAS as tabelas, fun√ß√µes, triggers, constraints e extens√µes do Supabase V1
Limpeza total para recome√ßar do zero
"""

import os
import psycopg2
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm
from dotenv import load_dotenv

# Carregar vari√°veis do .env
load_dotenv()

console = Console()

def clean_database():
    """Remove TUDO do banco - limpeza total"""
    
    # Confirma√ß√£o de seguran√ßa
    console.print(Panel.fit(
        "[bold red]‚ö†Ô∏è ATEN√á√ÉO: LIMPEZA COMPLETA[/bold red]\n"
        "Este script vai REMOVER TODAS as tabelas do Supabase V1",
        title="üóëÔ∏è Drop All Tables"
    ))
    
    confirm = Confirm.ask("üö® Confirma a remo√ß√£o de TODAS as tabelas?")
    if not confirm:
        console.print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return False
    
    try:
        # Conectar ao banco
        connection = psycopg2.connect(
            host=os.getenv("SUPABASE_HOST"),
            database=os.getenv("SUPABASE_DBNAME"),
            user=os.getenv("SUPABASE_USER"),
            password=os.getenv("SUPABASE_PASSWORD"),
            port=int(os.getenv("SUPABASE_PORT", "5432"))
        )
        
        console.print("‚úÖ Conectado ao Supabase")
        cursor = connection.cursor()
        
        # PASSO 1: Descobrir TODAS as tabelas que existem no schema public
        console.print("üîç Descobrindo todas as tabelas existentes...")
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE'
            ORDER BY table_name;
        """)
        
        existing_tables = [row[0] for row in cursor.fetchall()]
        console.print(f"üìã Encontradas {len(existing_tables)} tabelas: {', '.join(existing_tables)}")
        
        # PASSO 2: Remover TODAS as tabelas com CASCADE
        if existing_tables:
            console.print("üóëÔ∏è Removendo TODAS as tabelas...")
            for table in existing_tables:
                try:
                    ######################### ATEN√á√ÇO!!!!
                    # cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")
                    console.print(f"  ‚úÖ {table} removida")
                except Exception as e:
                    console.print(f"  ‚ùå Erro em {table}: {e}")
        
        # PASSO 3: Remover TODAS as fun√ß√µes personalizadas
        console.print("üîß Removendo fun√ß√µes personalizadas...")
        cursor.execute("""
            SELECT routine_name 
            FROM information_schema.routines 
            WHERE routine_schema = 'public' 
            AND routine_type = 'FUNCTION'
            ORDER BY routine_name;
        """)
        
        existing_functions = [row[0] for row in cursor.fetchall()]
        for func in existing_functions:
            try:
                cursor.execute(f"DROP FUNCTION IF EXISTS {func}() CASCADE;")
                console.print(f"  ‚úÖ Fun√ß√£o {func} removida")
            except Exception as e:
                console.print(f"  ‚ùå Erro na fun√ß√£o {func}: {e}")
        
        # PASSO 4: Remover TODOS os tipos personalizados
        console.print("üì¶ Removendo tipos personalizados...")
        cursor.execute("""
            SELECT typname 
            FROM pg_type 
            WHERE typnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
            AND typtype = 'c'
            ORDER BY typname;
        """)
        
        existing_types = [row[0] for row in cursor.fetchall()]
        for typ in existing_types:
            try:
                cursor.execute(f"DROP TYPE IF EXISTS {typ} CASCADE;")
                console.print(f"  ‚úÖ Tipo {typ} removido")
            except Exception as e:
                console.print(f"  ‚ùå Erro no tipo {typ}: {e}")
        
        # PASSO 5: Garantir que a extens√£o vector existe
        console.print("üîå Garantindo extens√£o vector...")
        try:
            cursor.execute("CREATE EXTENSION IF NOT EXISTS vector;")
            console.print("  ‚úÖ Extens√£o vector garantida")
        except Exception as e:
            console.print(f"  ‚ùå Erro na extens√£o: {e}")
        
        # PASSO 6: Confirmar mudan√ßas
        connection.commit()
        console.print("\nüéâ LIMPEZA TOTAL CONCLU√çDA!")
        console.print("üìä Status final:")
        
        # Verificar se realmente est√° limpo
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_type = 'BASE TABLE';
        """)
        remaining_tables = cursor.fetchall()
        
        if remaining_tables:
            console.print(f"  ‚ö†Ô∏è Ainda existem {len(remaining_tables)} tabelas")
        else:
            console.print("  ‚úÖ Nenhuma tabela restante - banco completamente limpo")
        
        cursor.close()
        connection.close()
        console.print("üîå Conex√£o fechada")
        
        return True
        
    except Exception as e:
        console.print(f"‚ùå Erro ao limpar tabelas: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    if clean_database():
        console.print("\n‚úÖ [bold green]Banco limpo com sucesso![/bold green]")
        console.print("üöÄ Agora voc√™ pode executar o setup do banco novamente")
    else:
        console.print("\n‚ùå [bold red]Falha na limpeza[/bold red]")
        exit(1)

if __name__ == "__main__":
    main()
