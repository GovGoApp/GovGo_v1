#!/usr/bin/env python3
"""
GovGo V1 - Executar Migra√ß√£o Completa
=====================================
Script master para executar toda a sequ√™ncia de migra√ß√£o
FASE 2 + FASE 3 completas

SEQU√äNCIA DE EXECU√á√ÉO:
01. Configurar base Supabase
02. Descobrir campos API
03. Migrar dados locais
04. Coletar dados via API  
05. Reconciliar dados
06. Gerar relat√≥rio final
"""

import os
import sys
import subprocess
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeRemainingColumn
import time

console = Console()

class MigrationMaster:
    """Controlador master da migra√ß√£o GovGo V0 ‚Üí V1"""
    
    def __init__(self):
        self.scripts_dir = os.path.dirname(__file__)
        self.scripts = [
            {
                "numero": "01",
                "nome": "setup_database.py",
                "titulo": "Configurar Base Supabase",
                "descricao": "Criar todas as tabelas no Supabase",
                "fase": "FASE 2"
            },
            {
                "numero": "02", 
                "nome": "descobrir_campos_ata_pca.py",
                "titulo": "Descobrir Campos API",
                "descricao": "Mapear campos das ATAs e PCAs",
                "fase": "FASE 2"
            },
            {
                "numero": "03",
                "nome": "migrate_from_local.py", 
                "titulo": "Migrar Dados Locais",
                "descricao": "Migrar SQLite V0 ‚Üí Supabase V1",
                "fase": "FASE 3"
            },
            {
                "numero": "04",
                "nome": "collect_from_api.py",
                "titulo": "Coletar Dados via API",
                "descricao": "Buscar dados faltantes na API PNCP",
                "fase": "FASE 3"
            },
            {
                "numero": "05",
                "nome": "reconcile_data.py",
                "titulo": "Reconciliar Dados", 
                "descricao": "Unificar e resolver conflitos",
                "fase": "FASE 3"
            },
            {
                "numero": "06",
                "nome": "migration_report.py",
                "titulo": "Relat√≥rio Final",
                "descricao": "Validar e reportar migra√ß√£o",
                "fase": "FASE 3"
            }
        ]
        self.resultados = {}
        
    def mostrar_introducao(self):
        """Mostra introdu√ß√£o do processo"""
        console.print(Panel.fit(
            "[bold blue]GovGo V1 - Migra√ß√£o Completa V0 ‚Üí V1[/bold blue]\n"
            "\n"
            "[yellow]FASE 2 - Estrutura do Banco:[/yellow]\n"
            "‚Ä¢ 01. Configurar base Supabase (7 tabelas)\n"
            "‚Ä¢ 02. Descobrir campos API (ATAs e PCAs)\n"
            "\n"
            "[green]FASE 3 - Migra√ß√£o H√≠brida:[/green]\n"
            "‚Ä¢ 03. Migrar dados locais (SQLite ‚Üí Supabase)\n"
            "‚Ä¢ 04. Coletar dados via API (dados faltantes)\n"
            "‚Ä¢ 05. Reconciliar dados (resolver conflitos)\n"
            "‚Ä¢ 06. Relat√≥rio final (valida√ß√£o completa)\n"
            "\n"
            "[cyan]Tempo estimado: 15-30 minutos[/cyan]",
            title="üöÄ Master Migration Script"
        ))
        
        # Tabela dos scripts
        table = Table(title="Scripts da Migra√ß√£o")
        table.add_column("N¬∫", style="cyan", width=4)
        table.add_column("Script", style="blue", width=25)
        table.add_column("Fase", style="yellow", width=8)
        table.add_column("Descri√ß√£o", style="green")
        
        for script in self.scripts:
            table.add_row(
                script["numero"],
                script["nome"],
                script["fase"], 
                script["descricao"]
            )
        
        console.print(table)
        
        console.print("\n‚ö†Ô∏è [yellow]ATEN√á√ÉO:[/yellow]")
        console.print("‚Ä¢ Certifique-se de que as credenciais do Supabase est√£o configuradas")
        console.print("‚Ä¢ O banco SQLite V0 deve estar acess√≠vel")
        console.print("‚Ä¢ A conex√£o com a internet √© necess√°ria para a API PNCP")
        
        resposta = console.input("\nüöÄ Deseja continuar com a migra√ß√£o completa? [s/N]: ")
        return resposta.lower() in ['s', 'sim', 'y', 'yes']
    
    def executar_script(self, script_info):
        """Executa um script individual"""
        script_path = os.path.join(self.scripts_dir, f"{script_info['numero']}_{script_info['nome']}")
        
        if not os.path.exists(script_path):
            console.print(f"‚ùå Script n√£o encontrado: {script_path}")
            return False
        
        console.print(f"\nüîÑ Executando: {script_info['titulo']}")
        console.print(f"üìÑ Script: {script_info['numero']}_{script_info['nome']}")
        
        inicio = datetime.now()
        
        try:
            # Executar o script
            resultado = subprocess.run(
                [sys.executable, script_path],
                cwd=self.scripts_dir,
                capture_output=True,
                text=True,
                timeout=1800  # 30 minutos timeout
            )
            
            fim = datetime.now()
            duracao = (fim - inicio).total_seconds()
            
            # Processar resultado
            if resultado.returncode == 0:
                console.print(f"‚úÖ {script_info['titulo']} conclu√≠do ({duracao:.1f}s)")
                status = "SUCESSO"
            else:
                console.print(f"‚ùå {script_info['titulo']} falhou ({duracao:.1f}s)")
                console.print(f"Erro: {resultado.stderr}")
                status = "FALHA"
            
            # Armazenar resultado
            self.resultados[script_info['numero']] = {
                "script": script_info['nome'],
                "titulo": script_info['titulo'],
                "status": status,
                "duracao": duracao,
                "stdout": resultado.stdout,
                "stderr": resultado.stderr,
                "inicio": inicio.isoformat(),
                "fim": fim.isoformat()
            }
            
            return status == "SUCESSO"
            
        except subprocess.TimeoutExpired:
            console.print(f"‚è±Ô∏è {script_info['titulo']} excedeu tempo limite (30min)")
            self.resultados[script_info['numero']] = {
                "script": script_info['nome'],
                "titulo": script_info['titulo'],
                "status": "TIMEOUT",
                "duracao": 1800,
                "erro": "Timeout de 30 minutos excedido"
            }
            return False
            
        except Exception as e:
            console.print(f"üí• Erro inesperado ao executar {script_info['titulo']}: {e}")
            self.resultados[script_info['numero']] = {
                "script": script_info['nome'],
                "titulo": script_info['titulo'],
                "status": "ERRO",
                "erro": str(e)
            }
            return False
    
    def executar_migracao_completa(self):
        """Executa toda a sequ√™ncia de migra√ß√£o"""
        if not self.mostrar_introducao():
            console.print("‚ùå Migra√ß√£o cancelada pelo usu√°rio")
            return False
        
        console.print("\n" + "="*60)
        console.print("üöÄ INICIANDO MIGRA√á√ÉO COMPLETA")
        console.print("="*60)
        
        inicio_total = datetime.now()
        
        # Executar scripts em sequ√™ncia
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            console=console
        ) as progress:
            
            task = progress.add_task("Executando migra√ß√£o...", total=len(self.scripts))
            
            for i, script in enumerate(self.scripts):
                progress.update(task, description=f"[{script['fase']}] {script['titulo']}")
                
                sucesso = self.executar_script(script)
                
                if not sucesso:
                    console.print(f"\n‚ùå [bold red]MIGRA√á√ÉO INTERROMPIDA![/bold red]")
                    console.print(f"Falha no script: {script['titulo']}")
                    
                    # Perguntar se quer continuar
                    continuar = console.input("\nü§î Deseja continuar mesmo assim? [s/N]: ")
                    if not continuar.lower() in ['s', 'sim', 'y', 'yes']:
                        console.print("üõë Migra√ß√£o interrompida pelo usu√°rio")
                        return False
                
                progress.advance(task)
                
                # Pausa entre scripts (exceto o √∫ltimo)
                if i < len(self.scripts) - 1:
                    time.sleep(2)
        
        fim_total = datetime.now()
        duracao_total = (fim_total - inicio_total).total_seconds()
        
        # Mostrar resultado final
        self.mostrar_resultado_final(duracao_total)
        
        # Salvar log completo
        self.salvar_log_execucao(inicio_total, fim_total)
        
        return True
    
    def mostrar_resultado_final(self, duracao_total):
        """Mostra resultado final da migra√ß√£o"""
        console.print("\n" + "="*60)
        console.print("üìä RESULTADO FINAL DA MIGRA√á√ÉO")
        console.print("="*60)
        
        # Contar sucessos e falhas
        sucessos = sum(1 for r in self.resultados.values() if r["status"] == "SUCESSO")
        falhas = sum(1 for r in self.resultados.values() if r["status"] in ["FALHA", "ERRO", "TIMEOUT"])
        
        # Status geral
        if falhas == 0:
            status_geral = "‚úÖ SUCESSO COMPLETO"
            cor = "bold green"
        elif sucessos >= 4:  # Pelo menos migra√ß√£o b√°sica funcionou
            status_geral = "üü° SUCESSO PARCIAL"
            cor = "bold yellow"
        else:
            status_geral = "‚ùå FALHA CR√çTICA"
            cor = "bold red"
        
        console.print(f"[{cor}]{status_geral}[/{cor}]")
        console.print(f"Tempo total: {duracao_total/60:.1f} minutos")
        console.print(f"Scripts executados: {len(self.resultados)}/{len(self.scripts)}")
        console.print(f"Sucessos: {sucessos} | Falhas: {falhas}")
        
        # Tabela detalhada
        table = Table(title="Detalhes da Execu√ß√£o")
        table.add_column("Script", style="cyan")
        table.add_column("Status", style="yellow")
        table.add_column("Tempo", style="blue")
        table.add_column("Observa√ß√µes", style="green")
        
        for script in self.scripts:
            resultado = self.resultados.get(script["numero"], {"status": "N√ÉO EXECUTADO", "duracao": 0})
            
            if resultado["status"] == "SUCESSO":
                emoji = "‚úÖ"
                cor_status = "green"
            elif resultado["status"] in ["FALHA", "ERRO"]:
                emoji = "‚ùå"
                cor_status = "red"
            elif resultado["status"] == "TIMEOUT":
                emoji = "‚è±Ô∏è"
                cor_status = "yellow"
            else:
                emoji = "‚è∏Ô∏è"
                cor_status = "gray"
            
            observacao = ""
            if "erro" in resultado:
                observacao = resultado["erro"][:50] + "..." if len(resultado["erro"]) > 50 else resultado["erro"]
            
            table.add_row(
                f"{script['numero']}. {script['titulo']}",
                f"[{cor_status}]{emoji} {resultado['status']}[/{cor_status}]",
                f"{resultado.get('duracao', 0):.1f}s",
                observacao
            )
        
        console.print(table)
        
        # Pr√≥ximos passos
        console.print("\nüéØ [bold blue]PR√ìXIMOS PASSOS:[/bold blue]")
        
        if falhas == 0:
            console.print("üéâ Migra√ß√£o 100% conclu√≠da!")
            console.print("üìä Verifique o relat√≥rio final: relatorio_migracao_completo.json")
            console.print("üöÄ O sistema V1 est√° pronto para uso!")
        elif sucessos >= 3:
            console.print("‚ö†Ô∏è Migra√ß√£o parcialmente conclu√≠da")
            console.print("üîß Revise os scripts que falharam")
            console.print("üìä Verifique os relat√≥rios gerados")
        else:
            console.print("‚ùå Migra√ß√£o com problemas cr√≠ticos")
            console.print("üîß Revise a configura√ß√£o do Supabase")
            console.print("üìû Verifique conectividade e credenciais")
        
        console.print("\nüíæ Log completo salvo em: migracao_completa_log.json")
    
    def salvar_log_execucao(self, inicio, fim):
        """Salva log completo da execu√ß√£o"""
        import json
        
        log = {
            "migracao_info": {
                "data_inicio": inicio.isoformat(),
                "data_fim": fim.isoformat(),
                "duracao_total_segundos": (fim - inicio).total_seconds(),
                "versao_origem": "V0 (SQLite)",
                "versao_destino": "V1 (Supabase)"
            },
            "scripts_executados": self.resultados,
            "estatisticas": {
                "total_scripts": len(self.scripts),
                "scripts_executados": len(self.resultados),
                "sucessos": sum(1 for r in self.resultados.values() if r["status"] == "SUCESSO"),
                "falhas": sum(1 for r in self.resultados.values() if r["status"] in ["FALHA", "ERRO", "TIMEOUT"])
            }
        }
        
        with open("migracao_completa_log.json", "w", encoding="utf-8") as f:
            json.dump(log, f, indent=2, ensure_ascii=False)
        
        console.print("üíæ Log salvo: migracao_completa_log.json")

def main():
    """Fun√ß√£o principal"""
    master = MigrationMaster()
    
    console.print(Panel.fit(
        "[bold blue]GovGo V1 - Master Migration Script[/bold blue]\n"
        "Script controlador para migra√ß√£o completa V0 ‚Üí V1",
        title="üéØ Migration Master"
    ))
    
    if master.executar_migracao_completa():
        console.print("\nüèÅ [bold green]MIGRA√á√ÉO MASTER CONCLU√çDA![/bold green]")
    else:
        console.print("\nüõë [bold red]MIGRA√á√ÉO MASTER INTERROMPIDA[/bold red]")
        exit(1)

if __name__ == "__main__":
    main()
